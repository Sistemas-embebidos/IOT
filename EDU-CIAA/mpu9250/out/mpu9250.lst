
Grado/mpu9250/out/mpu9250.elf:     file format elf32-littlearm
Grado/mpu9250/out/mpu9250.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000479

Program Header:
0x70000001 off    0x000188b0 vaddr 0x1a0088b0 paddr 0x1a0088b0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000bd0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000088b8 memsz 0x000088b8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0088b8 align 2**16
         filesz 0x000009f4 memsz 0x000009f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000088ac  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009f4  10000000  1a0088b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
  6 .bss          000001d8  100009f8  100009f8  000009f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a0088ac  1a0088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0088b0  1a0088b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 18 .noinit       00000000  10000bd0  10000bd0  000209f4  2**2
                  CONTENTS
 19 .debug_info   0001d923  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000045c0  00000000  00000000  0003e317  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007d40  00000000  00000000  000428d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a40  00000000  00000000  0004a617  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000a60  00000000  00000000  0004b057  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000c997  00000000  00000000  0004bab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00010ca7  00000000  00000000  0005844e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028150  00000000  00000000  000690f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  00091245  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000912ad  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000029a4  00000000  00000000  000912e0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0088ac l    d  .init_array	00000000 .init_array
1a0088b0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000bd0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 system.c
100009f8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0083c4 l     O .text	00000004 InitClkStates
1a0083c8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a00067c l     F .text	00000044 Board_LED_Init
1a0006c0 l     F .text	00000040 Board_TEC_Init
1a000700 l     F .text	00000040 Board_GPIO_Init
1a000740 l     F .text	00000030 Board_ADC_Init
1a000770 l     F .text	00000038 Board_SPI_Init
1a0007a8 l     F .text	00000024 Board_I2C_Init
1a008440 l     O .text	00000008 GpioButtons
1a008448 l     O .text	0000000c GpioLeds
1a008454 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00086c l     F .text	00000014 Chip_SSP_GetClockIndex
1a000880 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000b70 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000b84 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00846c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000ed4 l     F .text	000000a0 pll_calc_divs
1a000f74 l     F .text	0000010c pll_get_frac
1a001080 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0012f4 l     F .text	00000022 Chip_Clock_GetDivRate
100009fc l     O .bss	00000008 audio_usb_pll_freq
1a0084c0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001460 l     F .text	0000002c Chip_UART_GetIndex
1a00852c l     O .text	00000008 UART_BClock
1a008534 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001610 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a0017f0 l     F .text	00000030 i2cHardwareInit
1a001820 l     F .text	00000040 i2cHardwareRead
1a001860 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_tick.c
10000a04 l     O .bss	00000004 callBackFuncParams
10000a08 l     O .bss	00000008 tickCounter
10000a10 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000a14 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250.c
1a001a84 l     F .text	00000080 mpu9250InitializeControlStructure
1a001b04 l     F .text	00000038 mpu9250ReadRegisters
1a001b3c l     F .text	00000020 mpu9250WhoAmI
1a001b5c l     F .text	0000004c mpu9250WriteRegister
1a001ba8 l     F .text	0000005c mpu9250ReadAK8963Registers
1a001c04 l     F .text	00000020 mpu9250WhoAmIAK8963
1a001c24 l     F .text	00000078 mpu9250WriteAK8963Register
1a001c9c l     F .text	00000094 mpu9250SetGyroRange
1a001d30 l     F .text	000000f8 mpu9250SetDlpfBandwidth
1a001e28 l     F .text	000000b4 mpu9250SetSrd
1a0021ac l     F .text	0000015c mpu9250CalibrateGyro
10000a18 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0034b4 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a005db4 l     F .text	00000084 __sbprintf
1a00876c l     O .text	00000010 blanks.8693
1a00877c l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a005f08 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a008890 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a007e60 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000050 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a0088b0 l       .init_array	00000000 __init_array_end
1a0088ac l       .bss_RAM5	00000000 __preinit_array_end
1a0088ac l       .init_array	00000000 __init_array_start
1a0088ac l       .bss_RAM5	00000000 __preinit_array_start
1a008188 g     F .text	0000002c .hidden __aeabi_dcmpun
1a001118 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000518 g     F .text	00000012 _isatty_r
1a000d36 g     F .text	0000000e Chip_I2CM_Xfer
1a002e5c g     F .text	00000012 .hidden __aeabi_dcmple
1a004038 g     F .text	0000009c _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002d98 g     F .text	0000007a .hidden __cmpdf2
1a0018a0 g     F .text	0000000e i2cInit
1a00052a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002d98 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002908 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004010 g     F .text	00000028 printf
1a000862 g     F .text	00000008 __stdio_init
10000bac g     O .bss	00000001 __lock___atexit_recursive_mutex
1a008138 g     F .text	00000034 _wcrtomb_r
1a004148 g     F .text	00000020 __sseek
1a003510 g     F .text	00000054 __sinit
1a008088 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000940 g     F .text	00000120 handleMasterXferState
1a002164 g     F .text	0000000c mpu9250GetAccelX_mss
1a000000 g       *ABS*	00000000 __vectors_start__
1a000c2a g     F .text	0000000c Chip_ADC_SetResolution
1a004004 g     F .text	0000000c __malloc_unlock
1a001990 g     F .text	0000002c SysTick_Handler
10000bb0 g     O .bss	00000001 __lock___arc4random_mutex
1a000474  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000804 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a007330 g     F .text	000000ce memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a007400 g     F .text	0000004c _Balloc
1a0088b8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002d88 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0018ae g     F .text	00000028 i2cRead
1a00050e g     F .text	0000000a _fstat_r
1a0025c8 g     F .text	0000000c mpu9250GetMagY_uT
53ff7416 g       *ABS*	00000000 __valid_user_code_checksum
1a0088b8 g       .ARM.exidx	00000000 _etext
1a002e24 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0025d4 g     F .text	0000000c mpu9250GetMagZ_uT
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001396 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003e24 g     F .text	00000134 memcpy
1a002e14 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003504 g     F .text	0000000c _cleanup_r
1a002890 g     F .text	00000022 .hidden __floatsidf
1a000aec g     F .text	00000030 Chip_I2C_MasterStateHandler
1a002d90 g     F .text	00000082 .hidden __ltdf2
1a002f38 g     F .text	00000000 .hidden __aeabi_uldivmod
10000bd0 g       .noinit	00000000 _noinit
1a0040d4 g     F .text	00000010 puts
10000ba4 g     O .bss	00000004 SystemCoreClock
1a00148c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0087c8 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a001414 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000ba0 g     O .bss	00000004 __malloc_top_pad
1a000604 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002870 g     F .text	0000001e .hidden __aeabi_ui2d
1a00718c g     F .text	00000008 _localeconv_r
1a00758c g     F .text	00000012 __i2b
1a006e84 g     F .text	00000308 __sfvwrite_r
1a000abc g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a002f68 g     F .text	000002d0 .hidden __udivmoddi4
1a0025ec g     F .text	00000000 .hidden __aeabi_drsub
1a002308 g     F .text	000002b4 mpu9250Init
1a0005ac g     F .text	00000020 _sbrk_r
1a00843c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0025e0 g     F .text	0000000c mpu9250GetTemperature_C
1a000534 g     F .text	0000004e _read_r
1a002e48 g     F .text	00000012 .hidden __aeabi_dcmplt
1a00323c g     F .text	000000ce _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
10000b98 g     O .bss	00000004 __malloc_max_sbrked_mem
1a0028b4 g     F .text	00000042 .hidden __extendsfdf2
1a002bb8 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00217c g     F .text	0000000c mpu9250GetAccelZ_mss
1a0025f8 g     F .text	00000276 .hidden __adddf3
1a0088b0 g       .ARM.exidx	00000000 __exidx_start
10000bb4 g     O .bss	00000001 __lock___env_recursive_mutex
1a002964 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000bb8 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a007a14 g     F .text	0000036c _realloc_r
1a00385c g     F .text	00000048 __libc_init_array
1a007fec g     F .text	00000064 _fputwc_r
1a0087a0 g     O .text	00000028 __mprec_bigtens
1a002870 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a007824 g     F .text	00000038 __mcmp
1a000820 g     F .text	00000030 Board_Init
1a000502  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a002e98 g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000bd0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000478 g     F .text	00000088 Reset_Handler
1a001914 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000d44 g     F .text	00000024 Chip_I2CM_XferBlocking
1a0074ec g     F .text	00000040 __hi0bits
1a000a84 g     F .text	00000038 Chip_I2C_SetClockRate
1a0081b4 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0010cc g     F .text	0000004c Chip_Clock_EnableCrystal
10000bbc g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0025f8 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a002d90 g     F .text	00000082 .hidden __ledf2
1a0076d0 g     F .text	000000a0 __pow5mult
1a0028f8 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000a60 g     F .text	00000024 Chip_I2C_Init
1a0038b0 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001288 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00853c g     O .text	000000e6 gpioPinsInit
1a000898 g     F .text	00000012 Chip_SSP_SetClockRate
1a002e84 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003564 g     F .text	0000000c __sfp_lock_acquire
1a007290 g     F .text	00000000 memchr
1a00361c g     F .text	000001ec _free_r
1a001370 g     F .text	00000026 Chip_Clock_GetBaseClock
1a008050 g     F .text	0000000c __locale_mb_cur_max
1a002e70 g     F .text	00000012 .hidden __aeabi_dcmpge
100009f8 g       .bss	00000000 _bss
1a000bf8 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0025f4 g     F .text	0000027a .hidden __aeabi_dsub
10000880 g     O .data	00000004 __malloc_sbrk_base
1a0028f8 g     F .text	0000006a .hidden __floatundidf
1a007770 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0008aa g     F .text	0000003e Chip_SSP_SetBitRate
1a002194 g     F .text	0000000c mpu9250GetGyroY_rads
1a000b6c g     F .text	00000002 Chip_GPIO_Init
1a008468 g     O .text	00000004 OscRateIn
1a0075a0 g     F .text	00000130 __multiply
10000bd0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a007dec g     F .text	00000072 strncpy
10000b70 g     O .bss	00000028 __malloc_current_mallinfo
1a007954 g     F .text	000000be __d2b
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000504 g     F .text	0000000a _close_r
1a002890 g     F .text	00000022 .hidden __aeabi_i2d
1a001644 g     F .text	000001ac gpioInit
1a0038a8 g     F .text	00000002 __retarget_lock_close_recursive
1a005e38 g     F .text	000000d0 __swsetup_r
1a003238  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002bb8 g     F .text	000001d0 .hidden __divdf3
10000478 g     O .data	00000408 __malloc_av_
1a002964 g     F .text	00000254 .hidden __muldf3
1a0040e4 g     F .text	00000022 __sread
1a0019bc g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
10000000 g     O .data	00000001 addr
1a003ff8 g     F .text	0000000c __malloc_lock
1a0007f0 g     F .text	00000014 Board_UARTPutChar
1a000b1c g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003458 g     F .text	0000005a _fflush_r
1a007eec g     F .text	0000005e _calloc_r
1a001134 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0038ac g     F .text	00000002 __retarget_lock_acquire_recursive
1a003f58 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000174 main
10000b9c g     O .bss	00000004 __malloc_max_total_mem
1a0038a4 g     F .text	00000002 __retarget_lock_init_recursive
1a0025bc g     F .text	0000000c mpu9250GetMagX_uT
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a004168 g     F .text	00000008 __sclose
1a002e98 g     F .text	0000009e .hidden __truncdfsf2
1a006030 g     F .text	00000e54 _dtoa_r
1a0038b4 g     F .text	00000570 _malloc_r
1a00816c g     F .text	0000001a __ascii_wctomb
1a002908 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0013a4 g     F .text	0000003c Chip_Clock_EnableOpts
1a00085a g     F .text	00000008 __stdio_getchar
1a00357c g     F .text	000000a0 _malloc_trim_r
1a001150 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002170 g     F .text	0000000c mpu9250GetAccelY_mss
1a001208 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0015bc g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001a4c g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002d98 g     F .text	0000007a .hidden __nedf2
1a000500  w    F .text	00000002 _fini
1a000bb8 g     F .text	00000040 Chip_ADC_Init
10000ba8 g     O .bss	00000004 g_pUsbApi
1a0005cc g     F .text	00000038 Board_SetupMuxing
1a0014e0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0018f0 g     F .text	0000000c tickRead
1a000582 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a001edc g     F .text	00000288 mpu9250Read
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
1a00330c g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a000c36 g     F .text	00000100 Chip_I2CM_XferHandler
1a00805c g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10000bd0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0008e8 g     F .text	00000038 Chip_SSP_Init
1a000b34 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a007194 g     F .text	0000005c __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0018d6 g     F .text	00000018 i2cWrite
1a0007cc g     F .text	00000024 Board_Debug_Init
1a002e34 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a000850 g     F .text	0000000a __stdio_putchar
100009f4 g       .data	00000000 _edata
1a000920 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a007f4c g     F .text	0000009e __fputwc
10000bc0 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000d68 g     F .text	00000158 Chip_SetupCoreClock
1a0021a0 g     F .text	0000000c mpu9250GetGyroZ_rads
1a004108 g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
10000884 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a003808 g     F .text	00000052 _fwalk_reent
1a000ec0 g     F .text	00000014 SystemCoreClockUpdate
1a00785c g     F .text	000000f8 __mdiff
1a0081b4 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003570 g     F .text	0000000c __sfp_lock_release
1a008624 g     O .text	00000101 _ctype_
1a003238  w    F .text	00000002 .hidden __aeabi_idiv0
1a008188 g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
10000bc4 g     O .bss	00000001 __lock___dd_hash_mutex
1a0071f0 g     F .text	00000094 __smakebuf_r
10000bc8 g     O .bss	00000001 __lock___tz_mutex
1a004180 g     F .text	000000dc strlen
1a0013e0 g     F .text	00000034 Chip_Clock_Enable
1a002e24 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002d88 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a002188 g     F .text	0000000c mpu9250GetGyroX_rads
1a007ed8 g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0028b4 g     F .text	00000042 .hidden __aeabi_f2d
1a0019d8 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0025f4 g     F .text	0000027a .hidden __subdf3
1a004260 g     F .text	00001b54 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00752c g     F .text	00000060 __lo0bits
1a0018fc g     F .text	00000018 tickPowerSet
1a007d80 g     F .text	0000006c frexp
10000888 g     O .data	0000016c __global_locale
1a001318 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0015f4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000bcc g     O .bss	00000001 __lock___sfp_recursive_mutex
1a000670 g     F .text	0000000c Board_SystemInit
1a007460 g     F .text	0000008a __multadd
1a00744c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 79 04 00 1a 79 01 00 1a 7b 01 00 1a     ....y...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 16 74 ff 53     }............t.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	91 19 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bd 19 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0088b8 	.word	0x1a0088b8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009f4 	.word	0x000009f4
1a000120:	1a0088b8 	.word	0x1a0088b8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0088b8 	.word	0x1a0088b8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0088b8 	.word	0x1a0088b8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0088b8 	.word	0x1a0088b8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009f8 	.word	0x100009f8
1a000154:	000001d8 	.word	0x000001d8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000300:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000302:	b085      	sub	sp, #20
   /* ------------- INICIALIZACIONES ------------- */

   boardConfig();
1a000304:	f001 fb68 	bl	1a0019d8 <boardInit>

   // Inicializar la IMU
   printf("Inicializando IMU MPU9250...\r\n" );
1a000308:	484b      	ldr	r0, [pc, #300]	; (1a000438 <main+0x138>)
1a00030a:	f003 fee3 	bl	1a0040d4 <puts>
   int8_t status;
   status = mpu9250Init( addr );
1a00030e:	4b4b      	ldr	r3, [pc, #300]	; (1a00043c <main+0x13c>)
1a000310:	7818      	ldrb	r0, [r3, #0]
1a000312:	f001 fff9 	bl	1a002308 <mpu9250Init>

   if( status < 0 ){
1a000316:	2800      	cmp	r0, #0
1a000318:	db75      	blt.n	1a000406 <main+0x106>
      printf( "    SDA ---- SDA\r\n" );
      printf( "    AD0 ---- GND\r\n\r\n" );
      printf( "Se detiene el programa.\r\n" );
      while(1);
   }
   printf("IMU MPU9250 inicializado correctamente.\r\n\r\n" );
1a00031a:	4849      	ldr	r0, [pc, #292]	; (1a000440 <main+0x140>)
1a00031c:	f003 feda 	bl	1a0040d4 <puts>

   /* ------------- REPETIR POR SIEMPRE ------------- */
   while(TRUE){

      //Leer el sensor y guardar en estructura de control
      mpu9250Read();
1a000320:	f001 fddc 	bl	1a001edc <mpu9250Read>

      // Imprimir resultados
      printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
              mpu9250GetGyroX_rads(),
1a000324:	f001 ff30 	bl	1a002188 <mpu9250GetGyroX_rads>
1a000328:	ee10 4a10 	vmov	r4, s0
              mpu9250GetGyroY_rads(),
1a00032c:	f001 ff32 	bl	1a002194 <mpu9250GetGyroY_rads>
1a000330:	ee10 6a10 	vmov	r6, s0
              mpu9250GetGyroZ_rads()
1a000334:	f001 ff34 	bl	1a0021a0 <mpu9250GetGyroZ_rads>
1a000338:	ee10 7a10 	vmov	r7, s0
      printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
1a00033c:	4620      	mov	r0, r4
1a00033e:	f002 fab9 	bl	1a0028b4 <__aeabi_f2d>
1a000342:	4604      	mov	r4, r0
1a000344:	460d      	mov	r5, r1
1a000346:	4638      	mov	r0, r7
1a000348:	f002 fab4 	bl	1a0028b4 <__aeabi_f2d>
1a00034c:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a000350:	4630      	mov	r0, r6
1a000352:	f002 faaf 	bl	1a0028b4 <__aeabi_f2d>
1a000356:	e9cd 0100 	strd	r0, r1, [sp]
1a00035a:	4622      	mov	r2, r4
1a00035c:	462b      	mov	r3, r5
1a00035e:	4839      	ldr	r0, [pc, #228]	; (1a000444 <main+0x144>)
1a000360:	f003 fe56 	bl	1a004010 <printf>
            );

		printf( "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
              mpu9250GetAccelX_mss(),
1a000364:	f001 fefe 	bl	1a002164 <mpu9250GetAccelX_mss>
1a000368:	ee10 4a10 	vmov	r4, s0
              mpu9250GetAccelY_mss(),
1a00036c:	f001 ff00 	bl	1a002170 <mpu9250GetAccelY_mss>
1a000370:	ee10 6a10 	vmov	r6, s0
              mpu9250GetAccelZ_mss()
1a000374:	f001 ff02 	bl	1a00217c <mpu9250GetAccelZ_mss>
1a000378:	ee10 7a10 	vmov	r7, s0
		printf( "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
1a00037c:	4620      	mov	r0, r4
1a00037e:	f002 fa99 	bl	1a0028b4 <__aeabi_f2d>
1a000382:	4604      	mov	r4, r0
1a000384:	460d      	mov	r5, r1
1a000386:	4638      	mov	r0, r7
1a000388:	f002 fa94 	bl	1a0028b4 <__aeabi_f2d>
1a00038c:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a000390:	4630      	mov	r0, r6
1a000392:	f002 fa8f 	bl	1a0028b4 <__aeabi_f2d>
1a000396:	e9cd 0100 	strd	r0, r1, [sp]
1a00039a:	4622      	mov	r2, r4
1a00039c:	462b      	mov	r3, r5
1a00039e:	482a      	ldr	r0, [pc, #168]	; (1a000448 <main+0x148>)
1a0003a0:	f003 fe36 	bl	1a004010 <printf>
            );

		printf( "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
              mpu9250GetMagX_uT(),
1a0003a4:	f002 f90a 	bl	1a0025bc <mpu9250GetMagX_uT>
1a0003a8:	ee10 4a10 	vmov	r4, s0
              mpu9250GetMagY_uT(),
1a0003ac:	f002 f90c 	bl	1a0025c8 <mpu9250GetMagY_uT>
1a0003b0:	ee10 6a10 	vmov	r6, s0
              mpu9250GetMagZ_uT()
1a0003b4:	f002 f90e 	bl	1a0025d4 <mpu9250GetMagZ_uT>
1a0003b8:	ee10 7a10 	vmov	r7, s0
		printf( "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
1a0003bc:	4620      	mov	r0, r4
1a0003be:	f002 fa79 	bl	1a0028b4 <__aeabi_f2d>
1a0003c2:	4604      	mov	r4, r0
1a0003c4:	460d      	mov	r5, r1
1a0003c6:	4638      	mov	r0, r7
1a0003c8:	f002 fa74 	bl	1a0028b4 <__aeabi_f2d>
1a0003cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0003d0:	4630      	mov	r0, r6
1a0003d2:	f002 fa6f 	bl	1a0028b4 <__aeabi_f2d>
1a0003d6:	e9cd 0100 	strd	r0, r1, [sp]
1a0003da:	4622      	mov	r2, r4
1a0003dc:	462b      	mov	r3, r5
1a0003de:	481b      	ldr	r0, [pc, #108]	; (1a00044c <main+0x14c>)
1a0003e0:	f003 fe16 	bl	1a004010 <printf>
            );

		printf( "Temperatura:    %f   [C]\r\n\r\n",
              mpu9250GetTemperature_C()
1a0003e4:	f002 f8fc 	bl	1a0025e0 <mpu9250GetTemperature_C>
		printf( "Temperatura:    %f   [C]\r\n\r\n",
1a0003e8:	ee10 0a10 	vmov	r0, s0
1a0003ec:	f002 fa62 	bl	1a0028b4 <__aeabi_f2d>
1a0003f0:	4602      	mov	r2, r0
1a0003f2:	460b      	mov	r3, r1
1a0003f4:	4816      	ldr	r0, [pc, #88]	; (1a000450 <main+0x150>)
1a0003f6:	f003 fe0b 	bl	1a004010 <printf>
            );

      delay(10*1000);
1a0003fa:	f242 7010 	movw	r0, #10000	; 0x2710
1a0003fe:	2100      	movs	r1, #0
1a000400:	f001 fb24 	bl	1a001a4c <delay>
1a000404:	e78c      	b.n	1a000320 <main+0x20>
      printf( "IMU MPU9250 no inicializado, chequee las conexiones:\r\n\r\n" );
1a000406:	4813      	ldr	r0, [pc, #76]	; (1a000454 <main+0x154>)
1a000408:	f003 fe64 	bl	1a0040d4 <puts>
      printf( "MPU9250 ---- EDU-CIAA-NXP\r\n\r\n" );
1a00040c:	4812      	ldr	r0, [pc, #72]	; (1a000458 <main+0x158>)
1a00040e:	f003 fe61 	bl	1a0040d4 <puts>
      printf( "    VCC ---- 3.3V\r\n" );
1a000412:	4812      	ldr	r0, [pc, #72]	; (1a00045c <main+0x15c>)
1a000414:	f003 fe5e 	bl	1a0040d4 <puts>
      printf( "    GND ---- GND\r\n" );
1a000418:	4811      	ldr	r0, [pc, #68]	; (1a000460 <main+0x160>)
1a00041a:	f003 fe5b 	bl	1a0040d4 <puts>
      printf( "    SCL ---- SCL\r\n" );
1a00041e:	4811      	ldr	r0, [pc, #68]	; (1a000464 <main+0x164>)
1a000420:	f003 fe58 	bl	1a0040d4 <puts>
      printf( "    SDA ---- SDA\r\n" );
1a000424:	4810      	ldr	r0, [pc, #64]	; (1a000468 <main+0x168>)
1a000426:	f003 fe55 	bl	1a0040d4 <puts>
      printf( "    AD0 ---- GND\r\n\r\n" );
1a00042a:	4810      	ldr	r0, [pc, #64]	; (1a00046c <main+0x16c>)
1a00042c:	f003 fe52 	bl	1a0040d4 <puts>
      printf( "Se detiene el programa.\r\n" );
1a000430:	480f      	ldr	r0, [pc, #60]	; (1a000470 <main+0x170>)
1a000432:	f003 fe4f 	bl	1a0040d4 <puts>
      while(1);
1a000436:	e7fe      	b.n	1a000436 <main+0x136>
1a000438:	1a008204 	.word	0x1a008204
1a00043c:	10000000 	.word	0x10000000
1a000440:	1a0082fc 	.word	0x1a0082fc
1a000444:	1a008328 	.word	0x1a008328
1a000448:	1a008354 	.word	0x1a008354
1a00044c:	1a00837c 	.word	0x1a00837c
1a000450:	1a0083a4 	.word	0x1a0083a4
1a000454:	1a008224 	.word	0x1a008224
1a000458:	1a00825c 	.word	0x1a00825c
1a00045c:	1a00827c 	.word	0x1a00827c
1a000460:	1a008290 	.word	0x1a008290
1a000464:	1a0082a4 	.word	0x1a0082a4
1a000468:	1a0082b8 	.word	0x1a0082b8
1a00046c:	1a0082cc 	.word	0x1a0082cc
1a000470:	1a0082e0 	.word	0x1a0082e0

1a000474 <initialise_monitor_handles>:
}
1a000474:	4770      	bx	lr
1a000476:	Address 0x1a000476 is out of bounds.


1a000478 <Reset_Handler>:
void Reset_Handler(void) {
1a000478:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00047a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00047c:	4b19      	ldr	r3, [pc, #100]	; (1a0004e4 <Reset_Handler+0x6c>)
1a00047e:	4a1a      	ldr	r2, [pc, #104]	; (1a0004e8 <Reset_Handler+0x70>)
1a000480:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000482:	3304      	adds	r3, #4
1a000484:	4a19      	ldr	r2, [pc, #100]	; (1a0004ec <Reset_Handler+0x74>)
1a000486:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000488:	2300      	movs	r3, #0
1a00048a:	e005      	b.n	1a000498 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00048c:	4a18      	ldr	r2, [pc, #96]	; (1a0004f0 <Reset_Handler+0x78>)
1a00048e:	f04f 31ff 	mov.w	r1, #4294967295
1a000492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000496:	3301      	adds	r3, #1
1a000498:	2b07      	cmp	r3, #7
1a00049a:	d9f7      	bls.n	1a00048c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00049c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00049e:	4b15      	ldr	r3, [pc, #84]	; (1a0004f4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0004a0:	e007      	b.n	1a0004b2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0004a2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0004a6:	689a      	ldr	r2, [r3, #8]
1a0004a8:	6859      	ldr	r1, [r3, #4]
1a0004aa:	6818      	ldr	r0, [r3, #0]
1a0004ac:	f7ff fe6d 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0004b0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0004b2:	4a11      	ldr	r2, [pc, #68]	; (1a0004f8 <Reset_Handler+0x80>)
1a0004b4:	4293      	cmp	r3, r2
1a0004b6:	d3f4      	bcc.n	1a0004a2 <Reset_Handler+0x2a>
1a0004b8:	e006      	b.n	1a0004c8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0004ba:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0004bc:	6859      	ldr	r1, [r3, #4]
1a0004be:	f854 0b08 	ldr.w	r0, [r4], #8
1a0004c2:	f7ff fe71 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0004c6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0004c8:	4a0c      	ldr	r2, [pc, #48]	; (1a0004fc <Reset_Handler+0x84>)
1a0004ca:	4293      	cmp	r3, r2
1a0004cc:	d3f5      	bcc.n	1a0004ba <Reset_Handler+0x42>
    SystemInit();
1a0004ce:	f001 f875 	bl	1a0015bc <SystemInit>
    __libc_init_array();
1a0004d2:	f003 f9c3 	bl	1a00385c <__libc_init_array>
    initialise_monitor_handles();
1a0004d6:	f7ff ffcd 	bl	1a000474 <initialise_monitor_handles>
    main();
1a0004da:	f7ff ff11 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a0004de:	bf30      	wfi
1a0004e0:	e7fd      	b.n	1a0004de <Reset_Handler+0x66>
1a0004e2:	bf00      	nop
1a0004e4:	40053100 	.word	0x40053100
1a0004e8:	10df1000 	.word	0x10df1000
1a0004ec:	01dff7ff 	.word	0x01dff7ff
1a0004f0:	e000e280 	.word	0xe000e280
1a0004f4:	1a000114 	.word	0x1a000114
1a0004f8:	1a000150 	.word	0x1a000150
1a0004fc:	1a000178 	.word	0x1a000178

1a000500 <_fini>:
void _fini(void) {}
1a000500:	4770      	bx	lr

1a000502 <_init>:
void _init(void) {}
1a000502:	4770      	bx	lr

1a000504 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000504:	2309      	movs	r3, #9
1a000506:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000508:	f04f 30ff 	mov.w	r0, #4294967295
1a00050c:	4770      	bx	lr

1a00050e <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00050e:	2358      	movs	r3, #88	; 0x58
1a000510:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000512:	f04f 30ff 	mov.w	r0, #4294967295
1a000516:	4770      	bx	lr

1a000518 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000518:	2902      	cmp	r1, #2
1a00051a:	d904      	bls.n	1a000526 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00051c:	2309      	movs	r3, #9
1a00051e:	6003      	str	r3, [r0, #0]
       return -1;
1a000520:	f04f 30ff 	mov.w	r0, #4294967295
1a000524:	4770      	bx	lr
       return 1;
1a000526:	2001      	movs	r0, #1
   }
}
1a000528:	4770      	bx	lr

1a00052a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00052a:	2358      	movs	r3, #88	; 0x58
1a00052c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00052e:	f04f 30ff 	mov.w	r0, #4294967295
1a000532:	4770      	bx	lr

1a000534 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000534:	2902      	cmp	r1, #2
1a000536:	d81f      	bhi.n	1a000578 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00053c:	461d      	mov	r5, r3
1a00053e:	4617      	mov	r7, r2
1a000540:	4606      	mov	r6, r0
  size_t i = 0;
1a000542:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000544:	42ac      	cmp	r4, r5
1a000546:	d211      	bcs.n	1a00056c <_read_r+0x38>
         int c = __stdio_getchar();
1a000548:	f000 f987 	bl	1a00085a <__stdio_getchar>
         if( c != -1 ){
1a00054c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000550:	d0f8      	beq.n	1a000544 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000552:	f104 0801 	add.w	r8, r4, #1
1a000556:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000558:	280d      	cmp	r0, #13
1a00055a:	d003      	beq.n	1a000564 <_read_r+0x30>
1a00055c:	280a      	cmp	r0, #10
1a00055e:	d001      	beq.n	1a000564 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000560:	4644      	mov	r4, r8
1a000562:	e7ef      	b.n	1a000544 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000564:	f000 f979 	bl	1a00085a <__stdio_getchar>
               return i;
1a000568:	4640      	mov	r0, r8
1a00056a:	e003      	b.n	1a000574 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00056c:	2313      	movs	r3, #19
1a00056e:	6033      	str	r3, [r6, #0]
      return -1;
1a000570:	f04f 30ff 	mov.w	r0, #4294967295
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000578:	2313      	movs	r3, #19
1a00057a:	6003      	str	r3, [r0, #0]
      return -1;
1a00057c:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000580:	4770      	bx	lr

1a000582 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000582:	2902      	cmp	r1, #2
1a000584:	d80c      	bhi.n	1a0005a0 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000586:	b570      	push	{r4, r5, r6, lr}
1a000588:	461d      	mov	r5, r3
1a00058a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00058c:	2400      	movs	r4, #0
1a00058e:	42ac      	cmp	r4, r5
1a000590:	d204      	bcs.n	1a00059c <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000592:	5d30      	ldrb	r0, [r6, r4]
1a000594:	f000 f95c 	bl	1a000850 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000598:	3401      	adds	r4, #1
1a00059a:	e7f8      	b.n	1a00058e <_write_r+0xc>
       return n;
1a00059c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00059e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0005a0:	2313      	movs	r3, #19
1a0005a2:	6003      	str	r3, [r0, #0]
       return -1;
1a0005a4:	f04f 30ff 	mov.w	r0, #4294967295
}
1a0005a8:	4770      	bx	lr
1a0005aa:	Address 0x1a0005aa is out of bounds.


1a0005ac <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0005ac:	4b05      	ldr	r3, [pc, #20]	; (1a0005c4 <_sbrk_r+0x18>)
1a0005ae:	681b      	ldr	r3, [r3, #0]
1a0005b0:	b123      	cbz	r3, 1a0005bc <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0005b2:	4b04      	ldr	r3, [pc, #16]	; (1a0005c4 <_sbrk_r+0x18>)
1a0005b4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0005b6:	4401      	add	r1, r0
1a0005b8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0005ba:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0005bc:	4b01      	ldr	r3, [pc, #4]	; (1a0005c4 <_sbrk_r+0x18>)
1a0005be:	4a02      	ldr	r2, [pc, #8]	; (1a0005c8 <_sbrk_r+0x1c>)
1a0005c0:	601a      	str	r2, [r3, #0]
1a0005c2:	e7f6      	b.n	1a0005b2 <_sbrk_r+0x6>
1a0005c4:	100009f8 	.word	0x100009f8
1a0005c8:	10000bd0 	.word	0x10000bd0

1a0005cc <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0005cc:	2300      	movs	r3, #0
1a0005ce:	2b1c      	cmp	r3, #28
1a0005d0:	d812      	bhi.n	1a0005f8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0005d2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0005d4:	4a09      	ldr	r2, [pc, #36]	; (1a0005fc <Board_SetupMuxing+0x30>)
1a0005d6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0005da:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0005de:	784a      	ldrb	r2, [r1, #1]
1a0005e0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0005e2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0005e6:	4906      	ldr	r1, [pc, #24]	; (1a000600 <Board_SetupMuxing+0x34>)
1a0005e8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0005ec:	3301      	adds	r3, #1
1a0005ee:	2b1c      	cmp	r3, #28
1a0005f0:	d9f0      	bls.n	1a0005d4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0005f2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0005f6:	4770      	bx	lr
1a0005f8:	4770      	bx	lr
1a0005fa:	bf00      	nop
1a0005fc:	1a0083c8 	.word	0x1a0083c8
1a000600:	40086000 	.word	0x40086000

1a000604 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000604:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000606:	4a17      	ldr	r2, [pc, #92]	; (1a000664 <Board_SetupClocking+0x60>)
1a000608:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00060c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000610:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000614:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000618:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00061c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000620:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000624:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000628:	2201      	movs	r2, #1
1a00062a:	490f      	ldr	r1, [pc, #60]	; (1a000668 <Board_SetupClocking+0x64>)
1a00062c:	2006      	movs	r0, #6
1a00062e:	f000 fb9b 	bl	1a000d68 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000632:	2400      	movs	r4, #0
1a000634:	b14c      	cbz	r4, 1a00064a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000636:	4b0b      	ldr	r3, [pc, #44]	; (1a000664 <Board_SetupClocking+0x60>)
1a000638:	685a      	ldr	r2, [r3, #4]
1a00063a:	f022 020c 	bic.w	r2, r2, #12
1a00063e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000640:	685a      	ldr	r2, [r3, #4]
1a000642:	f042 0203 	orr.w	r2, r2, #3
1a000646:	605a      	str	r2, [r3, #4]
}
1a000648:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00064a:	4808      	ldr	r0, [pc, #32]	; (1a00066c <Board_SetupClocking+0x68>)
1a00064c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000650:	2301      	movs	r3, #1
1a000652:	788a      	ldrb	r2, [r1, #2]
1a000654:	7849      	ldrb	r1, [r1, #1]
1a000656:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00065a:	f000 fe5d 	bl	1a001318 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00065e:	3401      	adds	r4, #1
1a000660:	e7e8      	b.n	1a000634 <Board_SetupClocking+0x30>
1a000662:	bf00      	nop
1a000664:	40043000 	.word	0x40043000
1a000668:	0c28cb00 	.word	0x0c28cb00
1a00066c:	1a0083c4 	.word	0x1a0083c4

1a000670 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000670:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000672:	f7ff ffab 	bl	1a0005cc <Board_SetupMuxing>
    Board_SetupClocking();
1a000676:	f7ff ffc5 	bl	1a000604 <Board_SetupClocking>
}
1a00067a:	bd08      	pop	{r3, pc}

1a00067c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00067c:	2200      	movs	r2, #0
1a00067e:	2a05      	cmp	r2, #5
1a000680:	d819      	bhi.n	1a0006b6 <Board_LED_Init+0x3a>
{
1a000682:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000684:	490c      	ldr	r1, [pc, #48]	; (1a0006b8 <Board_LED_Init+0x3c>)
1a000686:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00068a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00068e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000690:	4b0a      	ldr	r3, [pc, #40]	; (1a0006bc <Board_LED_Init+0x40>)
1a000692:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000696:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00069a:	2001      	movs	r0, #1
1a00069c:	40a0      	lsls	r0, r4
1a00069e:	4301      	orrs	r1, r0
1a0006a0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0006a4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0006a8:	2100      	movs	r1, #0
1a0006aa:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006ac:	3201      	adds	r2, #1
1a0006ae:	2a05      	cmp	r2, #5
1a0006b0:	d9e8      	bls.n	1a000684 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0006b2:	bc70      	pop	{r4, r5, r6}
1a0006b4:	4770      	bx	lr
1a0006b6:	4770      	bx	lr
1a0006b8:	1a008448 	.word	0x1a008448
1a0006bc:	400f4000 	.word	0x400f4000

1a0006c0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0006c0:	2300      	movs	r3, #0
1a0006c2:	2b03      	cmp	r3, #3
1a0006c4:	d816      	bhi.n	1a0006f4 <Board_TEC_Init+0x34>
{
1a0006c6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0006c8:	490b      	ldr	r1, [pc, #44]	; (1a0006f8 <Board_TEC_Init+0x38>)
1a0006ca:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0006ce:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0006d2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0006d4:	4c09      	ldr	r4, [pc, #36]	; (1a0006fc <Board_TEC_Init+0x3c>)
1a0006d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0006da:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0006de:	2001      	movs	r0, #1
1a0006e0:	40a8      	lsls	r0, r5
1a0006e2:	ea21 0100 	bic.w	r1, r1, r0
1a0006e6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0006ea:	3301      	adds	r3, #1
1a0006ec:	2b03      	cmp	r3, #3
1a0006ee:	d9eb      	bls.n	1a0006c8 <Board_TEC_Init+0x8>
   }
}
1a0006f0:	bc30      	pop	{r4, r5}
1a0006f2:	4770      	bx	lr
1a0006f4:	4770      	bx	lr
1a0006f6:	bf00      	nop
1a0006f8:	1a008440 	.word	0x1a008440
1a0006fc:	400f4000 	.word	0x400f4000

1a000700 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000700:	2300      	movs	r3, #0
1a000702:	2b08      	cmp	r3, #8
1a000704:	d816      	bhi.n	1a000734 <Board_GPIO_Init+0x34>
{
1a000706:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000708:	490b      	ldr	r1, [pc, #44]	; (1a000738 <Board_GPIO_Init+0x38>)
1a00070a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00070e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000712:	784d      	ldrb	r5, [r1, #1]
1a000714:	4c09      	ldr	r4, [pc, #36]	; (1a00073c <Board_GPIO_Init+0x3c>)
1a000716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00071a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00071e:	2001      	movs	r0, #1
1a000720:	40a8      	lsls	r0, r5
1a000722:	ea21 0100 	bic.w	r1, r1, r0
1a000726:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00072a:	3301      	adds	r3, #1
1a00072c:	2b08      	cmp	r3, #8
1a00072e:	d9eb      	bls.n	1a000708 <Board_GPIO_Init+0x8>
   }
}
1a000730:	bc30      	pop	{r4, r5}
1a000732:	4770      	bx	lr
1a000734:	4770      	bx	lr
1a000736:	bf00      	nop
1a000738:	1a008454 	.word	0x1a008454
1a00073c:	400f4000 	.word	0x400f4000

1a000740 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000740:	b510      	push	{r4, lr}
1a000742:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000744:	4c08      	ldr	r4, [pc, #32]	; (1a000768 <Board_ADC_Init+0x28>)
1a000746:	4669      	mov	r1, sp
1a000748:	4620      	mov	r0, r4
1a00074a:	f000 fa35 	bl	1a000bb8 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00074e:	4a07      	ldr	r2, [pc, #28]	; (1a00076c <Board_ADC_Init+0x2c>)
1a000750:	4669      	mov	r1, sp
1a000752:	4620      	mov	r0, r4
1a000754:	f000 fa50 	bl	1a000bf8 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000758:	2200      	movs	r2, #0
1a00075a:	4669      	mov	r1, sp
1a00075c:	4620      	mov	r0, r4
1a00075e:	f000 fa64 	bl	1a000c2a <Chip_ADC_SetResolution>
}
1a000762:	b002      	add	sp, #8
1a000764:	bd10      	pop	{r4, pc}
1a000766:	bf00      	nop
1a000768:	400e3000 	.word	0x400e3000
1a00076c:	00061a80 	.word	0x00061a80

1a000770 <Board_SPI_Init>:
{
1a000770:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000772:	4c0b      	ldr	r4, [pc, #44]	; (1a0007a0 <Board_SPI_Init+0x30>)
1a000774:	4620      	mov	r0, r4
1a000776:	f000 f8b7 	bl	1a0008e8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00077a:	6863      	ldr	r3, [r4, #4]
1a00077c:	f023 0304 	bic.w	r3, r3, #4
1a000780:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000782:	6823      	ldr	r3, [r4, #0]
1a000784:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000788:	f043 0307 	orr.w	r3, r3, #7
1a00078c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00078e:	4905      	ldr	r1, [pc, #20]	; (1a0007a4 <Board_SPI_Init+0x34>)
1a000790:	4620      	mov	r0, r4
1a000792:	f000 f88a 	bl	1a0008aa <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000796:	6863      	ldr	r3, [r4, #4]
1a000798:	f043 0302 	orr.w	r3, r3, #2
1a00079c:	6063      	str	r3, [r4, #4]
}
1a00079e:	bd10      	pop	{r4, pc}
1a0007a0:	400c5000 	.word	0x400c5000
1a0007a4:	000186a0 	.word	0x000186a0

1a0007a8 <Board_I2C_Init>:
{
1a0007a8:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0007aa:	2000      	movs	r0, #0
1a0007ac:	f000 f958 	bl	1a000a60 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0007b0:	4b04      	ldr	r3, [pc, #16]	; (1a0007c4 <Board_I2C_Init+0x1c>)
1a0007b2:	f640 0208 	movw	r2, #2056	; 0x808
1a0007b6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0007ba:	4903      	ldr	r1, [pc, #12]	; (1a0007c8 <Board_I2C_Init+0x20>)
1a0007bc:	2000      	movs	r0, #0
1a0007be:	f000 f961 	bl	1a000a84 <Chip_I2C_SetClockRate>
}
1a0007c2:	bd08      	pop	{r3, pc}
1a0007c4:	40086000 	.word	0x40086000
1a0007c8:	000f4240 	.word	0x000f4240

1a0007cc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0007cc:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0007ce:	4c07      	ldr	r4, [pc, #28]	; (1a0007ec <Board_Debug_Init+0x20>)
1a0007d0:	4620      	mov	r0, r4
1a0007d2:	f000 fe5b 	bl	1a00148c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0007d6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0007da:	4620      	mov	r0, r4
1a0007dc:	f000 fe80 	bl	1a0014e0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0007e0:	2303      	movs	r3, #3
1a0007e2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0007e4:	2301      	movs	r3, #1
1a0007e6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0007e8:	bd10      	pop	{r4, pc}
1a0007ea:	bf00      	nop
1a0007ec:	400c1000 	.word	0x400c1000

1a0007f0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0007f0:	4b03      	ldr	r3, [pc, #12]	; (1a000800 <Board_UARTPutChar+0x10>)
1a0007f2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0007f4:	f013 0f20 	tst.w	r3, #32
1a0007f8:	d0fa      	beq.n	1a0007f0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0007fa:	4b01      	ldr	r3, [pc, #4]	; (1a000800 <Board_UARTPutChar+0x10>)
1a0007fc:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0007fe:	4770      	bx	lr
1a000800:	400c1000 	.word	0x400c1000

1a000804 <Board_UARTGetChar>:
	return pUART->LSR;
1a000804:	4b05      	ldr	r3, [pc, #20]	; (1a00081c <Board_UARTGetChar+0x18>)
1a000806:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000808:	f013 0f01 	tst.w	r3, #1
1a00080c:	d003      	beq.n	1a000816 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00080e:	4b03      	ldr	r3, [pc, #12]	; (1a00081c <Board_UARTGetChar+0x18>)
1a000810:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000812:	b2c0      	uxtb	r0, r0
1a000814:	4770      	bx	lr
   }
   return EOF;
1a000816:	f04f 30ff 	mov.w	r0, #4294967295
}
1a00081a:	4770      	bx	lr
1a00081c:	400c1000 	.word	0x400c1000

1a000820 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000820:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000822:	f7ff ffd3 	bl	1a0007cc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000826:	4809      	ldr	r0, [pc, #36]	; (1a00084c <Board_Init+0x2c>)
1a000828:	f000 f9a0 	bl	1a000b6c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a00082c:	f7ff ff68 	bl	1a000700 <Board_GPIO_Init>
   Board_ADC_Init();
1a000830:	f7ff ff86 	bl	1a000740 <Board_ADC_Init>
   Board_SPI_Init();
1a000834:	f7ff ff9c 	bl	1a000770 <Board_SPI_Init>
   Board_I2C_Init();
1a000838:	f7ff ffb6 	bl	1a0007a8 <Board_I2C_Init>

   Board_LED_Init();
1a00083c:	f7ff ff1e 	bl	1a00067c <Board_LED_Init>
   Board_TEC_Init();
1a000840:	f7ff ff3e 	bl	1a0006c0 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000844:	f000 fb3c 	bl	1a000ec0 <SystemCoreClockUpdate>
}
1a000848:	bd08      	pop	{r3, pc}
1a00084a:	bf00      	nop
1a00084c:	400f4000 	.word	0x400f4000

1a000850 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000850:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000852:	b2c0      	uxtb	r0, r0
1a000854:	f7ff ffcc 	bl	1a0007f0 <Board_UARTPutChar>
}
1a000858:	bd08      	pop	{r3, pc}

1a00085a <__stdio_getchar>:

int __stdio_getchar()
{
1a00085a:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a00085c:	f7ff ffd2 	bl	1a000804 <Board_UARTGetChar>
}
1a000860:	bd08      	pop	{r3, pc}

1a000862 <__stdio_init>:

void __stdio_init()
{
1a000862:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000864:	f7ff ffb2 	bl	1a0007cc <Board_Debug_Init>
1a000868:	bd08      	pop	{r3, pc}
1a00086a:	Address 0x1a00086a is out of bounds.


1a00086c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00086c:	4b03      	ldr	r3, [pc, #12]	; (1a00087c <Chip_SSP_GetClockIndex+0x10>)
1a00086e:	4298      	cmp	r0, r3
1a000870:	d001      	beq.n	1a000876 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000872:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000874:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000876:	20a5      	movs	r0, #165	; 0xa5
1a000878:	4770      	bx	lr
1a00087a:	bf00      	nop
1a00087c:	400c5000 	.word	0x400c5000

1a000880 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000880:	4b04      	ldr	r3, [pc, #16]	; (1a000894 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000882:	4298      	cmp	r0, r3
1a000884:	d002      	beq.n	1a00088c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000886:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00088a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00088c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000890:	4770      	bx	lr
1a000892:	bf00      	nop
1a000894:	400c5000 	.word	0x400c5000

1a000898 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000898:	6803      	ldr	r3, [r0, #0]
1a00089a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00089e:	0209      	lsls	r1, r1, #8
1a0008a0:	b289      	uxth	r1, r1
1a0008a2:	4319      	orrs	r1, r3
1a0008a4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0008a6:	6102      	str	r2, [r0, #16]
}
1a0008a8:	4770      	bx	lr

1a0008aa <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0008aa:	b570      	push	{r4, r5, r6, lr}
1a0008ac:	4606      	mov	r6, r0
1a0008ae:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0008b0:	f7ff ffe6 	bl	1a000880 <Chip_SSP_GetPeriphClockIndex>
1a0008b4:	f000 fdae 	bl	1a001414 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0008b8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0008ba:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0008be:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0008c0:	e000      	b.n	1a0008c4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0008c2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0008c4:	42ab      	cmp	r3, r5
1a0008c6:	d90b      	bls.n	1a0008e0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0008c8:	1c4c      	adds	r4, r1, #1
1a0008ca:	fb02 f304 	mul.w	r3, r2, r4
1a0008ce:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0008d2:	429d      	cmp	r5, r3
1a0008d4:	d2f6      	bcs.n	1a0008c4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0008d6:	2cff      	cmp	r4, #255	; 0xff
1a0008d8:	d9f3      	bls.n	1a0008c2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0008da:	3202      	adds	r2, #2
				cr0_div = 0;
1a0008dc:	2100      	movs	r1, #0
1a0008de:	e7f1      	b.n	1a0008c4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0008e0:	4630      	mov	r0, r6
1a0008e2:	f7ff ffd9 	bl	1a000898 <Chip_SSP_SetClockRate>
}
1a0008e6:	bd70      	pop	{r4, r5, r6, pc}

1a0008e8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0008e8:	b510      	push	{r4, lr}
1a0008ea:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0008ec:	f7ff ffbe 	bl	1a00086c <Chip_SSP_GetClockIndex>
1a0008f0:	f000 fd76 	bl	1a0013e0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0008f4:	4620      	mov	r0, r4
1a0008f6:	f7ff ffc3 	bl	1a000880 <Chip_SSP_GetPeriphClockIndex>
1a0008fa:	f000 fd71 	bl	1a0013e0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0008fe:	6863      	ldr	r3, [r4, #4]
1a000900:	f023 0304 	bic.w	r3, r3, #4
1a000904:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000906:	6823      	ldr	r3, [r4, #0]
1a000908:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00090c:	f043 0307 	orr.w	r3, r3, #7
1a000910:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000912:	4902      	ldr	r1, [pc, #8]	; (1a00091c <Chip_SSP_Init+0x34>)
1a000914:	4620      	mov	r0, r4
1a000916:	f7ff ffc8 	bl	1a0008aa <Chip_SSP_SetBitRate>
}
1a00091a:	bd10      	pop	{r4, pc}
1a00091c:	000186a0 	.word	0x000186a0

1a000920 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000920:	2901      	cmp	r1, #1
1a000922:	d109      	bne.n	1a000938 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000924:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000928:	0082      	lsls	r2, r0, #2
1a00092a:	4b04      	ldr	r3, [pc, #16]	; (1a00093c <Chip_I2C_EventHandler+0x1c>)
1a00092c:	4413      	add	r3, r2
1a00092e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000930:	7d13      	ldrb	r3, [r2, #20]
1a000932:	b2db      	uxtb	r3, r3
1a000934:	2b04      	cmp	r3, #4
1a000936:	d0fb      	beq.n	1a000930 <Chip_I2C_EventHandler+0x10>
}
1a000938:	4770      	bx	lr
1a00093a:	bf00      	nop
1a00093c:	10000004 	.word	0x10000004

1a000940 <handleMasterXferState>:
{
1a000940:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a000942:	6843      	ldr	r3, [r0, #4]
1a000944:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a000948:	2b58      	cmp	r3, #88	; 0x58
1a00094a:	d87f      	bhi.n	1a000a4c <handleMasterXferState+0x10c>
1a00094c:	e8df f003 	tbb	[pc, r3]
1a000950:	7e7e7e7a 	.word	0x7e7e7e7a
1a000954:	7e7e7e7e 	.word	0x7e7e7e7e
1a000958:	7e7e7e2f 	.word	0x7e7e7e2f
1a00095c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000960:	7e7e7e2f 	.word	0x7e7e7e2f
1a000964:	7e7e7e7e 	.word	0x7e7e7e7e
1a000968:	7e7e7e39 	.word	0x7e7e7e39
1a00096c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000970:	7e7e7e6e 	.word	0x7e7e7e6e
1a000974:	7e7e7e7e 	.word	0x7e7e7e7e
1a000978:	7e7e7e39 	.word	0x7e7e7e39
1a00097c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000980:	7e7e7e72 	.word	0x7e7e7e72
1a000984:	7e7e7e7e 	.word	0x7e7e7e7e
1a000988:	7e7e7e76 	.word	0x7e7e7e76
1a00098c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000990:	7e7e7e6c 	.word	0x7e7e7e6c
1a000994:	7e7e7e7e 	.word	0x7e7e7e7e
1a000998:	7e7e7e6e 	.word	0x7e7e7e6e
1a00099c:	7e7e7e7e 	.word	0x7e7e7e7e
1a0009a0:	7e7e7e2d 	.word	0x7e7e7e2d
1a0009a4:	7e7e7e7e 	.word	0x7e7e7e7e
1a0009a8:	4f          	.byte	0x4f
1a0009a9:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a0009aa:	233c      	movs	r3, #60	; 0x3c
1a0009ac:	e020      	b.n	1a0009f0 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0009ae:	780a      	ldrb	r2, [r1, #0]
1a0009b0:	688b      	ldr	r3, [r1, #8]
1a0009b2:	fab3 f383 	clz	r3, r3
1a0009b6:	095b      	lsrs	r3, r3, #5
1a0009b8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0009bc:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0009be:	233c      	movs	r3, #60	; 0x3c
		break;
1a0009c0:	e023      	b.n	1a000a0a <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a0009c2:	688b      	ldr	r3, [r1, #8]
1a0009c4:	b94b      	cbnz	r3, 1a0009da <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0009c6:	690b      	ldr	r3, [r1, #16]
1a0009c8:	b123      	cbz	r3, 1a0009d4 <handleMasterXferState+0x94>
1a0009ca:	f06f 0320 	mvn.w	r3, #32
1a0009ce:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0009d2:	e01a      	b.n	1a000a0a <handleMasterXferState+0xca>
1a0009d4:	f06f 0310 	mvn.w	r3, #16
1a0009d8:	e7f9      	b.n	1a0009ce <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a0009da:	684b      	ldr	r3, [r1, #4]
1a0009dc:	1c5a      	adds	r2, r3, #1
1a0009de:	604a      	str	r2, [r1, #4]
1a0009e0:	781b      	ldrb	r3, [r3, #0]
1a0009e2:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0009e4:	688b      	ldr	r3, [r1, #8]
1a0009e6:	3b01      	subs	r3, #1
1a0009e8:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0009ea:	233c      	movs	r3, #60	; 0x3c
1a0009ec:	e00d      	b.n	1a000a0a <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a0009ee:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a0009f0:	6884      	ldr	r4, [r0, #8]
1a0009f2:	68ca      	ldr	r2, [r1, #12]
1a0009f4:	1c55      	adds	r5, r2, #1
1a0009f6:	60cd      	str	r5, [r1, #12]
1a0009f8:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0009fa:	690a      	ldr	r2, [r1, #16]
1a0009fc:	3a01      	subs	r2, #1
1a0009fe:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a000a00:	690a      	ldr	r2, [r1, #16]
1a000a02:	2a01      	cmp	r2, #1
1a000a04:	dd01      	ble.n	1a000a0a <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a000a06:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a000a0a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a000a0e:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a000a10:	f023 0210 	bic.w	r2, r3, #16
1a000a14:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a000a16:	f013 0f10 	tst.w	r3, #16
1a000a1a:	d019      	beq.n	1a000a50 <handleMasterXferState+0x110>
1a000a1c:	7d0b      	ldrb	r3, [r1, #20]
1a000a1e:	2b02      	cmp	r3, #2
1a000a20:	d016      	beq.n	1a000a50 <handleMasterXferState+0x110>
	return 1;
1a000a22:	2001      	movs	r0, #1
}
1a000a24:	bc30      	pop	{r4, r5}
1a000a26:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a000a28:	233c      	movs	r3, #60	; 0x3c
1a000a2a:	e7e9      	b.n	1a000a00 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a000a2c:	2305      	movs	r3, #5
1a000a2e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000a30:	232c      	movs	r3, #44	; 0x2c
		break;
1a000a32:	e7ea      	b.n	1a000a0a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a000a34:	2301      	movs	r3, #1
1a000a36:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000a38:	232c      	movs	r3, #44	; 0x2c
		break;
1a000a3a:	e7e6      	b.n	1a000a0a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a000a3c:	2302      	movs	r3, #2
1a000a3e:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a000a40:	233c      	movs	r3, #60	; 0x3c
		break;
1a000a42:	e7e2      	b.n	1a000a0a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a000a44:	2303      	movs	r3, #3
1a000a46:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000a48:	232c      	movs	r3, #44	; 0x2c
1a000a4a:	e7de      	b.n	1a000a0a <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a000a4c:	233c      	movs	r3, #60	; 0x3c
1a000a4e:	e7dc      	b.n	1a000a0a <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a000a50:	7d0b      	ldrb	r3, [r1, #20]
1a000a52:	2b04      	cmp	r3, #4
1a000a54:	d001      	beq.n	1a000a5a <handleMasterXferState+0x11a>
		return 0;
1a000a56:	2000      	movs	r0, #0
1a000a58:	e7e4      	b.n	1a000a24 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a000a5a:	2300      	movs	r3, #0
1a000a5c:	750b      	strb	r3, [r1, #20]
1a000a5e:	e7fa      	b.n	1a000a56 <handleMasterXferState+0x116>

1a000a60 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000a60:	b570      	push	{r4, r5, r6, lr}
1a000a62:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000a64:	4e06      	ldr	r6, [pc, #24]	; (1a000a80 <Chip_I2C_Init+0x20>)
1a000a66:	00c4      	lsls	r4, r0, #3
1a000a68:	1a22      	subs	r2, r4, r0
1a000a6a:	0093      	lsls	r3, r2, #2
1a000a6c:	4433      	add	r3, r6
1a000a6e:	8898      	ldrh	r0, [r3, #4]
1a000a70:	f000 fcb6 	bl	1a0013e0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000a74:	1b64      	subs	r4, r4, r5
1a000a76:	00a3      	lsls	r3, r4, #2
1a000a78:	58f3      	ldr	r3, [r6, r3]
1a000a7a:	226c      	movs	r2, #108	; 0x6c
1a000a7c:	619a      	str	r2, [r3, #24]
}
1a000a7e:	bd70      	pop	{r4, r5, r6, pc}
1a000a80:	10000004 	.word	0x10000004

1a000a84 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000a88:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000a8a:	4e0b      	ldr	r6, [pc, #44]	; (1a000ab8 <Chip_I2C_SetClockRate+0x34>)
1a000a8c:	00c5      	lsls	r5, r0, #3
1a000a8e:	1a2b      	subs	r3, r5, r0
1a000a90:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000a94:	eb06 0308 	add.w	r3, r6, r8
1a000a98:	8898      	ldrh	r0, [r3, #4]
1a000a9a:	f000 fcbb 	bl	1a001414 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000a9e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000aa2:	f856 3008 	ldr.w	r3, [r6, r8]
1a000aa6:	0842      	lsrs	r2, r0, #1
1a000aa8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000aaa:	f856 3008 	ldr.w	r3, [r6, r8]
1a000aae:	691a      	ldr	r2, [r3, #16]
1a000ab0:	1a80      	subs	r0, r0, r2
1a000ab2:	6158      	str	r0, [r3, #20]
}
1a000ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ab8:	10000004 	.word	0x10000004

1a000abc <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a000abc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000ac0:	009a      	lsls	r2, r3, #2
1a000ac2:	4b09      	ldr	r3, [pc, #36]	; (1a000ae8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000ac4:	4413      	add	r3, r2
1a000ac6:	691b      	ldr	r3, [r3, #16]
1a000ac8:	b153      	cbz	r3, 1a000ae0 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a000aca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000ace:	0082      	lsls	r2, r0, #2
1a000ad0:	4b05      	ldr	r3, [pc, #20]	; (1a000ae8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000ad2:	4413      	add	r3, r2
1a000ad4:	6898      	ldr	r0, [r3, #8]
}
1a000ad6:	4288      	cmp	r0, r1
1a000ad8:	bf14      	ite	ne
1a000ada:	2000      	movne	r0, #0
1a000adc:	2001      	moveq	r0, #1
1a000ade:	4770      	bx	lr
		iic->mEvent = event;
1a000ae0:	4b01      	ldr	r3, [pc, #4]	; (1a000ae8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000ae2:	4413      	add	r3, r2
1a000ae4:	6099      	str	r1, [r3, #8]
1a000ae6:	e7f0      	b.n	1a000aca <Chip_I2C_SetMasterEventHandler+0xe>
1a000ae8:	10000004 	.word	0x10000004

1a000aec <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a000aec:	b510      	push	{r4, lr}
1a000aee:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a000af0:	4809      	ldr	r0, [pc, #36]	; (1a000b18 <Chip_I2C_MasterStateHandler+0x2c>)
1a000af2:	00e3      	lsls	r3, r4, #3
1a000af4:	1b1b      	subs	r3, r3, r4
1a000af6:	009a      	lsls	r2, r3, #2
1a000af8:	1883      	adds	r3, r0, r2
1a000afa:	6919      	ldr	r1, [r3, #16]
1a000afc:	5880      	ldr	r0, [r0, r2]
1a000afe:	f7ff ff1f 	bl	1a000940 <handleMasterXferState>
1a000b02:	b940      	cbnz	r0, 1a000b16 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a000b04:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a000b08:	009a      	lsls	r2, r3, #2
1a000b0a:	4b03      	ldr	r3, [pc, #12]	; (1a000b18 <Chip_I2C_MasterStateHandler+0x2c>)
1a000b0c:	4413      	add	r3, r2
1a000b0e:	689b      	ldr	r3, [r3, #8]
1a000b10:	2102      	movs	r1, #2
1a000b12:	4620      	mov	r0, r4
1a000b14:	4798      	blx	r3
	}
}
1a000b16:	bd10      	pop	{r4, pc}
1a000b18:	10000004 	.word	0x10000004

1a000b1c <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a000b1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000b20:	0083      	lsls	r3, r0, #2
1a000b22:	4a03      	ldr	r2, [pc, #12]	; (1a000b30 <Chip_I2C_IsStateChanged+0x14>)
1a000b24:	58d3      	ldr	r3, [r2, r3]
1a000b26:	6818      	ldr	r0, [r3, #0]
}
1a000b28:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a000b2c:	4770      	bx	lr
1a000b2e:	bf00      	nop
1a000b30:	10000004 	.word	0x10000004

1a000b34 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a000b34:	2901      	cmp	r1, #1
1a000b36:	d115      	bne.n	1a000b64 <Chip_I2C_EventHandlerPolling+0x30>
{
1a000b38:	b538      	push	{r3, r4, r5, lr}
1a000b3a:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a000b3c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000b40:	009a      	lsls	r2, r3, #2
1a000b42:	4b09      	ldr	r3, [pc, #36]	; (1a000b68 <Chip_I2C_EventHandlerPolling+0x34>)
1a000b44:	4413      	add	r3, r2
1a000b46:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a000b48:	7d2b      	ldrb	r3, [r5, #20]
1a000b4a:	b2db      	uxtb	r3, r3
1a000b4c:	2b04      	cmp	r3, #4
1a000b4e:	d108      	bne.n	1a000b62 <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a000b50:	4620      	mov	r0, r4
1a000b52:	f7ff ffe3 	bl	1a000b1c <Chip_I2C_IsStateChanged>
1a000b56:	2800      	cmp	r0, #0
1a000b58:	d0f6      	beq.n	1a000b48 <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a000b5a:	4620      	mov	r0, r4
1a000b5c:	f7ff ffc6 	bl	1a000aec <Chip_I2C_MasterStateHandler>
1a000b60:	e7f2      	b.n	1a000b48 <Chip_I2C_EventHandlerPolling+0x14>
}
1a000b62:	bd38      	pop	{r3, r4, r5, pc}
1a000b64:	4770      	bx	lr
1a000b66:	bf00      	nop
1a000b68:	10000004 	.word	0x10000004

1a000b6c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000b6c:	4770      	bx	lr
1a000b6e:	Address 0x1a000b6e is out of bounds.


1a000b70 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000b70:	4b03      	ldr	r3, [pc, #12]	; (1a000b80 <Chip_ADC_GetClockIndex+0x10>)
1a000b72:	4298      	cmp	r0, r3
1a000b74:	d001      	beq.n	1a000b7a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000b76:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000b78:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000b7a:	2004      	movs	r0, #4
1a000b7c:	4770      	bx	lr
1a000b7e:	bf00      	nop
1a000b80:	400e4000 	.word	0x400e4000

1a000b84 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000b84:	b570      	push	{r4, r5, r6, lr}
1a000b86:	460d      	mov	r5, r1
1a000b88:	4614      	mov	r4, r2
1a000b8a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000b8c:	f7ff fff0 	bl	1a000b70 <Chip_ADC_GetClockIndex>
1a000b90:	f000 fc40 	bl	1a001414 <Chip_Clock_GetRate>
	if (burstMode) {
1a000b94:	b155      	cbz	r5, 1a000bac <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000b96:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000b9a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000b9e:	0064      	lsls	r4, r4, #1
1a000ba0:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ba4:	b2c0      	uxtb	r0, r0
1a000ba6:	3801      	subs	r0, #1
	return div;
}
1a000ba8:	b2c0      	uxtb	r0, r0
1a000baa:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000bac:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000bb0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000bb4:	e7f1      	b.n	1a000b9a <getClkDiv+0x16>
1a000bb6:	Address 0x1a000bb6 is out of bounds.


1a000bb8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000bb8:	b538      	push	{r3, r4, r5, lr}
1a000bba:	4605      	mov	r5, r0
1a000bbc:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000bbe:	f7ff ffd7 	bl	1a000b70 <Chip_ADC_GetClockIndex>
1a000bc2:	2301      	movs	r3, #1
1a000bc4:	461a      	mov	r2, r3
1a000bc6:	4619      	mov	r1, r3
1a000bc8:	f000 fbec 	bl	1a0013a4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000bcc:	2100      	movs	r1, #0
1a000bce:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000bd0:	4a08      	ldr	r2, [pc, #32]	; (1a000bf4 <Chip_ADC_Init+0x3c>)
1a000bd2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000bd4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000bd6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000bd8:	230b      	movs	r3, #11
1a000bda:	4628      	mov	r0, r5
1a000bdc:	f7ff ffd2 	bl	1a000b84 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000be0:	0200      	lsls	r0, r0, #8
1a000be2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000be6:	7920      	ldrb	r0, [r4, #4]
1a000be8:	0440      	lsls	r0, r0, #17
1a000bea:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000bee:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000bf0:	6028      	str	r0, [r5, #0]
}
1a000bf2:	bd38      	pop	{r3, r4, r5, pc}
1a000bf4:	00061a80 	.word	0x00061a80

1a000bf8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000bf8:	b570      	push	{r4, r5, r6, lr}
1a000bfa:	4605      	mov	r5, r0
1a000bfc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000bfe:	6804      	ldr	r4, [r0, #0]
1a000c00:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000c04:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000c08:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000c0a:	790b      	ldrb	r3, [r1, #4]
1a000c0c:	f1c3 030b 	rsb	r3, r3, #11
1a000c10:	b2db      	uxtb	r3, r3
1a000c12:	7949      	ldrb	r1, [r1, #5]
1a000c14:	f7ff ffb6 	bl	1a000b84 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c18:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c1c:	7933      	ldrb	r3, [r6, #4]
1a000c1e:	045b      	lsls	r3, r3, #17
1a000c20:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000c24:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000c26:	602b      	str	r3, [r5, #0]
}
1a000c28:	bd70      	pop	{r4, r5, r6, pc}

1a000c2a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000c2a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000c2c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000c2e:	680a      	ldr	r2, [r1, #0]
1a000c30:	f7ff ffe2 	bl	1a000bf8 <Chip_ADC_SetSampleRate>
}
1a000c34:	bd08      	pop	{r3, pc}

1a000c36 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a000c36:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a000c38:	6843      	ldr	r3, [r0, #4]
1a000c3a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000c3e:	2b30      	cmp	r3, #48	; 0x30
1a000c40:	d04c      	beq.n	1a000cdc <Chip_I2CM_XferHandler+0xa6>
1a000c42:	d908      	bls.n	1a000c56 <Chip_I2CM_XferHandler+0x20>
1a000c44:	2b48      	cmp	r3, #72	; 0x48
1a000c46:	d06c      	beq.n	1a000d22 <Chip_I2CM_XferHandler+0xec>
1a000c48:	d934      	bls.n	1a000cb4 <Chip_I2CM_XferHandler+0x7e>
1a000c4a:	2b58      	cmp	r3, #88	; 0x58
1a000c4c:	d058      	beq.n	1a000d00 <Chip_I2CM_XferHandler+0xca>
1a000c4e:	2bf8      	cmp	r3, #248	; 0xf8
1a000c50:	d13e      	bne.n	1a000cd0 <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a000c52:	2000      	movs	r0, #0
1a000c54:	e02b      	b.n	1a000cae <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000c56:	2b10      	cmp	r3, #16
1a000c58:	d016      	beq.n	1a000c88 <Chip_I2CM_XferHandler+0x52>
1a000c5a:	d90e      	bls.n	1a000c7a <Chip_I2CM_XferHandler+0x44>
1a000c5c:	2b20      	cmp	r3, #32
1a000c5e:	d03d      	beq.n	1a000cdc <Chip_I2CM_XferHandler+0xa6>
1a000c60:	2b28      	cmp	r3, #40	; 0x28
1a000c62:	d001      	beq.n	1a000c68 <Chip_I2CM_XferHandler+0x32>
1a000c64:	2b18      	cmp	r3, #24
1a000c66:	d135      	bne.n	1a000cd4 <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a000c68:	888b      	ldrh	r3, [r1, #4]
1a000c6a:	2b00      	cmp	r3, #0
1a000c6c:	d13e      	bne.n	1a000cec <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a000c6e:	88cb      	ldrh	r3, [r1, #6]
1a000c70:	2b00      	cmp	r3, #0
1a000c72:	d15e      	bne.n	1a000d32 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a000c74:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a000c76:	232c      	movs	r3, #44	; 0x2c
1a000c78:	e00f      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000c7a:	b91b      	cbnz	r3, 1a000c84 <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a000c7c:	2303      	movs	r3, #3
1a000c7e:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a000c80:	232c      	movs	r3, #44	; 0x2c
        break;
1a000c82:	e00a      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000c84:	2b08      	cmp	r3, #8
1a000c86:	d125      	bne.n	1a000cd4 <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a000c88:	780a      	ldrb	r2, [r1, #0]
1a000c8a:	888b      	ldrh	r3, [r1, #4]
1a000c8c:	fab3 f383 	clz	r3, r3
1a000c90:	095b      	lsrs	r3, r3, #5
1a000c92:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a000c96:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a000c98:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a000c9a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a000c9e:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a000ca0:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a000ca4:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a000ca6:	8848      	ldrh	r0, [r1, #2]
1a000ca8:	38ff      	subs	r0, #255	; 0xff
1a000caa:	bf18      	it	ne
1a000cac:	2001      	movne	r0, #1
}
1a000cae:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000cb2:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000cb4:	2b38      	cmp	r3, #56	; 0x38
1a000cb6:	d038      	beq.n	1a000d2a <Chip_I2CM_XferHandler+0xf4>
1a000cb8:	2b40      	cmp	r3, #64	; 0x40
1a000cba:	d10b      	bne.n	1a000cd4 <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a000cbc:	88ca      	ldrh	r2, [r1, #6]
1a000cbe:	2a01      	cmp	r2, #1
1a000cc0:	d927      	bls.n	1a000d12 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a000cc2:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a000cc4:	2a00      	cmp	r2, #0
1a000cc6:	d1e8      	bne.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a000cc8:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a000cca:	f023 0310 	bic.w	r3, r3, #16
1a000cce:	e7e4      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a000cd0:	2b50      	cmp	r3, #80	; 0x50
1a000cd2:	d015      	beq.n	1a000d00 <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a000cd4:	2301      	movs	r3, #1
1a000cd6:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a000cd8:	232c      	movs	r3, #44	; 0x2c
        break;
1a000cda:	e7de      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a000cdc:	784b      	ldrb	r3, [r1, #1]
1a000cde:	f013 0f01 	tst.w	r3, #1
1a000ce2:	d1c1      	bne.n	1a000c68 <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a000ce4:	2302      	movs	r3, #2
1a000ce6:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a000ce8:	232c      	movs	r3, #44	; 0x2c
			break;
1a000cea:	e7d6      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a000cec:	688b      	ldr	r3, [r1, #8]
1a000cee:	1c5a      	adds	r2, r3, #1
1a000cf0:	608a      	str	r2, [r1, #8]
1a000cf2:	781b      	ldrb	r3, [r3, #0]
1a000cf4:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a000cf6:	888b      	ldrh	r3, [r1, #4]
1a000cf8:	3b01      	subs	r3, #1
1a000cfa:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a000cfc:	233c      	movs	r3, #60	; 0x3c
1a000cfe:	e7cc      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a000d00:	6882      	ldr	r2, [r0, #8]
1a000d02:	68cb      	ldr	r3, [r1, #12]
1a000d04:	1c5c      	adds	r4, r3, #1
1a000d06:	60cc      	str	r4, [r1, #12]
1a000d08:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a000d0a:	88cb      	ldrh	r3, [r1, #6]
1a000d0c:	3b01      	subs	r3, #1
1a000d0e:	80cb      	strh	r3, [r1, #6]
1a000d10:	e7d4      	b.n	1a000cbc <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a000d12:	784b      	ldrb	r3, [r1, #1]
1a000d14:	f013 0f02 	tst.w	r3, #2
1a000d18:	d101      	bne.n	1a000d1e <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a000d1a:	233c      	movs	r3, #60	; 0x3c
1a000d1c:	e7d2      	b.n	1a000cc4 <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a000d1e:	2338      	movs	r3, #56	; 0x38
1a000d20:	e7d0      	b.n	1a000cc4 <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a000d22:	2304      	movs	r3, #4
1a000d24:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a000d26:	232c      	movs	r3, #44	; 0x2c
		break;
1a000d28:	e7b7      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a000d2a:	2305      	movs	r3, #5
1a000d2c:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a000d2e:	233c      	movs	r3, #60	; 0x3c
		break;
1a000d30:	e7b3      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a000d32:	231c      	movs	r3, #28
1a000d34:	e7b1      	b.n	1a000c9a <Chip_I2CM_XferHandler+0x64>

1a000d36 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a000d36:	23ff      	movs	r3, #255	; 0xff
1a000d38:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a000d3a:	232c      	movs	r3, #44	; 0x2c
1a000d3c:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a000d3e:	2360      	movs	r3, #96	; 0x60
1a000d40:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a000d42:	4770      	bx	lr

1a000d44 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a000d44:	b538      	push	{r3, r4, r5, lr}
1a000d46:	4604      	mov	r4, r0
1a000d48:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a000d4a:	f7ff fff4 	bl	1a000d36 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a000d4e:	2000      	movs	r0, #0

	while (ret == 0) {
1a000d50:	e003      	b.n	1a000d5a <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a000d52:	4629      	mov	r1, r5
1a000d54:	4620      	mov	r0, r4
1a000d56:	f7ff ff6e 	bl	1a000c36 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a000d5a:	b920      	cbnz	r0, 1a000d66 <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a000d5c:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a000d5e:	f013 0f08 	tst.w	r3, #8
1a000d62:	d0fb      	beq.n	1a000d5c <Chip_I2CM_XferBlocking+0x18>
1a000d64:	e7f5      	b.n	1a000d52 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a000d66:	bd38      	pop	{r3, r4, r5, pc}

1a000d68 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000d68:	b570      	push	{r4, r5, r6, lr}
1a000d6a:	b08a      	sub	sp, #40	; 0x28
1a000d6c:	4605      	mov	r5, r0
1a000d6e:	460e      	mov	r6, r1
1a000d70:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000d72:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000d76:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000d78:	2806      	cmp	r0, #6
1a000d7a:	d018      	beq.n	1a000dae <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000d7c:	2300      	movs	r3, #0
1a000d7e:	2201      	movs	r2, #1
1a000d80:	4629      	mov	r1, r5
1a000d82:	2004      	movs	r0, #4
1a000d84:	f000 fac8 	bl	1a001318 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000d88:	4a4a      	ldr	r2, [pc, #296]	; (1a000eb4 <Chip_SetupCoreClock+0x14c>)
1a000d8a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000d8c:	f043 0301 	orr.w	r3, r3, #1
1a000d90:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000d92:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000d96:	a901      	add	r1, sp, #4
1a000d98:	4630      	mov	r0, r6
1a000d9a:	f000 fa35 	bl	1a001208 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000d9e:	4b46      	ldr	r3, [pc, #280]	; (1a000eb8 <Chip_SetupCoreClock+0x150>)
1a000da0:	429e      	cmp	r6, r3
1a000da2:	d916      	bls.n	1a000dd2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000da4:	9b01      	ldr	r3, [sp, #4]
1a000da6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000daa:	d003      	beq.n	1a000db4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000dac:	e7fe      	b.n	1a000dac <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000dae:	f000 f98d 	bl	1a0010cc <Chip_Clock_EnableCrystal>
1a000db2:	e7e3      	b.n	1a000d7c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000db4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000db8:	d005      	beq.n	1a000dc6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000dbe:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000dc0:	2500      	movs	r5, #0
			direct = 1;
1a000dc2:	2601      	movs	r6, #1
1a000dc4:	e007      	b.n	1a000dd6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000dc6:	9b04      	ldr	r3, [sp, #16]
1a000dc8:	3301      	adds	r3, #1
1a000dca:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000dcc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000dce:	2600      	movs	r6, #0
1a000dd0:	e001      	b.n	1a000dd6 <Chip_SetupCoreClock+0x6e>
1a000dd2:	2500      	movs	r5, #0
1a000dd4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000dd6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000dda:	9b01      	ldr	r3, [sp, #4]
1a000ddc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000de0:	9a05      	ldr	r2, [sp, #20]
1a000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000de6:	9a03      	ldr	r2, [sp, #12]
1a000de8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000dec:	9a04      	ldr	r2, [sp, #16]
1a000dee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000df2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000df6:	4a2f      	ldr	r2, [pc, #188]	; (1a000eb4 <Chip_SetupCoreClock+0x14c>)
1a000df8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000dfa:	4b2e      	ldr	r3, [pc, #184]	; (1a000eb4 <Chip_SetupCoreClock+0x14c>)
1a000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000dfe:	f013 0f01 	tst.w	r3, #1
1a000e02:	d0fa      	beq.n	1a000dfa <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000e04:	2300      	movs	r3, #0
1a000e06:	2201      	movs	r2, #1
1a000e08:	2109      	movs	r1, #9
1a000e0a:	2004      	movs	r0, #4
1a000e0c:	f000 fa84 	bl	1a001318 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000e10:	b306      	cbz	r6, 1a000e54 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000e12:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000e16:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000e1a:	1e5a      	subs	r2, r3, #1
1a000e1c:	9209      	str	r2, [sp, #36]	; 0x24
1a000e1e:	2b00      	cmp	r3, #0
1a000e20:	d1fa      	bne.n	1a000e18 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000e22:	9b01      	ldr	r3, [sp, #4]
1a000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000e28:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000e2a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000e2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000e32:	9a05      	ldr	r2, [sp, #20]
1a000e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000e38:	9a03      	ldr	r2, [sp, #12]
1a000e3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000e3e:	9a04      	ldr	r2, [sp, #16]
1a000e40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000e48:	4a1a      	ldr	r2, [pc, #104]	; (1a000eb4 <Chip_SetupCoreClock+0x14c>)
1a000e4a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000e4c:	2c00      	cmp	r4, #0
1a000e4e:	d12e      	bne.n	1a000eae <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000e50:	b00a      	add	sp, #40	; 0x28
1a000e52:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000e54:	2d00      	cmp	r5, #0
1a000e56:	d0f9      	beq.n	1a000e4c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000e58:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000e5c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000e60:	1e5a      	subs	r2, r3, #1
1a000e62:	9209      	str	r2, [sp, #36]	; 0x24
1a000e64:	2b00      	cmp	r3, #0
1a000e66:	d1fa      	bne.n	1a000e5e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000e68:	9b04      	ldr	r3, [sp, #16]
1a000e6a:	1e5a      	subs	r2, r3, #1
1a000e6c:	9204      	str	r2, [sp, #16]
1a000e6e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000e72:	9b01      	ldr	r3, [sp, #4]
1a000e74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000e78:	9905      	ldr	r1, [sp, #20]
1a000e7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000e7e:	9903      	ldr	r1, [sp, #12]
1a000e80:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000e84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000e8c:	4a09      	ldr	r2, [pc, #36]	; (1a000eb4 <Chip_SetupCoreClock+0x14c>)
1a000e8e:	6453      	str	r3, [r2, #68]	; 0x44
1a000e90:	e7dc      	b.n	1a000e4c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000e92:	480a      	ldr	r0, [pc, #40]	; (1a000ebc <Chip_SetupCoreClock+0x154>)
1a000e94:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000e98:	78cb      	ldrb	r3, [r1, #3]
1a000e9a:	788a      	ldrb	r2, [r1, #2]
1a000e9c:	7849      	ldrb	r1, [r1, #1]
1a000e9e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000ea2:	f000 fa39 	bl	1a001318 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000ea6:	3401      	adds	r4, #1
1a000ea8:	2c11      	cmp	r4, #17
1a000eaa:	d9f2      	bls.n	1a000e92 <Chip_SetupCoreClock+0x12a>
1a000eac:	e7d0      	b.n	1a000e50 <Chip_SetupCoreClock+0xe8>
1a000eae:	2400      	movs	r4, #0
1a000eb0:	e7fa      	b.n	1a000ea8 <Chip_SetupCoreClock+0x140>
1a000eb2:	bf00      	nop
1a000eb4:	40050000 	.word	0x40050000
1a000eb8:	068e7780 	.word	0x068e7780
1a000ebc:	1a00846c 	.word	0x1a00846c

1a000ec0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000ec0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000ec2:	2069      	movs	r0, #105	; 0x69
1a000ec4:	f000 faa6 	bl	1a001414 <Chip_Clock_GetRate>
1a000ec8:	4b01      	ldr	r3, [pc, #4]	; (1a000ed0 <SystemCoreClockUpdate+0x10>)
1a000eca:	6018      	str	r0, [r3, #0]
}
1a000ecc:	bd08      	pop	{r3, pc}
1a000ece:	bf00      	nop
1a000ed0:	10000ba4 	.word	0x10000ba4

1a000ed4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ed4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000ed6:	680b      	ldr	r3, [r1, #0]
1a000ed8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000edc:	d002      	beq.n	1a000ee4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ee2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000ee4:	4607      	mov	r7, r0
1a000ee6:	2501      	movs	r5, #1
1a000ee8:	e03a      	b.n	1a000f60 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000eea:	694b      	ldr	r3, [r1, #20]
1a000eec:	fb03 f302 	mul.w	r3, r3, r2
1a000ef0:	fbb3 f3f5 	udiv	r3, r3, r5
1a000ef4:	e01c      	b.n	1a000f30 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000ef6:	461c      	mov	r4, r3
	if (val < 0)
1a000ef8:	ebb0 0c04 	subs.w	ip, r0, r4
1a000efc:	d427      	bmi.n	1a000f4e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000efe:	4567      	cmp	r7, ip
1a000f00:	d906      	bls.n	1a000f10 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000f02:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000f04:	1c77      	adds	r7, r6, #1
1a000f06:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000f08:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000f0a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000f0c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000f0e:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000f10:	3201      	adds	r2, #1
1a000f12:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000f16:	dc1d      	bgt.n	1a000f54 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000f18:	680c      	ldr	r4, [r1, #0]
1a000f1a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000f1e:	d0e4      	beq.n	1a000eea <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000f20:	1c73      	adds	r3, r6, #1
1a000f22:	fa02 fc03 	lsl.w	ip, r2, r3
1a000f26:	694b      	ldr	r3, [r1, #20]
1a000f28:	fb03 f30c 	mul.w	r3, r3, ip
1a000f2c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000f30:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000f6c <pll_calc_divs+0x98>
1a000f34:	4563      	cmp	r3, ip
1a000f36:	d9eb      	bls.n	1a000f10 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000f38:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000f70 <pll_calc_divs+0x9c>
1a000f3c:	4563      	cmp	r3, ip
1a000f3e:	d809      	bhi.n	1a000f54 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000f40:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000f44:	d1d7      	bne.n	1a000ef6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000f46:	1c74      	adds	r4, r6, #1
1a000f48:	fa23 f404 	lsr.w	r4, r3, r4
1a000f4c:	e7d4      	b.n	1a000ef8 <pll_calc_divs+0x24>
		return -val;
1a000f4e:	f1cc 0c00 	rsb	ip, ip, #0
1a000f52:	e7d4      	b.n	1a000efe <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000f54:	3601      	adds	r6, #1
1a000f56:	2e03      	cmp	r6, #3
1a000f58:	dc01      	bgt.n	1a000f5e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000f5a:	2201      	movs	r2, #1
1a000f5c:	e7d9      	b.n	1a000f12 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000f5e:	3501      	adds	r5, #1
1a000f60:	2d04      	cmp	r5, #4
1a000f62:	dc01      	bgt.n	1a000f68 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000f64:	2600      	movs	r6, #0
1a000f66:	e7f6      	b.n	1a000f56 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000f68:	bcf0      	pop	{r4, r5, r6, r7}
1a000f6a:	4770      	bx	lr
1a000f6c:	094c5eff 	.word	0x094c5eff
1a000f70:	1312d000 	.word	0x1312d000

1a000f74 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000f74:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f76:	b099      	sub	sp, #100	; 0x64
1a000f78:	4605      	mov	r5, r0
1a000f7a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000f7c:	225c      	movs	r2, #92	; 0x5c
1a000f7e:	2100      	movs	r1, #0
1a000f80:	a801      	add	r0, sp, #4
1a000f82:	f002 ffe9 	bl	1a003f58 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000f86:	2380      	movs	r3, #128	; 0x80
1a000f88:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000f8a:	6963      	ldr	r3, [r4, #20]
1a000f8c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000f8e:	7923      	ldrb	r3, [r4, #4]
1a000f90:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000f94:	4669      	mov	r1, sp
1a000f96:	4628      	mov	r0, r5
1a000f98:	f7ff ff9c 	bl	1a000ed4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000f9c:	9b06      	ldr	r3, [sp, #24]
1a000f9e:	42ab      	cmp	r3, r5
1a000fa0:	d027      	beq.n	1a000ff2 <pll_get_frac+0x7e>
	if (val < 0)
1a000fa2:	1aeb      	subs	r3, r5, r3
1a000fa4:	d42e      	bmi.n	1a001004 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000fa6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000fa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000fae:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000fb0:	6963      	ldr	r3, [r4, #20]
1a000fb2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000fb4:	7923      	ldrb	r3, [r4, #4]
1a000fb6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000fba:	a910      	add	r1, sp, #64	; 0x40
1a000fbc:	4628      	mov	r0, r5
1a000fbe:	f7ff ff89 	bl	1a000ed4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000fc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000fc4:	42ab      	cmp	r3, r5
1a000fc6:	d01f      	beq.n	1a001008 <pll_get_frac+0x94>
	if (val < 0)
1a000fc8:	1aeb      	subs	r3, r5, r3
1a000fca:	d425      	bmi.n	1a001018 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000fcc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000fce:	4b2b      	ldr	r3, [pc, #172]	; (1a00107c <pll_get_frac+0x108>)
1a000fd0:	429d      	cmp	r5, r3
1a000fd2:	d923      	bls.n	1a00101c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000fd6:	1aed      	subs	r5, r5, r3
1a000fd8:	d433      	bmi.n	1a001042 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000fda:	42ae      	cmp	r6, r5
1a000fdc:	dc3b      	bgt.n	1a001056 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000fde:	42be      	cmp	r6, r7
1a000fe0:	dc31      	bgt.n	1a001046 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000fe2:	466d      	mov	r5, sp
1a000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fe8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ff0:	e006      	b.n	1a001000 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000ff2:	466d      	mov	r5, sp
1a000ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ff8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001000:	b019      	add	sp, #100	; 0x64
1a001002:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001004:	425b      	negs	r3, r3
1a001006:	e7ce      	b.n	1a000fa6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001008:	ad10      	add	r5, sp, #64	; 0x40
1a00100a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00100c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00100e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001016:	e7f3      	b.n	1a001000 <pll_get_frac+0x8c>
		return -val;
1a001018:	425b      	negs	r3, r3
1a00101a:	e7d7      	b.n	1a000fcc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00101c:	2340      	movs	r3, #64	; 0x40
1a00101e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001020:	6963      	ldr	r3, [r4, #20]
1a001022:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001024:	a908      	add	r1, sp, #32
1a001026:	4628      	mov	r0, r5
1a001028:	f7ff ff54 	bl	1a000ed4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00102c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00102e:	42ab      	cmp	r3, r5
1a001030:	d1d0      	bne.n	1a000fd4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001032:	ad08      	add	r5, sp, #32
1a001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001038:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00103c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001040:	e7de      	b.n	1a001000 <pll_get_frac+0x8c>
		return -val;
1a001042:	426d      	negs	r5, r5
1a001044:	e7c9      	b.n	1a000fda <pll_get_frac+0x66>
			*ppll = pll[2];
1a001046:	ad10      	add	r5, sp, #64	; 0x40
1a001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00104c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001054:	e7d4      	b.n	1a001000 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001056:	42af      	cmp	r7, r5
1a001058:	db07      	blt.n	1a00106a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00105a:	ad08      	add	r5, sp, #32
1a00105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001060:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001068:	e7ca      	b.n	1a001000 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00106a:	ad10      	add	r5, sp, #64	; 0x40
1a00106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001070:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001078:	e7c2      	b.n	1a001000 <pll_get_frac+0x8c>
1a00107a:	bf00      	nop
1a00107c:	068e7780 	.word	0x068e7780

1a001080 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001080:	b430      	push	{r4, r5}
1a001082:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001084:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001086:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001088:	e000      	b.n	1a00108c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00108a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00108c:	281c      	cmp	r0, #28
1a00108e:	d118      	bne.n	1a0010c2 <Chip_Clock_FindBaseClock+0x42>
1a001090:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001094:	0051      	lsls	r1, r2, #1
1a001096:	4a0c      	ldr	r2, [pc, #48]	; (1a0010c8 <Chip_Clock_FindBaseClock+0x48>)
1a001098:	440a      	add	r2, r1
1a00109a:	7914      	ldrb	r4, [r2, #4]
1a00109c:	4284      	cmp	r4, r0
1a00109e:	d010      	beq.n	1a0010c2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0010a0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0010a4:	004a      	lsls	r2, r1, #1
1a0010a6:	4908      	ldr	r1, [pc, #32]	; (1a0010c8 <Chip_Clock_FindBaseClock+0x48>)
1a0010a8:	5a8a      	ldrh	r2, [r1, r2]
1a0010aa:	42aa      	cmp	r2, r5
1a0010ac:	d8ed      	bhi.n	1a00108a <Chip_Clock_FindBaseClock+0xa>
1a0010ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0010b2:	0051      	lsls	r1, r2, #1
1a0010b4:	4a04      	ldr	r2, [pc, #16]	; (1a0010c8 <Chip_Clock_FindBaseClock+0x48>)
1a0010b6:	440a      	add	r2, r1
1a0010b8:	8852      	ldrh	r2, [r2, #2]
1a0010ba:	42aa      	cmp	r2, r5
1a0010bc:	d3e5      	bcc.n	1a00108a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0010be:	4620      	mov	r0, r4
1a0010c0:	e7e4      	b.n	1a00108c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0010c2:	bc30      	pop	{r4, r5}
1a0010c4:	4770      	bx	lr
1a0010c6:	bf00      	nop
1a0010c8:	1a0084c0 	.word	0x1a0084c0

1a0010cc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0010cc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0010d2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0010d4:	4a0d      	ldr	r2, [pc, #52]	; (1a00110c <Chip_Clock_EnableCrystal+0x40>)
1a0010d6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0010d8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0010dc:	6992      	ldr	r2, [r2, #24]
1a0010de:	428a      	cmp	r2, r1
1a0010e0:	d001      	beq.n	1a0010e6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0010e2:	4a0a      	ldr	r2, [pc, #40]	; (1a00110c <Chip_Clock_EnableCrystal+0x40>)
1a0010e4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0010e6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0010ea:	4a09      	ldr	r2, [pc, #36]	; (1a001110 <Chip_Clock_EnableCrystal+0x44>)
1a0010ec:	6811      	ldr	r1, [r2, #0]
1a0010ee:	4a09      	ldr	r2, [pc, #36]	; (1a001114 <Chip_Clock_EnableCrystal+0x48>)
1a0010f0:	4291      	cmp	r1, r2
1a0010f2:	d901      	bls.n	1a0010f8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0010f4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0010f8:	4a04      	ldr	r2, [pc, #16]	; (1a00110c <Chip_Clock_EnableCrystal+0x40>)
1a0010fa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0010fc:	9b01      	ldr	r3, [sp, #4]
1a0010fe:	1e5a      	subs	r2, r3, #1
1a001100:	9201      	str	r2, [sp, #4]
1a001102:	2b00      	cmp	r3, #0
1a001104:	d1fa      	bne.n	1a0010fc <Chip_Clock_EnableCrystal+0x30>
}
1a001106:	b002      	add	sp, #8
1a001108:	4770      	bx	lr
1a00110a:	bf00      	nop
1a00110c:	40050000 	.word	0x40050000
1a001110:	1a008468 	.word	0x1a008468
1a001114:	01312cff 	.word	0x01312cff

1a001118 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001118:	3012      	adds	r0, #18
1a00111a:	4b05      	ldr	r3, [pc, #20]	; (1a001130 <Chip_Clock_GetDividerSource+0x18>)
1a00111c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001120:	f010 0f01 	tst.w	r0, #1
1a001124:	d102      	bne.n	1a00112c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001126:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00112a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00112c:	2011      	movs	r0, #17
}
1a00112e:	4770      	bx	lr
1a001130:	40050000 	.word	0x40050000

1a001134 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001134:	f100 0212 	add.w	r2, r0, #18
1a001138:	4b03      	ldr	r3, [pc, #12]	; (1a001148 <Chip_Clock_GetDividerDivisor+0x14>)
1a00113a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00113e:	4b03      	ldr	r3, [pc, #12]	; (1a00114c <Chip_Clock_GetDividerDivisor+0x18>)
1a001140:	5c18      	ldrb	r0, [r3, r0]
}
1a001142:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001146:	4770      	bx	lr
1a001148:	40050000 	.word	0x40050000
1a00114c:	1a0084b8 	.word	0x1a0084b8

1a001150 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001150:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001152:	2810      	cmp	r0, #16
1a001154:	d80a      	bhi.n	1a00116c <Chip_Clock_GetClockInputHz+0x1c>
1a001156:	e8df f000 	tbb	[pc, r0]
1a00115a:	0b44      	.short	0x0b44
1a00115c:	0921180d 	.word	0x0921180d
1a001160:	2d2a2724 	.word	0x2d2a2724
1a001164:	34300909 	.word	0x34300909
1a001168:	3c38      	.short	0x3c38
1a00116a:	40          	.byte	0x40
1a00116b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00116c:	2000      	movs	r0, #0
1a00116e:	e03a      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001170:	481e      	ldr	r0, [pc, #120]	; (1a0011ec <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001172:	e038      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001174:	4b1e      	ldr	r3, [pc, #120]	; (1a0011f0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001176:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00117a:	f003 0307 	and.w	r3, r3, #7
1a00117e:	2b04      	cmp	r3, #4
1a001180:	d001      	beq.n	1a001186 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001182:	481c      	ldr	r0, [pc, #112]	; (1a0011f4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001184:	e02f      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001186:	2000      	movs	r0, #0
1a001188:	e02d      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00118a:	4b19      	ldr	r3, [pc, #100]	; (1a0011f0 <Chip_Clock_GetClockInputHz+0xa0>)
1a00118c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001190:	f003 0307 	and.w	r3, r3, #7
1a001194:	2b04      	cmp	r3, #4
1a001196:	d027      	beq.n	1a0011e8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001198:	4816      	ldr	r0, [pc, #88]	; (1a0011f4 <Chip_Clock_GetClockInputHz+0xa4>)
1a00119a:	e024      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00119c:	4b16      	ldr	r3, [pc, #88]	; (1a0011f8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00119e:	6818      	ldr	r0, [r3, #0]
		break;
1a0011a0:	e021      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0011a2:	4b16      	ldr	r3, [pc, #88]	; (1a0011fc <Chip_Clock_GetClockInputHz+0xac>)
1a0011a4:	6818      	ldr	r0, [r3, #0]
		break;
1a0011a6:	e01e      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0011a8:	4b15      	ldr	r3, [pc, #84]	; (1a001200 <Chip_Clock_GetClockInputHz+0xb0>)
1a0011aa:	6818      	ldr	r0, [r3, #0]
		break;
1a0011ac:	e01b      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0011ae:	4b14      	ldr	r3, [pc, #80]	; (1a001200 <Chip_Clock_GetClockInputHz+0xb0>)
1a0011b0:	6858      	ldr	r0, [r3, #4]
		break;
1a0011b2:	e018      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0011b4:	f000 f868 	bl	1a001288 <Chip_Clock_GetMainPLLHz>
		break;
1a0011b8:	e015      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0011ba:	2100      	movs	r1, #0
1a0011bc:	f000 f89a 	bl	1a0012f4 <Chip_Clock_GetDivRate>
		break;
1a0011c0:	e011      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0011c2:	2101      	movs	r1, #1
1a0011c4:	f000 f896 	bl	1a0012f4 <Chip_Clock_GetDivRate>
		break;
1a0011c8:	e00d      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0011ca:	2102      	movs	r1, #2
1a0011cc:	f000 f892 	bl	1a0012f4 <Chip_Clock_GetDivRate>
		break;
1a0011d0:	e009      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0011d2:	2103      	movs	r1, #3
1a0011d4:	f000 f88e 	bl	1a0012f4 <Chip_Clock_GetDivRate>
		break;
1a0011d8:	e005      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0011da:	2104      	movs	r1, #4
1a0011dc:	f000 f88a 	bl	1a0012f4 <Chip_Clock_GetDivRate>
		break;
1a0011e0:	e001      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0011e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0011e6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0011e8:	4806      	ldr	r0, [pc, #24]	; (1a001204 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0011ea:	e7fc      	b.n	1a0011e6 <Chip_Clock_GetClockInputHz+0x96>
1a0011ec:	00b71b00 	.word	0x00b71b00
1a0011f0:	40043000 	.word	0x40043000
1a0011f4:	017d7840 	.word	0x017d7840
1a0011f8:	1a00843c 	.word	0x1a00843c
1a0011fc:	1a008468 	.word	0x1a008468
1a001200:	100009fc 	.word	0x100009fc
1a001204:	02faf080 	.word	0x02faf080

1a001208 <Chip_Clock_CalcMainPLLValue>:
{
1a001208:	b538      	push	{r3, r4, r5, lr}
1a00120a:	4605      	mov	r5, r0
1a00120c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00120e:	7908      	ldrb	r0, [r1, #4]
1a001210:	f7ff ff9e 	bl	1a001150 <Chip_Clock_GetClockInputHz>
1a001214:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001216:	4b19      	ldr	r3, [pc, #100]	; (1a00127c <Chip_Clock_CalcMainPLLValue+0x74>)
1a001218:	442b      	add	r3, r5
1a00121a:	4a19      	ldr	r2, [pc, #100]	; (1a001280 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00121c:	4293      	cmp	r3, r2
1a00121e:	d821      	bhi.n	1a001264 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001220:	b318      	cbz	r0, 1a00126a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001222:	2380      	movs	r3, #128	; 0x80
1a001224:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001226:	2300      	movs	r3, #0
1a001228:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00122a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00122c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001230:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001232:	4a14      	ldr	r2, [pc, #80]	; (1a001284 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001234:	4295      	cmp	r5, r2
1a001236:	d903      	bls.n	1a001240 <Chip_Clock_CalcMainPLLValue+0x38>
1a001238:	fb03 f000 	mul.w	r0, r3, r0
1a00123c:	42a8      	cmp	r0, r5
1a00123e:	d007      	beq.n	1a001250 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001240:	4621      	mov	r1, r4
1a001242:	4628      	mov	r0, r5
1a001244:	f7ff fe96 	bl	1a000f74 <pll_get_frac>
		if (!ppll->nsel) {
1a001248:	68a3      	ldr	r3, [r4, #8]
1a00124a:	b18b      	cbz	r3, 1a001270 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00124c:	3b01      	subs	r3, #1
1a00124e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001250:	6923      	ldr	r3, [r4, #16]
1a001252:	b183      	cbz	r3, 1a001276 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001254:	68e2      	ldr	r2, [r4, #12]
1a001256:	b10a      	cbz	r2, 1a00125c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001258:	3a01      	subs	r2, #1
1a00125a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00125c:	3b01      	subs	r3, #1
1a00125e:	6123      	str	r3, [r4, #16]
	return 0;
1a001260:	2000      	movs	r0, #0
}
1a001262:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001264:	f04f 30ff 	mov.w	r0, #4294967295
1a001268:	e7fb      	b.n	1a001262 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00126a:	f04f 30ff 	mov.w	r0, #4294967295
1a00126e:	e7f8      	b.n	1a001262 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001270:	f04f 30ff 	mov.w	r0, #4294967295
1a001274:	e7f5      	b.n	1a001262 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001276:	f04f 30ff 	mov.w	r0, #4294967295
1a00127a:	e7f2      	b.n	1a001262 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00127c:	ff6b3a10 	.word	0xff6b3a10
1a001280:	0b940510 	.word	0x0b940510
1a001284:	094c5eff 	.word	0x094c5eff

1a001288 <Chip_Clock_GetMainPLLHz>:
{
1a001288:	b530      	push	{r4, r5, lr}
1a00128a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00128c:	4d17      	ldr	r5, [pc, #92]	; (1a0012ec <Chip_Clock_GetMainPLLHz+0x64>)
1a00128e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001290:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001294:	f7ff ff5c 	bl	1a001150 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001298:	4b15      	ldr	r3, [pc, #84]	; (1a0012f0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00129a:	681b      	ldr	r3, [r3, #0]
1a00129c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00129e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0012a0:	f013 0f01 	tst.w	r3, #1
1a0012a4:	d020      	beq.n	1a0012e8 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0012a6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0012aa:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0012ae:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0012b2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0012b6:	3301      	adds	r3, #1
	n = nsel + 1;
1a0012b8:	3201      	adds	r2, #1
	p = ptab[psel];
1a0012ba:	f10d 0c08 	add.w	ip, sp, #8
1a0012be:	4461      	add	r1, ip
1a0012c0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0012c4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0012c8:	d108      	bne.n	1a0012dc <Chip_Clock_GetMainPLLHz+0x54>
1a0012ca:	b93d      	cbnz	r5, 1a0012dc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0012cc:	0049      	lsls	r1, r1, #1
1a0012ce:	fbb3 f3f1 	udiv	r3, r3, r1
1a0012d2:	fbb0 f0f2 	udiv	r0, r0, r2
1a0012d6:	fb00 f003 	mul.w	r0, r0, r3
1a0012da:	e003      	b.n	1a0012e4 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0012dc:	fbb0 f0f2 	udiv	r0, r0, r2
1a0012e0:	fb03 f000 	mul.w	r0, r3, r0
}
1a0012e4:	b003      	add	sp, #12
1a0012e6:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0012e8:	2000      	movs	r0, #0
1a0012ea:	e7fb      	b.n	1a0012e4 <Chip_Clock_GetMainPLLHz+0x5c>
1a0012ec:	40050000 	.word	0x40050000
1a0012f0:	1a0084b4 	.word	0x1a0084b4

1a0012f4 <Chip_Clock_GetDivRate>:
{
1a0012f4:	b538      	push	{r3, r4, r5, lr}
1a0012f6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0012f8:	4608      	mov	r0, r1
1a0012fa:	f7ff ff0d 	bl	1a001118 <Chip_Clock_GetDividerSource>
1a0012fe:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001300:	4620      	mov	r0, r4
1a001302:	f7ff ff17 	bl	1a001134 <Chip_Clock_GetDividerDivisor>
1a001306:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001308:	4628      	mov	r0, r5
1a00130a:	f7ff ff21 	bl	1a001150 <Chip_Clock_GetClockInputHz>
1a00130e:	3401      	adds	r4, #1
}
1a001310:	fbb0 f0f4 	udiv	r0, r0, r4
1a001314:	bd38      	pop	{r3, r4, r5, pc}
1a001316:	Address 0x1a001316 is out of bounds.


1a001318 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001318:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00131a:	f100 0416 	add.w	r4, r0, #22
1a00131e:	00a4      	lsls	r4, r4, #2
1a001320:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001324:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001328:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00132a:	281b      	cmp	r0, #27
1a00132c:	d813      	bhi.n	1a001356 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00132e:	2911      	cmp	r1, #17
1a001330:	d01a      	beq.n	1a001368 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001332:	4d0e      	ldr	r5, [pc, #56]	; (1a00136c <Chip_Clock_SetBaseClock+0x54>)
1a001334:	4025      	ands	r5, r4

			if (autoblocken) {
1a001336:	b10a      	cbz	r2, 1a00133c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001338:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00133c:	b10b      	cbz	r3, 1a001342 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00133e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001342:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001346:	3016      	adds	r0, #22
1a001348:	0080      	lsls	r0, r0, #2
1a00134a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00134e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001352:	6045      	str	r5, [r0, #4]
1a001354:	e008      	b.n	1a001368 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001356:	f044 0401 	orr.w	r4, r4, #1
1a00135a:	3016      	adds	r0, #22
1a00135c:	0080      	lsls	r0, r0, #2
1a00135e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001362:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001366:	6044      	str	r4, [r0, #4]
	}
}
1a001368:	bc30      	pop	{r4, r5}
1a00136a:	4770      	bx	lr
1a00136c:	e0fff7fe 	.word	0xe0fff7fe

1a001370 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001370:	281b      	cmp	r0, #27
1a001372:	d80c      	bhi.n	1a00138e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001374:	3016      	adds	r0, #22
1a001376:	0080      	lsls	r0, r0, #2
1a001378:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00137c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001380:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001382:	f010 0f01 	tst.w	r0, #1
1a001386:	d104      	bne.n	1a001392 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001388:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00138c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00138e:	2011      	movs	r0, #17
1a001390:	4770      	bx	lr
		return CLKINPUT_PD;
1a001392:	2011      	movs	r0, #17
}
1a001394:	4770      	bx	lr

1a001396 <Chip_Clock_GetBaseClocktHz>:
{
1a001396:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001398:	f7ff ffea 	bl	1a001370 <Chip_Clock_GetBaseClock>
1a00139c:	f7ff fed8 	bl	1a001150 <Chip_Clock_GetClockInputHz>
}
1a0013a0:	bd08      	pop	{r3, pc}
1a0013a2:	Address 0x1a0013a2 is out of bounds.


1a0013a4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0013a4:	b971      	cbnz	r1, 1a0013c4 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0013a6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0013a8:	b10a      	cbz	r2, 1a0013ae <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0013aa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0013ae:	2b02      	cmp	r3, #2
1a0013b0:	d00a      	beq.n	1a0013c8 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0013b2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0013b6:	d30a      	bcc.n	1a0013ce <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0013b8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0013bc:	4b06      	ldr	r3, [pc, #24]	; (1a0013d8 <Chip_Clock_EnableOpts+0x34>)
1a0013be:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0013c2:	4770      	bx	lr
		reg |= (1 << 1);
1a0013c4:	2103      	movs	r1, #3
1a0013c6:	e7ef      	b.n	1a0013a8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0013c8:	f041 0120 	orr.w	r1, r1, #32
1a0013cc:	e7f1      	b.n	1a0013b2 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0013ce:	3020      	adds	r0, #32
1a0013d0:	4b02      	ldr	r3, [pc, #8]	; (1a0013dc <Chip_Clock_EnableOpts+0x38>)
1a0013d2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0013d6:	4770      	bx	lr
1a0013d8:	40052000 	.word	0x40052000
1a0013dc:	40051000 	.word	0x40051000

1a0013e0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0013e0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0013e4:	d309      	bcc.n	1a0013fa <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0013e6:	4a09      	ldr	r2, [pc, #36]	; (1a00140c <Chip_Clock_Enable+0x2c>)
1a0013e8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0013ec:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0013f0:	f043 0301 	orr.w	r3, r3, #1
1a0013f4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0013f8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0013fa:	4a05      	ldr	r2, [pc, #20]	; (1a001410 <Chip_Clock_Enable+0x30>)
1a0013fc:	3020      	adds	r0, #32
1a0013fe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001402:	f043 0301 	orr.w	r3, r3, #1
1a001406:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00140a:	4770      	bx	lr
1a00140c:	40052000 	.word	0x40052000
1a001410:	40051000 	.word	0x40051000

1a001414 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001414:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001416:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00141a:	d309      	bcc.n	1a001430 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00141c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001420:	4a0d      	ldr	r2, [pc, #52]	; (1a001458 <Chip_Clock_GetRate+0x44>)
1a001422:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001426:	f014 0f01 	tst.w	r4, #1
1a00142a:	d107      	bne.n	1a00143c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00142c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00142e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001430:	f100 0320 	add.w	r3, r0, #32
1a001434:	4a09      	ldr	r2, [pc, #36]	; (1a00145c <Chip_Clock_GetRate+0x48>)
1a001436:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00143a:	e7f4      	b.n	1a001426 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00143c:	f7ff fe20 	bl	1a001080 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001440:	f7ff ffa9 	bl	1a001396 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001444:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001448:	d103      	bne.n	1a001452 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00144a:	2301      	movs	r3, #1
		rate = rate / div;
1a00144c:	fbb0 f0f3 	udiv	r0, r0, r3
1a001450:	e7ed      	b.n	1a00142e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001452:	2302      	movs	r3, #2
1a001454:	e7fa      	b.n	1a00144c <Chip_Clock_GetRate+0x38>
1a001456:	bf00      	nop
1a001458:	40052000 	.word	0x40052000
1a00145c:	40051000 	.word	0x40051000

1a001460 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001460:	4b09      	ldr	r3, [pc, #36]	; (1a001488 <Chip_UART_GetIndex+0x28>)
1a001462:	4298      	cmp	r0, r3
1a001464:	d009      	beq.n	1a00147a <Chip_UART_GetIndex+0x1a>
1a001466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00146a:	4298      	cmp	r0, r3
1a00146c:	d007      	beq.n	1a00147e <Chip_UART_GetIndex+0x1e>
1a00146e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001472:	4298      	cmp	r0, r3
1a001474:	d005      	beq.n	1a001482 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001476:	2000      	movs	r0, #0
1a001478:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00147a:	2002      	movs	r0, #2
1a00147c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00147e:	2003      	movs	r0, #3
1a001480:	4770      	bx	lr
			return 1;
1a001482:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001484:	4770      	bx	lr
1a001486:	bf00      	nop
1a001488:	400c1000 	.word	0x400c1000

1a00148c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00148c:	b530      	push	{r4, r5, lr}
1a00148e:	b083      	sub	sp, #12
1a001490:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001492:	f7ff ffe5 	bl	1a001460 <Chip_UART_GetIndex>
1a001496:	2301      	movs	r3, #1
1a001498:	461a      	mov	r2, r3
1a00149a:	4619      	mov	r1, r3
1a00149c:	4d0e      	ldr	r5, [pc, #56]	; (1a0014d8 <Chip_UART_Init+0x4c>)
1a00149e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0014a2:	f7ff ff7f 	bl	1a0013a4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0014a6:	2307      	movs	r3, #7
1a0014a8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0014aa:	2300      	movs	r3, #0
1a0014ac:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0014ae:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0014b0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0014b2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0014b4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0014b6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0014b8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0014ba:	4b08      	ldr	r3, [pc, #32]	; (1a0014dc <Chip_UART_Init+0x50>)
1a0014bc:	429c      	cmp	r4, r3
1a0014be:	d006      	beq.n	1a0014ce <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0014c0:	2303      	movs	r3, #3
1a0014c2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0014c4:	2310      	movs	r3, #16
1a0014c6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0014c8:	9b01      	ldr	r3, [sp, #4]
}
1a0014ca:	b003      	add	sp, #12
1a0014cc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0014ce:	2300      	movs	r3, #0
1a0014d0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0014d2:	69a3      	ldr	r3, [r4, #24]
1a0014d4:	9301      	str	r3, [sp, #4]
1a0014d6:	e7f3      	b.n	1a0014c0 <Chip_UART_Init+0x34>
1a0014d8:	1a008534 	.word	0x1a008534
1a0014dc:	40082000 	.word	0x40082000

1a0014e0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0014e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0014e4:	b083      	sub	sp, #12
1a0014e6:	9001      	str	r0, [sp, #4]
1a0014e8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0014ea:	f7ff ffb9 	bl	1a001460 <Chip_UART_GetIndex>
1a0014ee:	4b32      	ldr	r3, [pc, #200]	; (1a0015b8 <Chip_UART_SetBaudFDR+0xd8>)
1a0014f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0014f4:	f7ff ff8e 	bl	1a001414 <Chip_Clock_GetRate>
1a0014f8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0014fa:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0014fe:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001500:	f04f 0b00 	mov.w	fp, #0
1a001504:	46a2      	mov	sl, r4
1a001506:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001508:	e02a      	b.n	1a001560 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00150a:	4242      	negs	r2, r0
				div ++;
1a00150c:	1c4b      	adds	r3, r1, #1
1a00150e:	e017      	b.n	1a001540 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001510:	b30a      	cbz	r2, 1a001556 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001512:	4617      	mov	r7, r2
			sd = d;
1a001514:	46ab      	mov	fp, r5
			sm = m;
1a001516:	46a2      	mov	sl, r4
			sdiv = div;
1a001518:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00151a:	3501      	adds	r5, #1
1a00151c:	42ac      	cmp	r4, r5
1a00151e:	d91e      	bls.n	1a00155e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001520:	0933      	lsrs	r3, r6, #4
1a001522:	0730      	lsls	r0, r6, #28
1a001524:	fba4 0100 	umull	r0, r1, r4, r0
1a001528:	fb04 1103 	mla	r1, r4, r3, r1
1a00152c:	1962      	adds	r2, r4, r5
1a00152e:	fb08 f202 	mul.w	r2, r8, r2
1a001532:	2300      	movs	r3, #0
1a001534:	f001 fd00 	bl	1a002f38 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001538:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00153a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00153c:	2800      	cmp	r0, #0
1a00153e:	dbe4      	blt.n	1a00150a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001540:	4297      	cmp	r7, r2
1a001542:	d3ea      	bcc.n	1a00151a <Chip_UART_SetBaudFDR+0x3a>
1a001544:	2b00      	cmp	r3, #0
1a001546:	d0e8      	beq.n	1a00151a <Chip_UART_SetBaudFDR+0x3a>
1a001548:	0c19      	lsrs	r1, r3, #16
1a00154a:	d1e6      	bne.n	1a00151a <Chip_UART_SetBaudFDR+0x3a>
1a00154c:	2b02      	cmp	r3, #2
1a00154e:	d8df      	bhi.n	1a001510 <Chip_UART_SetBaudFDR+0x30>
1a001550:	2d00      	cmp	r5, #0
1a001552:	d0dd      	beq.n	1a001510 <Chip_UART_SetBaudFDR+0x30>
1a001554:	e7e1      	b.n	1a00151a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001556:	4617      	mov	r7, r2
			sd = d;
1a001558:	46ab      	mov	fp, r5
			sm = m;
1a00155a:	46a2      	mov	sl, r4
			sdiv = div;
1a00155c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00155e:	3401      	adds	r4, #1
1a001560:	b11f      	cbz	r7, 1a00156a <Chip_UART_SetBaudFDR+0x8a>
1a001562:	2c0f      	cmp	r4, #15
1a001564:	d801      	bhi.n	1a00156a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001566:	2500      	movs	r5, #0
1a001568:	e7d8      	b.n	1a00151c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00156a:	f1b9 0f00 	cmp.w	r9, #0
1a00156e:	d01e      	beq.n	1a0015ae <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001570:	9a01      	ldr	r2, [sp, #4]
1a001572:	4611      	mov	r1, r2
1a001574:	68d3      	ldr	r3, [r2, #12]
1a001576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00157a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00157c:	fa5f f389 	uxtb.w	r3, r9
1a001580:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a001582:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001586:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001588:	68d3      	ldr	r3, [r2, #12]
1a00158a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00158e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001590:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001594:	b2db      	uxtb	r3, r3
1a001596:	f00b 020f 	and.w	r2, fp, #15
1a00159a:	4313      	orrs	r3, r2
1a00159c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00159e:	0933      	lsrs	r3, r6, #4
1a0015a0:	fb0a f303 	mul.w	r3, sl, r3
1a0015a4:	44da      	add	sl, fp
1a0015a6:	fb09 f90a 	mul.w	r9, r9, sl
1a0015aa:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0015ae:	4648      	mov	r0, r9
1a0015b0:	b003      	add	sp, #12
1a0015b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0015b6:	bf00      	nop
1a0015b8:	1a00852c 	.word	0x1a00852c

1a0015bc <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0015bc:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0015be:	4a0b      	ldr	r2, [pc, #44]	; (1a0015ec <SystemInit+0x30>)
1a0015c0:	4b0b      	ldr	r3, [pc, #44]	; (1a0015f0 <SystemInit+0x34>)
1a0015c2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0015c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0015c8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0015ca:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0015ce:	2b20      	cmp	r3, #32
1a0015d0:	d004      	beq.n	1a0015dc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0015d2:	f7ff f84d 	bl	1a000670 <Board_SystemInit>
   Board_Init();
1a0015d6:	f7ff f923 	bl	1a000820 <Board_Init>
}
1a0015da:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0015dc:	4a04      	ldr	r2, [pc, #16]	; (1a0015f0 <SystemInit+0x34>)
1a0015de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0015e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0015e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0015ea:	e7f2      	b.n	1a0015d2 <SystemInit+0x16>
1a0015ec:	1a000000 	.word	0x1a000000
1a0015f0:	e000ed00 	.word	0xe000ed00

1a0015f4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0015f4:	4b04      	ldr	r3, [pc, #16]	; (1a001608 <cyclesCounterInit+0x14>)
1a0015f6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0015f8:	4a04      	ldr	r2, [pc, #16]	; (1a00160c <cyclesCounterInit+0x18>)
1a0015fa:	6813      	ldr	r3, [r2, #0]
1a0015fc:	f043 0301 	orr.w	r3, r3, #1
1a001600:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001602:	2001      	movs	r0, #1
1a001604:	4770      	bx	lr
1a001606:	bf00      	nop
1a001608:	1000003c 	.word	0x1000003c
1a00160c:	e0001000 	.word	0xe0001000

1a001610 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001610:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001612:	4d0b      	ldr	r5, [pc, #44]	; (1a001640 <gpioObtainPinInit+0x30>)
1a001614:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001618:	182c      	adds	r4, r5, r0
1a00161a:	5628      	ldrsb	r0, [r5, r0]
1a00161c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00161e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001622:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001624:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001628:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00162a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00162e:	9b02      	ldr	r3, [sp, #8]
1a001630:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001632:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001636:	9b03      	ldr	r3, [sp, #12]
1a001638:	701a      	strb	r2, [r3, #0]
}
1a00163a:	bc30      	pop	{r4, r5}
1a00163c:	4770      	bx	lr
1a00163e:	bf00      	nop
1a001640:	1a00853c 	.word	0x1a00853c

1a001644 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001644:	f110 0f02 	cmn.w	r0, #2
1a001648:	f000 80c7 	beq.w	1a0017da <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00164c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001650:	f000 80c5 	beq.w	1a0017de <gpioInit+0x19a>
{
1a001654:	b570      	push	{r4, r5, r6, lr}
1a001656:	b084      	sub	sp, #16
1a001658:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00165a:	2300      	movs	r3, #0
1a00165c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001660:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001664:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001668:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00166c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001670:	f10d 030b 	add.w	r3, sp, #11
1a001674:	9301      	str	r3, [sp, #4]
1a001676:	ab03      	add	r3, sp, #12
1a001678:	9300      	str	r3, [sp, #0]
1a00167a:	f10d 030d 	add.w	r3, sp, #13
1a00167e:	f10d 020e 	add.w	r2, sp, #14
1a001682:	f10d 010f 	add.w	r1, sp, #15
1a001686:	f7ff ffc3 	bl	1a001610 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00168a:	2c05      	cmp	r4, #5
1a00168c:	f200 80a9 	bhi.w	1a0017e2 <gpioInit+0x19e>
1a001690:	e8df f004 	tbb	[pc, r4]
1a001694:	45278109 	.word	0x45278109
1a001698:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00169a:	4853      	ldr	r0, [pc, #332]	; (1a0017e8 <gpioInit+0x1a4>)
1a00169c:	f7ff fa66 	bl	1a000b6c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0016a0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0016a2:	b004      	add	sp, #16
1a0016a4:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0016a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0016ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0016b2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0016b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0016ba:	494c      	ldr	r1, [pc, #304]	; (1a0017ec <gpioInit+0x1a8>)
1a0016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0016c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0016c4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0016c8:	2001      	movs	r0, #1
1a0016ca:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0016ce:	4c46      	ldr	r4, [pc, #280]	; (1a0017e8 <gpioInit+0x1a4>)
1a0016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0016d4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0016d8:	ea22 0201 	bic.w	r2, r2, r1
1a0016dc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0016e0:	e7df      	b.n	1a0016a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0016e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0016ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0016ee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0016f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0016f6:	493d      	ldr	r1, [pc, #244]	; (1a0017ec <gpioInit+0x1a8>)
1a0016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0016fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001700:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001704:	2001      	movs	r0, #1
1a001706:	fa00 f102 	lsl.w	r1, r0, r2
1a00170a:	4c37      	ldr	r4, [pc, #220]	; (1a0017e8 <gpioInit+0x1a4>)
1a00170c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001710:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001714:	ea22 0201 	bic.w	r2, r2, r1
1a001718:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00171c:	e7c1      	b.n	1a0016a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00171e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001722:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001726:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00172a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00172e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001732:	492e      	ldr	r1, [pc, #184]	; (1a0017ec <gpioInit+0x1a8>)
1a001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001738:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00173c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001740:	2001      	movs	r0, #1
1a001742:	fa00 f102 	lsl.w	r1, r0, r2
1a001746:	4c28      	ldr	r4, [pc, #160]	; (1a0017e8 <gpioInit+0x1a4>)
1a001748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00174c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001750:	ea22 0201 	bic.w	r2, r2, r1
1a001754:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001758:	e7a3      	b.n	1a0016a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00175a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00175e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001762:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001766:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00176a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00176e:	491f      	ldr	r1, [pc, #124]	; (1a0017ec <gpioInit+0x1a8>)
1a001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001774:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001778:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00177c:	2001      	movs	r0, #1
1a00177e:	fa00 f102 	lsl.w	r1, r0, r2
1a001782:	4c19      	ldr	r4, [pc, #100]	; (1a0017e8 <gpioInit+0x1a4>)
1a001784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001788:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00178c:	ea22 0201 	bic.w	r2, r2, r1
1a001790:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001794:	e785      	b.n	1a0016a2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001796:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00179a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00179e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017a2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0017a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017aa:	4910      	ldr	r1, [pc, #64]	; (1a0017ec <gpioInit+0x1a8>)
1a0017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0017b0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0017b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017b8:	2001      	movs	r0, #1
1a0017ba:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0017be:	4b0a      	ldr	r3, [pc, #40]	; (1a0017e8 <gpioInit+0x1a4>)
1a0017c0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0017c4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0017c8:	4331      	orrs	r1, r6
1a0017ca:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0017ce:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0017d0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0017d4:	2100      	movs	r1, #0
1a0017d6:	5499      	strb	r1, [r3, r2]
1a0017d8:	e763      	b.n	1a0016a2 <gpioInit+0x5e>
	  return FALSE;
1a0017da:	2000      	movs	r0, #0
1a0017dc:	4770      	bx	lr
	  return FALSE;
1a0017de:	2000      	movs	r0, #0
}
1a0017e0:	4770      	bx	lr
      ret_val = 0;
1a0017e2:	2000      	movs	r0, #0
1a0017e4:	e75d      	b.n	1a0016a2 <gpioInit+0x5e>
1a0017e6:	bf00      	nop
1a0017e8:	400f4000 	.word	0x400f4000
1a0017ec:	40086000 	.word	0x40086000

1a0017f0 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0017f0:	b538      	push	{r3, r4, r5, lr}
1a0017f2:	4604      	mov	r4, r0
1a0017f4:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0017f6:	4b08      	ldr	r3, [pc, #32]	; (1a001818 <i2cHardwareInit+0x28>)
1a0017f8:	f640 0208 	movw	r2, #2056	; 0x808
1a0017fc:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a001800:	f7ff f92e 	bl	1a000a60 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a001804:	4629      	mov	r1, r5
1a001806:	4620      	mov	r0, r4
1a001808:	f7ff f93c 	bl	1a000a84 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a00180c:	4903      	ldr	r1, [pc, #12]	; (1a00181c <i2cHardwareInit+0x2c>)
1a00180e:	4620      	mov	r0, r4
1a001810:	f7ff f954 	bl	1a000abc <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001814:	2001      	movs	r0, #1
1a001816:	bd38      	pop	{r3, r4, r5, pc}
1a001818:	40086000 	.word	0x40086000
1a00181c:	1a000b35 	.word	0x1a000b35

1a001820 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a001820:	b500      	push	{lr}
1a001822:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a001824:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001828:	2100      	movs	r1, #0
1a00182a:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00182e:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a001832:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a001834:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a001838:	9b07      	ldr	r3, [sp, #28]
1a00183a:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a00183c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a001840:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001844:	4669      	mov	r1, sp
1a001846:	4805      	ldr	r0, [pc, #20]	; (1a00185c <i2cHardwareRead+0x3c>)
1a001848:	f7ff fa7c 	bl	1a000d44 <Chip_I2CM_XferBlocking>
1a00184c:	b118      	cbz	r0, 1a001856 <i2cHardwareRead+0x36>
      return FALSE;
   }

   return TRUE;
1a00184e:	2001      	movs	r0, #1
}
1a001850:	b005      	add	sp, #20
1a001852:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a001856:	2000      	movs	r0, #0
1a001858:	e7fa      	b.n	1a001850 <i2cHardwareRead+0x30>
1a00185a:	bf00      	nop
1a00185c:	400a1000 	.word	0x400a1000

1a001860 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a001860:	b108      	cbz	r0, 1a001866 <i2cHardwareWrite+0x6>
      return FALSE;
1a001862:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a001864:	4770      	bx	lr
{
1a001866:	b500      	push	{lr}
1a001868:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a00186a:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a00186e:	2100      	movs	r1, #0
1a001870:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001874:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a001878:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a00187a:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a00187e:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a001880:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001884:	4669      	mov	r1, sp
1a001886:	4805      	ldr	r0, [pc, #20]	; (1a00189c <i2cHardwareWrite+0x3c>)
1a001888:	f7ff fa5c 	bl	1a000d44 <Chip_I2CM_XferBlocking>
1a00188c:	b118      	cbz	r0, 1a001896 <i2cHardwareWrite+0x36>
   return TRUE;
1a00188e:	2001      	movs	r0, #1
}
1a001890:	b005      	add	sp, #20
1a001892:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a001896:	2000      	movs	r0, #0
1a001898:	e7fa      	b.n	1a001890 <i2cHardwareWrite+0x30>
1a00189a:	bf00      	nop
1a00189c:	400a1000 	.word	0x400a1000

1a0018a0 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0018a0:	b108      	cbz	r0, 1a0018a6 <i2cInit+0x6>
      return FALSE;
1a0018a2:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a0018a4:	4770      	bx	lr
{
1a0018a6:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a0018a8:	f7ff ffa2 	bl	1a0017f0 <i2cHardwareInit>
}
1a0018ac:	bd08      	pop	{r3, pc}

1a0018ae <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0018ae:	b108      	cbz	r0, 1a0018b4 <i2cRead+0x6>
      return FALSE;
1a0018b0:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a0018b2:	4770      	bx	lr
{
1a0018b4:	b510      	push	{r4, lr}
1a0018b6:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a0018b8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a0018bc:	9403      	str	r4, [sp, #12]
1a0018be:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a0018c2:	9402      	str	r4, [sp, #8]
1a0018c4:	9c07      	ldr	r4, [sp, #28]
1a0018c6:	9401      	str	r4, [sp, #4]
1a0018c8:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a0018cc:	9400      	str	r4, [sp, #0]
1a0018ce:	f7ff ffa7 	bl	1a001820 <i2cHardwareRead>
}
1a0018d2:	b004      	add	sp, #16
1a0018d4:	bd10      	pop	{r4, pc}

1a0018d6 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0018d6:	b108      	cbz	r0, 1a0018dc <i2cWrite+0x6>
      return FALSE;
1a0018d8:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a0018da:	4770      	bx	lr
{
1a0018dc:	b510      	push	{r4, lr}
1a0018de:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a0018e0:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a0018e4:	9400      	str	r4, [sp, #0]
1a0018e6:	f7ff ffbb 	bl	1a001860 <i2cHardwareWrite>
}
1a0018ea:	b002      	add	sp, #8
1a0018ec:	bd10      	pop	{r4, pc}
1a0018ee:	Address 0x1a0018ee is out of bounds.


1a0018f0 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0018f0:	4b01      	ldr	r3, [pc, #4]	; (1a0018f8 <tickRead+0x8>)
1a0018f2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0018f6:	4770      	bx	lr
1a0018f8:	10000a08 	.word	0x10000a08

1a0018fc <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0018fc:	b118      	cbz	r0, 1a001906 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0018fe:	4b04      	ldr	r3, [pc, #16]	; (1a001910 <tickPowerSet+0x14>)
1a001900:	2207      	movs	r2, #7
1a001902:	601a      	str	r2, [r3, #0]
1a001904:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001906:	4b02      	ldr	r3, [pc, #8]	; (1a001910 <tickPowerSet+0x14>)
1a001908:	2200      	movs	r2, #0
1a00190a:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a00190c:	4770      	bx	lr
1a00190e:	bf00      	nop
1a001910:	e000e010 	.word	0xe000e010

1a001914 <tickInit>:
{
1a001914:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001916:	ea50 0401 	orrs.w	r4, r0, r1
1a00191a:	d02a      	beq.n	1a001972 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00191c:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001920:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001924:	2b00      	cmp	r3, #0
1a001926:	bf08      	it	eq
1a001928:	2a32      	cmpeq	r2, #50	; 0x32
1a00192a:	d227      	bcs.n	1a00197c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a00192c:	4b14      	ldr	r3, [pc, #80]	; (1a001980 <tickInit+0x6c>)
1a00192e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001932:	4b14      	ldr	r3, [pc, #80]	; (1a001984 <tickInit+0x70>)
1a001934:	681b      	ldr	r3, [r3, #0]
1a001936:	fba3 4500 	umull	r4, r5, r3, r0
1a00193a:	fb03 5501 	mla	r5, r3, r1, r5
1a00193e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001942:	2300      	movs	r3, #0
1a001944:	4620      	mov	r0, r4
1a001946:	4629      	mov	r1, r5
1a001948:	f001 faf6 	bl	1a002f38 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a00194c:	3801      	subs	r0, #1
1a00194e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001952:	d209      	bcs.n	1a001968 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001954:	4b0c      	ldr	r3, [pc, #48]	; (1a001988 <tickInit+0x74>)
1a001956:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001958:	4a0c      	ldr	r2, [pc, #48]	; (1a00198c <tickInit+0x78>)
1a00195a:	21e0      	movs	r1, #224	; 0xe0
1a00195c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001960:	2200      	movs	r2, #0
1a001962:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001964:	2207      	movs	r2, #7
1a001966:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001968:	2001      	movs	r0, #1
1a00196a:	f7ff ffc7 	bl	1a0018fc <tickPowerSet>
      bool_t ret_val = 1;
1a00196e:	2001      	movs	r0, #1
}
1a001970:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001972:	2000      	movs	r0, #0
1a001974:	f7ff ffc2 	bl	1a0018fc <tickPowerSet>
         ret_val = 0;
1a001978:	2000      	movs	r0, #0
1a00197a:	e7f9      	b.n	1a001970 <tickInit+0x5c>
            ret_val = 0;
1a00197c:	2000      	movs	r0, #0
1a00197e:	e7f7      	b.n	1a001970 <tickInit+0x5c>
1a001980:	10000040 	.word	0x10000040
1a001984:	10000ba4 	.word	0x10000ba4
1a001988:	e000e010 	.word	0xe000e010
1a00198c:	e000ed00 	.word	0xe000ed00

1a001990 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001990:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001992:	4a07      	ldr	r2, [pc, #28]	; (1a0019b0 <SysTick_Handler+0x20>)
1a001994:	6813      	ldr	r3, [r2, #0]
1a001996:	6851      	ldr	r1, [r2, #4]
1a001998:	3301      	adds	r3, #1
1a00199a:	f141 0100 	adc.w	r1, r1, #0
1a00199e:	6013      	str	r3, [r2, #0]
1a0019a0:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0019a2:	4b04      	ldr	r3, [pc, #16]	; (1a0019b4 <SysTick_Handler+0x24>)
1a0019a4:	681b      	ldr	r3, [r3, #0]
1a0019a6:	b113      	cbz	r3, 1a0019ae <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0019a8:	4a03      	ldr	r2, [pc, #12]	; (1a0019b8 <SysTick_Handler+0x28>)
1a0019aa:	6810      	ldr	r0, [r2, #0]
1a0019ac:	4798      	blx	r3
   }
}
1a0019ae:	bd08      	pop	{r3, pc}
1a0019b0:	10000a08 	.word	0x10000a08
1a0019b4:	10000a10 	.word	0x10000a10
1a0019b8:	10000a04 	.word	0x10000a04

1a0019bc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0019bc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0019be:	4b04      	ldr	r3, [pc, #16]	; (1a0019d0 <USB0_IRQHandler+0x14>)
1a0019c0:	681b      	ldr	r3, [r3, #0]
1a0019c2:	681b      	ldr	r3, [r3, #0]
1a0019c4:	68db      	ldr	r3, [r3, #12]
1a0019c6:	4a03      	ldr	r2, [pc, #12]	; (1a0019d4 <USB0_IRQHandler+0x18>)
1a0019c8:	6810      	ldr	r0, [r2, #0]
1a0019ca:	4798      	blx	r3
}
1a0019cc:	bd08      	pop	{r3, pc}
1a0019ce:	bf00      	nop
1a0019d0:	10000ba8 	.word	0x10000ba8
1a0019d4:	10000a14 	.word	0x10000a14

1a0019d8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0019d8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0019da:	f7ff fa71 	bl	1a000ec0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0019de:	4b1a      	ldr	r3, [pc, #104]	; (1a001a48 <boardInit+0x70>)
1a0019e0:	6818      	ldr	r0, [r3, #0]
1a0019e2:	f7ff fe07 	bl	1a0015f4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0019e6:	2001      	movs	r0, #1
1a0019e8:	2100      	movs	r1, #0
1a0019ea:	f7ff ff93 	bl	1a001914 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0019ee:	2105      	movs	r1, #5
1a0019f0:	2000      	movs	r0, #0
1a0019f2:	f7ff fe27 	bl	1a001644 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0019f6:	2100      	movs	r1, #0
1a0019f8:	2024      	movs	r0, #36	; 0x24
1a0019fa:	f7ff fe23 	bl	1a001644 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0019fe:	2100      	movs	r1, #0
1a001a00:	2025      	movs	r0, #37	; 0x25
1a001a02:	f7ff fe1f 	bl	1a001644 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001a06:	2100      	movs	r1, #0
1a001a08:	2026      	movs	r0, #38	; 0x26
1a001a0a:	f7ff fe1b 	bl	1a001644 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001a0e:	2100      	movs	r1, #0
1a001a10:	2027      	movs	r0, #39	; 0x27
1a001a12:	f7ff fe17 	bl	1a001644 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001a16:	2101      	movs	r1, #1
1a001a18:	2028      	movs	r0, #40	; 0x28
1a001a1a:	f7ff fe13 	bl	1a001644 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001a1e:	2101      	movs	r1, #1
1a001a20:	2029      	movs	r0, #41	; 0x29
1a001a22:	f7ff fe0f 	bl	1a001644 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001a26:	2101      	movs	r1, #1
1a001a28:	202a      	movs	r0, #42	; 0x2a
1a001a2a:	f7ff fe0b 	bl	1a001644 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001a2e:	2101      	movs	r1, #1
1a001a30:	202b      	movs	r0, #43	; 0x2b
1a001a32:	f7ff fe07 	bl	1a001644 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001a36:	2101      	movs	r1, #1
1a001a38:	202c      	movs	r0, #44	; 0x2c
1a001a3a:	f7ff fe03 	bl	1a001644 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001a3e:	2101      	movs	r1, #1
1a001a40:	202d      	movs	r0, #45	; 0x2d
1a001a42:	f7ff fdff 	bl	1a001644 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001a46:	bd08      	pop	{r3, pc}
1a001a48:	10000ba4 	.word	0x10000ba4

1a001a4c <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001a50:	4680      	mov	r8, r0
1a001a52:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001a54:	f7ff ff4c 	bl	1a0018f0 <tickRead>
1a001a58:	4606      	mov	r6, r0
1a001a5a:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001a5c:	f7ff ff48 	bl	1a0018f0 <tickRead>
1a001a60:	1b84      	subs	r4, r0, r6
1a001a62:	eb61 0507 	sbc.w	r5, r1, r7
1a001a66:	4b06      	ldr	r3, [pc, #24]	; (1a001a80 <delay+0x34>)
1a001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001a6c:	4640      	mov	r0, r8
1a001a6e:	4649      	mov	r1, r9
1a001a70:	f001 fa62 	bl	1a002f38 <__aeabi_uldivmod>
1a001a74:	428d      	cmp	r5, r1
1a001a76:	bf08      	it	eq
1a001a78:	4284      	cmpeq	r4, r0
1a001a7a:	d3ef      	bcc.n	1a001a5c <delay+0x10>
}
1a001a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001a80:	10000040 	.word	0x10000040

1a001a84 <mpu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t mpu9250InitializeControlStructure( void )
{
	control._tempScale = 333.87f;
1a001a84:	4b1b      	ldr	r3, [pc, #108]	; (1a001af4 <mpu9250InitializeControlStructure+0x70>)
1a001a86:	4a1c      	ldr	r2, [pc, #112]	; (1a001af8 <mpu9250InitializeControlStructure+0x74>)
1a001a88:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a001a8a:	4a1c      	ldr	r2, [pc, #112]	; (1a001afc <mpu9250InitializeControlStructure+0x78>)
1a001a8c:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a001a8e:	2264      	movs	r2, #100	; 0x64
1a001a90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a001a94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a001a98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a001a9c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a001aa0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a001aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a001aa8:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a001aac:	4914      	ldr	r1, [pc, #80]	; (1a001b00 <mpu9250InitializeControlStructure+0x7c>)
1a001aae:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a001ab2:	2108      	movs	r1, #8
1a001ab4:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a001ab8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a001abc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a001ac0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a001ac4:	2200      	movs	r2, #0
1a001ac6:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a001aca:	2101      	movs	r1, #1
1a001acc:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a001ad0:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a001ad4:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a001ad8:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a001adc:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a001ae0:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a001ae4:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a001ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a001aec:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a001af0:	4770      	bx	lr
1a001af2:	bf00      	nop
1a001af4:	10000a18 	.word	0x10000a18
1a001af8:	43a6ef5c 	.word	0x43a6ef5c
1a001afc:	41a80000 	.word	0x41a80000
1a001b00:	3e99999a 	.word	0x3e99999a

1a001b04 <mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a001b04:	b500      	push	{lr}
1a001b06:	b087      	sub	sp, #28
1a001b08:	f88d 0017 	strb.w	r0, [sp, #23]
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a001b0c:	4a0a      	ldr	r2, [pc, #40]	; (1a001b38 <mpu9250ReadRegisters+0x34>)
1a001b0e:	f812 0b24 	ldrb.w	r0, [r2], #36
1a001b12:	2301      	movs	r3, #1
1a001b14:	9303      	str	r3, [sp, #12]
1a001b16:	9102      	str	r1, [sp, #8]
1a001b18:	9201      	str	r2, [sp, #4]
1a001b1a:	9300      	str	r3, [sp, #0]
1a001b1c:	f10d 0217 	add.w	r2, sp, #23
1a001b20:	4601      	mov	r1, r0
1a001b22:	2000      	movs	r0, #0
1a001b24:	f7ff fec3 	bl	1a0018ae <i2cRead>
1a001b28:	b118      	cbz	r0, 1a001b32 <mpu9250ReadRegisters+0x2e>
		return 1;
1a001b2a:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a001b2c:	b007      	add	sp, #28
1a001b2e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
1a001b32:	f04f 30ff 	mov.w	r0, #4294967295
1a001b36:	e7f9      	b.n	1a001b2c <mpu9250ReadRegisters+0x28>
1a001b38:	10000a18 	.word	0x10000a18

1a001b3c <mpu9250WhoAmI>:
		return -6;
	}
}

static int8_t mpu9250WhoAmI( void )
{
1a001b3c:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a001b3e:	2101      	movs	r1, #1
1a001b40:	2075      	movs	r0, #117	; 0x75
1a001b42:	f7ff ffdf 	bl	1a001b04 <mpu9250ReadRegisters>
1a001b46:	2800      	cmp	r0, #0
1a001b48:	db03      	blt.n	1a001b52 <mpu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a001b4a:	4b03      	ldr	r3, [pc, #12]	; (1a001b58 <mpu9250WhoAmI+0x1c>)
1a001b4c:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a001b50:	bd08      	pop	{r3, pc}
		return -1;
1a001b52:	f04f 30ff 	mov.w	r0, #4294967295
1a001b56:	e7fb      	b.n	1a001b50 <mpu9250WhoAmI+0x14>
1a001b58:	10000a18 	.word	0x10000a18

1a001b5c <mpu9250WriteRegister>:
{
1a001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001b5e:	b085      	sub	sp, #20
1a001b60:	4606      	mov	r6, r0
1a001b62:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a001b64:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a001b68:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a001b6c:	4d0d      	ldr	r5, [pc, #52]	; (1a001ba4 <mpu9250WriteRegister+0x48>)
1a001b6e:	2701      	movs	r7, #1
1a001b70:	9700      	str	r7, [sp, #0]
1a001b72:	2302      	movs	r3, #2
1a001b74:	aa03      	add	r2, sp, #12
1a001b76:	7829      	ldrb	r1, [r5, #0]
1a001b78:	2000      	movs	r0, #0
1a001b7a:	f7ff feac 	bl	1a0018d6 <i2cWrite>
	delay(10);
1a001b7e:	200a      	movs	r0, #10
1a001b80:	2100      	movs	r1, #0
1a001b82:	f7ff ff63 	bl	1a001a4c <delay>
	mpu9250ReadRegisters(subAddress,1);
1a001b86:	4639      	mov	r1, r7
1a001b88:	4630      	mov	r0, r6
1a001b8a:	f7ff ffbb 	bl	1a001b04 <mpu9250ReadRegisters>
	if(control._buffer[0] == data) {
1a001b8e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a001b92:	42a3      	cmp	r3, r4
1a001b94:	d003      	beq.n	1a001b9e <mpu9250WriteRegister+0x42>
      return -1;
1a001b96:	f04f 30ff 	mov.w	r0, #4294967295
}
1a001b9a:	b005      	add	sp, #20
1a001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 1;
1a001b9e:	4638      	mov	r0, r7
1a001ba0:	e7fb      	b.n	1a001b9a <mpu9250WriteRegister+0x3e>
1a001ba2:	bf00      	nop
1a001ba4:	10000a18 	.word	0x10000a18

1a001ba8 <mpu9250ReadAK8963Registers>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a001ba8:	b538      	push	{r3, r4, r5, lr}
1a001baa:	4605      	mov	r5, r0
1a001bac:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a001bae:	218c      	movs	r1, #140	; 0x8c
1a001bb0:	2025      	movs	r0, #37	; 0x25
1a001bb2:	f7ff ffd3 	bl	1a001b5c <mpu9250WriteRegister>
1a001bb6:	2800      	cmp	r0, #0
1a001bb8:	db18      	blt.n	1a001bec <mpu9250ReadAK8963Registers+0x44>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a001bba:	4629      	mov	r1, r5
1a001bbc:	2026      	movs	r0, #38	; 0x26
1a001bbe:	f7ff ffcd 	bl	1a001b5c <mpu9250WriteRegister>
1a001bc2:	2800      	cmp	r0, #0
1a001bc4:	db15      	blt.n	1a001bf2 <mpu9250ReadAK8963Registers+0x4a>
		return -2;
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a001bc6:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a001bca:	2027      	movs	r0, #39	; 0x27
1a001bcc:	f7ff ffc6 	bl	1a001b5c <mpu9250WriteRegister>
1a001bd0:	2800      	cmp	r0, #0
1a001bd2:	db11      	blt.n	1a001bf8 <mpu9250ReadAK8963Registers+0x50>
		return -3;
	}
	delay(1); // takes some time for these registers to fill
1a001bd4:	2001      	movs	r0, #1
1a001bd6:	2100      	movs	r1, #0
1a001bd8:	f7ff ff38 	bl	1a001a4c <delay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a001bdc:	4621      	mov	r1, r4
1a001bde:	2049      	movs	r0, #73	; 0x49
1a001be0:	f7ff ff90 	bl	1a001b04 <mpu9250ReadRegisters>
1a001be4:	4b06      	ldr	r3, [pc, #24]	; (1a001c00 <mpu9250ReadAK8963Registers+0x58>)
1a001be6:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
}
1a001bea:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001bec:	f04f 30ff 	mov.w	r0, #4294967295
1a001bf0:	e7fb      	b.n	1a001bea <mpu9250ReadAK8963Registers+0x42>
		return -2;
1a001bf2:	f06f 0001 	mvn.w	r0, #1
1a001bf6:	e7f8      	b.n	1a001bea <mpu9250ReadAK8963Registers+0x42>
		return -3;
1a001bf8:	f06f 0002 	mvn.w	r0, #2
1a001bfc:	e7f5      	b.n	1a001bea <mpu9250ReadAK8963Registers+0x42>
1a001bfe:	bf00      	nop
1a001c00:	10000a18 	.word	0x10000a18

1a001c04 <mpu9250WhoAmIAK8963>:
{
1a001c04:	b508      	push	{r3, lr}
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a001c06:	2101      	movs	r1, #1
1a001c08:	2000      	movs	r0, #0
1a001c0a:	f7ff ffcd 	bl	1a001ba8 <mpu9250ReadAK8963Registers>
1a001c0e:	2800      	cmp	r0, #0
1a001c10:	db03      	blt.n	1a001c1a <mpu9250WhoAmIAK8963+0x16>
	return control._buffer[0];
1a001c12:	4b03      	ldr	r3, [pc, #12]	; (1a001c20 <mpu9250WhoAmIAK8963+0x1c>)
1a001c14:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a001c18:	bd08      	pop	{r3, pc}
		return -1;
1a001c1a:	f04f 30ff 	mov.w	r0, #4294967295
1a001c1e:	e7fb      	b.n	1a001c18 <mpu9250WhoAmIAK8963+0x14>
1a001c20:	10000a18 	.word	0x10000a18

1a001c24 <mpu9250WriteAK8963Register>:
{
1a001c24:	b538      	push	{r3, r4, r5, lr}
1a001c26:	4604      	mov	r4, r0
1a001c28:	460d      	mov	r5, r1
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a001c2a:	210c      	movs	r1, #12
1a001c2c:	2025      	movs	r0, #37	; 0x25
1a001c2e:	f7ff ff95 	bl	1a001b5c <mpu9250WriteRegister>
1a001c32:	2800      	cmp	r0, #0
1a001c34:	db1e      	blt.n	1a001c74 <mpu9250WriteAK8963Register+0x50>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a001c36:	4621      	mov	r1, r4
1a001c38:	2026      	movs	r0, #38	; 0x26
1a001c3a:	f7ff ff8f 	bl	1a001b5c <mpu9250WriteRegister>
1a001c3e:	2800      	cmp	r0, #0
1a001c40:	db1b      	blt.n	1a001c7a <mpu9250WriteAK8963Register+0x56>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a001c42:	4629      	mov	r1, r5
1a001c44:	2063      	movs	r0, #99	; 0x63
1a001c46:	f7ff ff89 	bl	1a001b5c <mpu9250WriteRegister>
1a001c4a:	2800      	cmp	r0, #0
1a001c4c:	db18      	blt.n	1a001c80 <mpu9250WriteAK8963Register+0x5c>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a001c4e:	2181      	movs	r1, #129	; 0x81
1a001c50:	2027      	movs	r0, #39	; 0x27
1a001c52:	f7ff ff83 	bl	1a001b5c <mpu9250WriteRegister>
1a001c56:	2800      	cmp	r0, #0
1a001c58:	db15      	blt.n	1a001c86 <mpu9250WriteAK8963Register+0x62>
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
1a001c5a:	2101      	movs	r1, #1
1a001c5c:	4620      	mov	r0, r4
1a001c5e:	f7ff ffa3 	bl	1a001ba8 <mpu9250ReadAK8963Registers>
1a001c62:	2800      	cmp	r0, #0
1a001c64:	db12      	blt.n	1a001c8c <mpu9250WriteAK8963Register+0x68>
	if(control._buffer[0] == data) {
1a001c66:	4b0c      	ldr	r3, [pc, #48]	; (1a001c98 <mpu9250WriteAK8963Register+0x74>)
1a001c68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a001c6c:	42ab      	cmp	r3, r5
1a001c6e:	d110      	bne.n	1a001c92 <mpu9250WriteAK8963Register+0x6e>
		return 1;
1a001c70:	2001      	movs	r0, #1
}
1a001c72:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001c74:	f04f 30ff 	mov.w	r0, #4294967295
1a001c78:	e7fb      	b.n	1a001c72 <mpu9250WriteAK8963Register+0x4e>
		return -2;
1a001c7a:	f06f 0001 	mvn.w	r0, #1
1a001c7e:	e7f8      	b.n	1a001c72 <mpu9250WriteAK8963Register+0x4e>
		return -3;
1a001c80:	f06f 0002 	mvn.w	r0, #2
1a001c84:	e7f5      	b.n	1a001c72 <mpu9250WriteAK8963Register+0x4e>
		return -4;
1a001c86:	f06f 0003 	mvn.w	r0, #3
1a001c8a:	e7f2      	b.n	1a001c72 <mpu9250WriteAK8963Register+0x4e>
		return -5;
1a001c8c:	f06f 0004 	mvn.w	r0, #4
1a001c90:	e7ef      	b.n	1a001c72 <mpu9250WriteAK8963Register+0x4e>
		return -6;
1a001c92:	f06f 0005 	mvn.w	r0, #5
1a001c96:	e7ec      	b.n	1a001c72 <mpu9250WriteAK8963Register+0x4e>
1a001c98:	10000a18 	.word	0x10000a18

1a001c9c <mpu9250SetGyroRange>:
	}
	return 1;
}

static int8_t mpu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a001c9c:	b510      	push	{r4, lr}
1a001c9e:	4604      	mov	r4, r0
	switch(range) {
1a001ca0:	2803      	cmp	r0, #3
1a001ca2:	d80c      	bhi.n	1a001cbe <mpu9250SetGyroRange+0x22>
1a001ca4:	e8df f000 	tbb	[pc, r0]
1a001ca8:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a001cac:	2100      	movs	r1, #0
1a001cae:	201b      	movs	r0, #27
1a001cb0:	f7ff ff54 	bl	1a001b5c <mpu9250WriteRegister>
1a001cb4:	2800      	cmp	r0, #0
1a001cb6:	db25      	blt.n	1a001d04 <mpu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a001cb8:	4b18      	ldr	r3, [pc, #96]	; (1a001d1c <mpu9250SetGyroRange+0x80>)
1a001cba:	4a19      	ldr	r2, [pc, #100]	; (1a001d20 <mpu9250SetGyroRange+0x84>)
1a001cbc:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
		  break;
		}
	}
	control._gyroRange = range;
1a001cbe:	4b17      	ldr	r3, [pc, #92]	; (1a001d1c <mpu9250SetGyroRange+0x80>)
1a001cc0:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a001cc4:	2001      	movs	r0, #1
}
1a001cc6:	bd10      	pop	{r4, pc}
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a001cc8:	2108      	movs	r1, #8
1a001cca:	201b      	movs	r0, #27
1a001ccc:	f7ff ff46 	bl	1a001b5c <mpu9250WriteRegister>
1a001cd0:	2800      	cmp	r0, #0
1a001cd2:	db1a      	blt.n	1a001d0a <mpu9250SetGyroRange+0x6e>
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a001cd4:	4b11      	ldr	r3, [pc, #68]	; (1a001d1c <mpu9250SetGyroRange+0x80>)
1a001cd6:	4a13      	ldr	r2, [pc, #76]	; (1a001d24 <mpu9250SetGyroRange+0x88>)
1a001cd8:	609a      	str	r2, [r3, #8]
		  break;
1a001cda:	e7f0      	b.n	1a001cbe <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a001cdc:	2110      	movs	r1, #16
1a001cde:	201b      	movs	r0, #27
1a001ce0:	f7ff ff3c 	bl	1a001b5c <mpu9250WriteRegister>
1a001ce4:	2800      	cmp	r0, #0
1a001ce6:	db13      	blt.n	1a001d10 <mpu9250SetGyroRange+0x74>
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a001ce8:	4b0c      	ldr	r3, [pc, #48]	; (1a001d1c <mpu9250SetGyroRange+0x80>)
1a001cea:	4a0f      	ldr	r2, [pc, #60]	; (1a001d28 <mpu9250SetGyroRange+0x8c>)
1a001cec:	609a      	str	r2, [r3, #8]
		  break;
1a001cee:	e7e6      	b.n	1a001cbe <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a001cf0:	2118      	movs	r1, #24
1a001cf2:	201b      	movs	r0, #27
1a001cf4:	f7ff ff32 	bl	1a001b5c <mpu9250WriteRegister>
1a001cf8:	2800      	cmp	r0, #0
1a001cfa:	db0c      	blt.n	1a001d16 <mpu9250SetGyroRange+0x7a>
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a001cfc:	4b07      	ldr	r3, [pc, #28]	; (1a001d1c <mpu9250SetGyroRange+0x80>)
1a001cfe:	4a0b      	ldr	r2, [pc, #44]	; (1a001d2c <mpu9250SetGyroRange+0x90>)
1a001d00:	609a      	str	r2, [r3, #8]
		  break;
1a001d02:	e7dc      	b.n	1a001cbe <mpu9250SetGyroRange+0x22>
			return -1;
1a001d04:	f04f 30ff 	mov.w	r0, #4294967295
1a001d08:	e7dd      	b.n	1a001cc6 <mpu9250SetGyroRange+0x2a>
			return -1;
1a001d0a:	f04f 30ff 	mov.w	r0, #4294967295
1a001d0e:	e7da      	b.n	1a001cc6 <mpu9250SetGyroRange+0x2a>
			return -1;
1a001d10:	f04f 30ff 	mov.w	r0, #4294967295
1a001d14:	e7d7      	b.n	1a001cc6 <mpu9250SetGyroRange+0x2a>
			return -1;
1a001d16:	f04f 30ff 	mov.w	r0, #4294967295
1a001d1a:	e7d4      	b.n	1a001cc6 <mpu9250SetGyroRange+0x2a>
1a001d1c:	10000a18 	.word	0x10000a18
1a001d20:	390ba0e4 	.word	0x390ba0e4
1a001d24:	398ba0e4 	.word	0x398ba0e4
1a001d28:	3a0ba0e4 	.word	0x3a0ba0e4
1a001d2c:	3a8ba0e4 	.word	0x3a8ba0e4

1a001d30 <mpu9250SetDlpfBandwidth>:

static int8_t mpu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a001d30:	b510      	push	{r4, lr}
1a001d32:	4604      	mov	r4, r0
	switch (bandwidth) {
1a001d34:	2805      	cmp	r0, #5
1a001d36:	d810      	bhi.n	1a001d5a <mpu9250SetDlpfBandwidth+0x2a>
1a001d38:	e8df f000 	tbb	[pc, r0]
1a001d3c:	32231403 	.word	0x32231403
1a001d40:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
1a001d42:	2101      	movs	r1, #1
1a001d44:	201d      	movs	r0, #29
1a001d46:	f7ff ff09 	bl	1a001b5c <mpu9250WriteRegister>
1a001d4a:	2800      	cmp	r0, #0
1a001d4c:	db55      	blt.n	1a001dfa <mpu9250SetDlpfBandwidth+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a001d4e:	2101      	movs	r1, #1
1a001d50:	201a      	movs	r0, #26
1a001d52:	f7ff ff03 	bl	1a001b5c <mpu9250WriteRegister>
1a001d56:	2800      	cmp	r0, #0
1a001d58:	db52      	blt.n	1a001e00 <mpu9250SetDlpfBandwidth+0xd0>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a001d5a:	4b32      	ldr	r3, [pc, #200]	; (1a001e24 <mpu9250SetDlpfBandwidth+0xf4>)
1a001d5c:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a001d60:	2001      	movs	r0, #1
}
1a001d62:	bd10      	pop	{r4, pc}
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
1a001d64:	2102      	movs	r1, #2
1a001d66:	201d      	movs	r0, #29
1a001d68:	f7ff fef8 	bl	1a001b5c <mpu9250WriteRegister>
1a001d6c:	2800      	cmp	r0, #0
1a001d6e:	db4a      	blt.n	1a001e06 <mpu9250SetDlpfBandwidth+0xd6>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
1a001d70:	2102      	movs	r1, #2
1a001d72:	201a      	movs	r0, #26
1a001d74:	f7ff fef2 	bl	1a001b5c <mpu9250WriteRegister>
1a001d78:	2800      	cmp	r0, #0
1a001d7a:	daee      	bge.n	1a001d5a <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001d7c:	f06f 0001 	mvn.w	r0, #1
1a001d80:	e7ef      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
1a001d82:	2103      	movs	r1, #3
1a001d84:	201d      	movs	r0, #29
1a001d86:	f7ff fee9 	bl	1a001b5c <mpu9250WriteRegister>
1a001d8a:	2800      	cmp	r0, #0
1a001d8c:	db3e      	blt.n	1a001e0c <mpu9250SetDlpfBandwidth+0xdc>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
1a001d8e:	2103      	movs	r1, #3
1a001d90:	201a      	movs	r0, #26
1a001d92:	f7ff fee3 	bl	1a001b5c <mpu9250WriteRegister>
1a001d96:	2800      	cmp	r0, #0
1a001d98:	dadf      	bge.n	1a001d5a <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001d9a:	f06f 0001 	mvn.w	r0, #1
1a001d9e:	e7e0      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
1a001da0:	2104      	movs	r1, #4
1a001da2:	201d      	movs	r0, #29
1a001da4:	f7ff feda 	bl	1a001b5c <mpu9250WriteRegister>
1a001da8:	2800      	cmp	r0, #0
1a001daa:	db32      	blt.n	1a001e12 <mpu9250SetDlpfBandwidth+0xe2>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
1a001dac:	2104      	movs	r1, #4
1a001dae:	201a      	movs	r0, #26
1a001db0:	f7ff fed4 	bl	1a001b5c <mpu9250WriteRegister>
1a001db4:	2800      	cmp	r0, #0
1a001db6:	dad0      	bge.n	1a001d5a <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001db8:	f06f 0001 	mvn.w	r0, #1
1a001dbc:	e7d1      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
1a001dbe:	2105      	movs	r1, #5
1a001dc0:	201d      	movs	r0, #29
1a001dc2:	f7ff fecb 	bl	1a001b5c <mpu9250WriteRegister>
1a001dc6:	2800      	cmp	r0, #0
1a001dc8:	db26      	blt.n	1a001e18 <mpu9250SetDlpfBandwidth+0xe8>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
1a001dca:	2105      	movs	r1, #5
1a001dcc:	201a      	movs	r0, #26
1a001dce:	f7ff fec5 	bl	1a001b5c <mpu9250WriteRegister>
1a001dd2:	2800      	cmp	r0, #0
1a001dd4:	dac1      	bge.n	1a001d5a <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001dd6:	f06f 0001 	mvn.w	r0, #1
1a001dda:	e7c2      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
1a001ddc:	2106      	movs	r1, #6
1a001dde:	201d      	movs	r0, #29
1a001de0:	f7ff febc 	bl	1a001b5c <mpu9250WriteRegister>
1a001de4:	2800      	cmp	r0, #0
1a001de6:	db1a      	blt.n	1a001e1e <mpu9250SetDlpfBandwidth+0xee>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
1a001de8:	2106      	movs	r1, #6
1a001dea:	201a      	movs	r0, #26
1a001dec:	f7ff feb6 	bl	1a001b5c <mpu9250WriteRegister>
1a001df0:	2800      	cmp	r0, #0
1a001df2:	dab2      	bge.n	1a001d5a <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a001df4:	f06f 0001 	mvn.w	r0, #1
1a001df8:	e7b3      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001dfa:	f04f 30ff 	mov.w	r0, #4294967295
1a001dfe:	e7b0      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
				return -2;
1a001e00:	f06f 0001 	mvn.w	r0, #1
1a001e04:	e7ad      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001e06:	f04f 30ff 	mov.w	r0, #4294967295
1a001e0a:	e7aa      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001e0c:	f04f 30ff 	mov.w	r0, #4294967295
1a001e10:	e7a7      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001e12:	f04f 30ff 	mov.w	r0, #4294967295
1a001e16:	e7a4      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001e18:	f04f 30ff 	mov.w	r0, #4294967295
1a001e1c:	e7a1      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a001e1e:	f04f 30ff 	mov.w	r0, #4294967295
1a001e22:	e79e      	b.n	1a001d62 <mpu9250SetDlpfBandwidth+0x32>
1a001e24:	10000a18 	.word	0x10000a18

1a001e28 <mpu9250SetSrd>:

static int8_t mpu9250SetSrd( uint8_t srd )
{
1a001e28:	b510      	push	{r4, lr}
1a001e2a:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a001e2c:	2113      	movs	r1, #19
1a001e2e:	2019      	movs	r0, #25
1a001e30:	f7ff fe94 	bl	1a001b5c <mpu9250WriteRegister>
1a001e34:	2800      	cmp	r0, #0
1a001e36:	db3d      	blt.n	1a001eb4 <mpu9250SetSrd+0x8c>
		return -1;
	}
	if (srd > 9) {
1a001e38:	2c09      	cmp	r4, #9
1a001e3a:	d922      	bls.n	1a001e82 <mpu9250SetSrd+0x5a>
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001e3c:	2100      	movs	r1, #0
1a001e3e:	200a      	movs	r0, #10
1a001e40:	f7ff fef0 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a001e44:	2800      	cmp	r0, #0
1a001e46:	db38      	blt.n	1a001eba <mpu9250SetSrd+0x92>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a001e48:	2064      	movs	r0, #100	; 0x64
1a001e4a:	2100      	movs	r1, #0
1a001e4c:	f7ff fdfe 	bl	1a001a4c <delay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a001e50:	2112      	movs	r1, #18
1a001e52:	200a      	movs	r0, #10
1a001e54:	f7ff fee6 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a001e58:	2800      	cmp	r0, #0
1a001e5a:	db31      	blt.n	1a001ec0 <mpu9250SetSrd+0x98>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a001e5c:	2064      	movs	r0, #100	; 0x64
1a001e5e:	2100      	movs	r1, #0
1a001e60:	f7ff fdf4 	bl	1a001a4c <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a001e64:	2107      	movs	r1, #7
1a001e66:	2003      	movs	r0, #3
1a001e68:	f7ff fe9e 	bl	1a001ba8 <mpu9250ReadAK8963Registers>
		delay(100); // long wait between AK8963 mode changes
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a001e6c:	4621      	mov	r1, r4
1a001e6e:	2019      	movs	r0, #25
1a001e70:	f7ff fe74 	bl	1a001b5c <mpu9250WriteRegister>
1a001e74:	2800      	cmp	r0, #0
1a001e76:	db2c      	blt.n	1a001ed2 <mpu9250SetSrd+0xaa>
		return -4;
	}
	control._srd = srd;
1a001e78:	4b17      	ldr	r3, [pc, #92]	; (1a001ed8 <mpu9250SetSrd+0xb0>)
1a001e7a:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a001e7e:	2001      	movs	r0, #1
}
1a001e80:	bd10      	pop	{r4, pc}
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001e82:	2100      	movs	r1, #0
1a001e84:	200a      	movs	r0, #10
1a001e86:	f7ff fecd 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a001e8a:	2800      	cmp	r0, #0
1a001e8c:	db1b      	blt.n	1a001ec6 <mpu9250SetSrd+0x9e>
		delay(100); // long wait between AK8963 mode changes
1a001e8e:	2064      	movs	r0, #100	; 0x64
1a001e90:	2100      	movs	r1, #0
1a001e92:	f7ff fddb 	bl	1a001a4c <delay>
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a001e96:	2116      	movs	r1, #22
1a001e98:	200a      	movs	r0, #10
1a001e9a:	f7ff fec3 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a001e9e:	2800      	cmp	r0, #0
1a001ea0:	db14      	blt.n	1a001ecc <mpu9250SetSrd+0xa4>
		delay(100); // long wait between AK8963 mode changes
1a001ea2:	2064      	movs	r0, #100	; 0x64
1a001ea4:	2100      	movs	r1, #0
1a001ea6:	f7ff fdd1 	bl	1a001a4c <delay>
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a001eaa:	2107      	movs	r1, #7
1a001eac:	2003      	movs	r0, #3
1a001eae:	f7ff fe7b 	bl	1a001ba8 <mpu9250ReadAK8963Registers>
1a001eb2:	e7db      	b.n	1a001e6c <mpu9250SetSrd+0x44>
		return -1;
1a001eb4:	f04f 30ff 	mov.w	r0, #4294967295
1a001eb8:	e7e2      	b.n	1a001e80 <mpu9250SetSrd+0x58>
			return -2;
1a001eba:	f06f 0001 	mvn.w	r0, #1
1a001ebe:	e7df      	b.n	1a001e80 <mpu9250SetSrd+0x58>
			return -3;
1a001ec0:	f06f 0002 	mvn.w	r0, #2
1a001ec4:	e7dc      	b.n	1a001e80 <mpu9250SetSrd+0x58>
			return -2;
1a001ec6:	f06f 0001 	mvn.w	r0, #1
1a001eca:	e7d9      	b.n	1a001e80 <mpu9250SetSrd+0x58>
			return -3;
1a001ecc:	f06f 0002 	mvn.w	r0, #2
1a001ed0:	e7d6      	b.n	1a001e80 <mpu9250SetSrd+0x58>
		return -4;
1a001ed2:	f06f 0003 	mvn.w	r0, #3
1a001ed6:	e7d3      	b.n	1a001e80 <mpu9250SetSrd+0x58>
1a001ed8:	10000a18 	.word	0x10000a18

1a001edc <mpu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
1a001edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001ee0:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a001ee2:	2115      	movs	r1, #21
1a001ee4:	203b      	movs	r0, #59	; 0x3b
1a001ee6:	f7ff fe0d 	bl	1a001b04 <mpu9250ReadRegisters>
1a001eea:	2800      	cmp	r0, #0
1a001eec:	f000 8136 	beq.w	1a00215c <mpu9250Read+0x280>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a001ef0:	4b9b      	ldr	r3, [pc, #620]	; (1a002160 <mpu9250Read+0x284>)
1a001ef2:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a001ef6:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a001efa:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a001efe:	fa0f fb81 	sxth.w	fp, r1
1a001f02:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a001f06:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a001f0a:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a001f0e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a001f12:	b209      	sxth	r1, r1
1a001f14:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a001f18:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a001f1c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a001f20:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a001f24:	b212      	sxth	r2, r2
1a001f26:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a001f2a:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a001f2e:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a001f32:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a001f36:	b200      	sxth	r0, r0
1a001f38:	ee05 0a90 	vmov	s11, r0
1a001f3c:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a001f40:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a001f44:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a001f48:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a001f4c:	b236      	sxth	r6, r6
1a001f4e:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a001f52:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a001f56:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a001f5a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a001f5e:	b200      	sxth	r0, r0
1a001f60:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a001f64:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a001f68:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a001f6c:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a001f70:	b22d      	sxth	r5, r5
1a001f72:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a001f76:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a001f7a:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a001f7e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a001f82:	b224      	sxth	r4, r4
1a001f84:	ee06 4a90 	vmov	s13, r4
1a001f88:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a001f8c:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a001f90:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a001f94:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a001f98:	b224      	sxth	r4, r4
1a001f9a:	ee07 4a10 	vmov	s14, r4
1a001f9e:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a001fa2:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a001fa6:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a001faa:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a001fae:	b224      	sxth	r4, r4
1a001fb0:	ee07 4a90 	vmov	s15, r4
1a001fb4:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a001fb8:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a001fbc:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a001fc0:	fb01 f407 	mul.w	r4, r1, r7
1a001fc4:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a001fc8:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a001fcc:	9401      	str	r4, [sp, #4]
1a001fce:	fb02 cc04 	mla	ip, r2, r4, ip
1a001fd2:	ee06 ca10 	vmov	s12, ip
1a001fd6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a001fda:	ed93 5a01 	vldr	s10, [r3, #4]
1a001fde:	ee26 6a05 	vmul.f32	s12, s12, s10
1a001fe2:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a001fe6:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001fea:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a001fee:	ee26 6a24 	vmul.f32	s12, s12, s9
1a001ff2:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a001ff6:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a001ffa:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a001ffe:	fb08 fc01 	mul.w	ip, r8, r1
1a002002:	fb0e cc0b 	mla	ip, lr, fp, ip
1a002006:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a00200a:	fb04 cc02 	mla	ip, r4, r2, ip
1a00200e:	ee06 ca10 	vmov	s12, ip
1a002012:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a002016:	ee25 6a06 	vmul.f32	s12, s10, s12
1a00201a:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a00201e:	ee36 6a64 	vsub.f32	s12, s12, s9
1a002022:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a002026:	ee26 6a24 	vmul.f32	s12, s12, s9
1a00202a:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a00202e:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a002032:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a002036:	fb09 f101 	mul.w	r1, r9, r1
1a00203a:	fb0c 110b 	mla	r1, ip, fp, r1
1a00203e:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a002042:	fb0b 1102 	mla	r1, fp, r2, r1
1a002046:	ee06 1a10 	vmov	s12, r1
1a00204a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a00204e:	ee25 5a06 	vmul.f32	s10, s10, s12
1a002052:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a002056:	ee35 5a46 	vsub.f32	s10, s10, s12
1a00205a:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a00205e:	ee25 5a06 	vmul.f32	s10, s10, s12
1a002062:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a002066:	fb00 f707 	mul.w	r7, r0, r7
1a00206a:	fb06 770a 	mla	r7, r6, sl, r7
1a00206e:	9a01      	ldr	r2, [sp, #4]
1a002070:	fb05 7202 	mla	r2, r5, r2, r7
1a002074:	ee06 2a10 	vmov	s12, r2
1a002078:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a00207c:	ed93 5a02 	vldr	s10, [r3, #8]
1a002080:	ee26 6a05 	vmul.f32	s12, s12, s10
1a002084:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a002088:	ee36 6a64 	vsub.f32	s12, s12, s9
1a00208c:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a002090:	fb00 f808 	mul.w	r8, r0, r8
1a002094:	fb06 8e0e 	mla	lr, r6, lr, r8
1a002098:	fb05 e204 	mla	r2, r5, r4, lr
1a00209c:	ee06 2a10 	vmov	s12, r2
1a0020a0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0020a4:	ee25 6a06 	vmul.f32	s12, s10, s12
1a0020a8:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a0020ac:	ee36 6a64 	vsub.f32	s12, s12, s9
1a0020b0:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a0020b4:	fb00 f009 	mul.w	r0, r0, r9
1a0020b8:	fb06 000c 	mla	r0, r6, ip, r0
1a0020bc:	fb05 050b 	mla	r5, r5, fp, r0
1a0020c0:	ee06 5a10 	vmov	s12, r5
1a0020c4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0020c8:	ee25 5a06 	vmul.f32	s10, s10, s12
1a0020cc:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a0020d0:	ee35 5a46 	vsub.f32	s10, s10, s12
1a0020d4:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a0020d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a0020dc:	ed93 6a03 	vldr	s12, [r3, #12]
1a0020e0:	ee66 6a86 	vmul.f32	s13, s13, s12
1a0020e4:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a0020e8:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a0020ec:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a0020f0:	ee66 6a86 	vmul.f32	s13, s13, s12
1a0020f4:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a0020f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a0020fc:	edd3 6a04 	vldr	s13, [r3, #16]
1a002100:	ee27 7a26 	vmul.f32	s14, s14, s13
1a002104:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a002108:	ee37 7a66 	vsub.f32	s14, s14, s13
1a00210c:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a002110:	ee27 7a26 	vmul.f32	s14, s14, s13
1a002114:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a00211c:	ed93 7a05 	vldr	s14, [r3, #20]
1a002120:	ee67 7a87 	vmul.f32	s15, s15, s14
1a002124:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a002128:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a00212c:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a002130:	ee67 7a87 	vmul.f32	s15, s15, s14
1a002134:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a002138:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a00213c:	edd3 7a07 	vldr	s15, [r3, #28]
1a002140:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a002144:	edd3 6a06 	vldr	s13, [r3, #24]
1a002148:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a00214c:	ee77 7a87 	vadd.f32	s15, s15, s14
1a002150:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a002154:	2001      	movs	r0, #1
}
1a002156:	b003      	add	sp, #12
1a002158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a00215c:	2000      	movs	r0, #0
1a00215e:	e7fa      	b.n	1a002156 <mpu9250Read+0x27a>
1a002160:	10000a18 	.word	0x10000a18

1a002164 <mpu9250GetAccelX_mss>:

// Returns the accelerometer measurement in the x direction, m/s/s
float mpu9250GetAccelX_mss( void )
{
	return control._ax;
}
1a002164:	4b01      	ldr	r3, [pc, #4]	; (1a00216c <mpu9250GetAccelX_mss+0x8>)
1a002166:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
1a00216a:	4770      	bx	lr
1a00216c:	10000a18 	.word	0x10000a18

1a002170 <mpu9250GetAccelY_mss>:

// Returns the accelerometer measurement in the y direction, m/s/s
float mpu9250GetAccelY_mss( void )
{
	return control._ay;
}
1a002170:	4b01      	ldr	r3, [pc, #4]	; (1a002178 <mpu9250GetAccelY_mss+0x8>)
1a002172:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
1a002176:	4770      	bx	lr
1a002178:	10000a18 	.word	0x10000a18

1a00217c <mpu9250GetAccelZ_mss>:

// Returns the accelerometer measurement in the z direction, m/s/s
float mpu9250GetAccelZ_mss( void )
{
	return control._az;
}
1a00217c:	4b01      	ldr	r3, [pc, #4]	; (1a002184 <mpu9250GetAccelZ_mss+0x8>)
1a00217e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
1a002182:	4770      	bx	lr
1a002184:	10000a18 	.word	0x10000a18

1a002188 <mpu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu9250GetGyroX_rads( void )
{
	return control._gx;
}
1a002188:	4b01      	ldr	r3, [pc, #4]	; (1a002190 <mpu9250GetGyroX_rads+0x8>)
1a00218a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a00218e:	4770      	bx	lr
1a002190:	10000a18 	.word	0x10000a18

1a002194 <mpu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu9250GetGyroY_rads( void )
{
	return control._gy;
}
1a002194:	4b01      	ldr	r3, [pc, #4]	; (1a00219c <mpu9250GetGyroY_rads+0x8>)
1a002196:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a00219a:	4770      	bx	lr
1a00219c:	10000a18 	.word	0x10000a18

1a0021a0 <mpu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu9250GetGyroZ_rads( void )
{
	return control._gz;
}
1a0021a0:	4b01      	ldr	r3, [pc, #4]	; (1a0021a8 <mpu9250GetGyroZ_rads+0x8>)
1a0021a2:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a0021a6:	4770      	bx	lr
1a0021a8:	10000a18 	.word	0x10000a18

1a0021ac <mpu9250CalibrateGyro>:
{
1a0021ac:	b538      	push	{r3, r4, r5, lr}
1a0021ae:	ed2d 8b02 	vpush	{d8}
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a0021b2:	2000      	movs	r0, #0
1a0021b4:	f7ff fd72 	bl	1a001c9c <mpu9250SetGyroRange>
1a0021b8:	2800      	cmp	r0, #0
1a0021ba:	f2c0 8090 	blt.w	1a0022de <mpu9250CalibrateGyro+0x132>
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a0021be:	2003      	movs	r0, #3
1a0021c0:	f7ff fdb6 	bl	1a001d30 <mpu9250SetDlpfBandwidth>
1a0021c4:	2800      	cmp	r0, #0
1a0021c6:	f2c0 808d 	blt.w	1a0022e4 <mpu9250CalibrateGyro+0x138>
	if (mpu9250SetSrd(19) < 0) {
1a0021ca:	2013      	movs	r0, #19
1a0021cc:	f7ff fe2c 	bl	1a001e28 <mpu9250SetSrd>
1a0021d0:	2800      	cmp	r0, #0
1a0021d2:	f2c0 808a 	blt.w	1a0022ea <mpu9250CalibrateGyro+0x13e>
	control._gxbD = 0;
1a0021d6:	4b4b      	ldr	r3, [pc, #300]	; (1a002304 <mpu9250CalibrateGyro+0x158>)
1a0021d8:	2000      	movs	r0, #0
1a0021da:	2100      	movs	r1, #0
1a0021dc:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a0021e0:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a0021e4:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a0021e8:	2500      	movs	r5, #0
1a0021ea:	4b46      	ldr	r3, [pc, #280]	; (1a002304 <mpu9250CalibrateGyro+0x158>)
1a0021ec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a0021f0:	42ab      	cmp	r3, r5
1a0021f2:	d94b      	bls.n	1a00228c <mpu9250CalibrateGyro+0xe0>
		mpu9250Read();
1a0021f4:	f7ff fe72 	bl	1a001edc <mpu9250Read>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
1a0021f8:	f7ff ffc6 	bl	1a002188 <mpu9250GetGyroX_rads>
1a0021fc:	4c41      	ldr	r4, [pc, #260]	; (1a002304 <mpu9250CalibrateGyro+0x158>)
1a0021fe:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a002202:	ee30 0a27 	vadd.f32	s0, s0, s15
1a002206:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a00220a:	ee08 3a10 	vmov	s16, r3
1a00220e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a002212:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a002216:	ee17 0a90 	vmov	r0, s15
1a00221a:	f000 fb4b 	bl	1a0028b4 <__aeabi_f2d>
1a00221e:	4602      	mov	r2, r0
1a002220:	460b      	mov	r3, r1
1a002222:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a002226:	f000 f9e7 	bl	1a0025f8 <__adddf3>
1a00222a:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
1a00222e:	f7ff ffb1 	bl	1a002194 <mpu9250GetGyroY_rads>
1a002232:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a002236:	ee30 0a27 	vadd.f32	s0, s0, s15
1a00223a:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a00223e:	ee17 0a90 	vmov	r0, s15
1a002242:	f000 fb37 	bl	1a0028b4 <__aeabi_f2d>
1a002246:	4602      	mov	r2, r0
1a002248:	460b      	mov	r3, r1
1a00224a:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00224e:	f000 f9d3 	bl	1a0025f8 <__adddf3>
1a002252:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
1a002256:	f7ff ffa3 	bl	1a0021a0 <mpu9250GetGyroZ_rads>
1a00225a:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a00225e:	ee30 0a27 	vadd.f32	s0, s0, s15
1a002262:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a002266:	ee17 0a90 	vmov	r0, s15
1a00226a:	f000 fb23 	bl	1a0028b4 <__aeabi_f2d>
1a00226e:	4602      	mov	r2, r0
1a002270:	460b      	mov	r3, r1
1a002272:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a002276:	f000 f9bf 	bl	1a0025f8 <__adddf3>
1a00227a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		delay(20);
1a00227e:	2014      	movs	r0, #20
1a002280:	2100      	movs	r1, #0
1a002282:	f7ff fbe3 	bl	1a001a4c <delay>
	for (uint8_t i=0; i < control._numSamples; i++) {
1a002286:	3501      	adds	r5, #1
1a002288:	b2ed      	uxtb	r5, r5
1a00228a:	e7ae      	b.n	1a0021ea <mpu9250CalibrateGyro+0x3e>
	control._gxb = (float)control._gxbD;
1a00228c:	4c1d      	ldr	r4, [pc, #116]	; (1a002304 <mpu9250CalibrateGyro+0x158>)
1a00228e:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a002292:	f000 fe01 	bl	1a002e98 <__aeabi_d2f>
1a002296:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a00229a:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00229e:	f000 fdfb 	bl	1a002e98 <__aeabi_d2f>
1a0022a2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a0022a6:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a0022aa:	f000 fdf5 	bl	1a002e98 <__aeabi_d2f>
1a0022ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
1a0022b2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a0022b6:	f7ff fcf1 	bl	1a001c9c <mpu9250SetGyroRange>
1a0022ba:	2800      	cmp	r0, #0
1a0022bc:	db18      	blt.n	1a0022f0 <mpu9250CalibrateGyro+0x144>
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
1a0022be:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a0022c2:	f7ff fd35 	bl	1a001d30 <mpu9250SetDlpfBandwidth>
1a0022c6:	2800      	cmp	r0, #0
1a0022c8:	db15      	blt.n	1a0022f6 <mpu9250CalibrateGyro+0x14a>
	if (mpu9250SetSrd(control._srd) < 0) {
1a0022ca:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a0022ce:	f7ff fdab 	bl	1a001e28 <mpu9250SetSrd>
1a0022d2:	2800      	cmp	r0, #0
1a0022d4:	db12      	blt.n	1a0022fc <mpu9250CalibrateGyro+0x150>
	return 1;
1a0022d6:	2001      	movs	r0, #1
}
1a0022d8:	ecbd 8b02 	vpop	{d8}
1a0022dc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0022de:	f04f 30ff 	mov.w	r0, #4294967295
1a0022e2:	e7f9      	b.n	1a0022d8 <mpu9250CalibrateGyro+0x12c>
		return -2;
1a0022e4:	f06f 0001 	mvn.w	r0, #1
1a0022e8:	e7f6      	b.n	1a0022d8 <mpu9250CalibrateGyro+0x12c>
		return -3;
1a0022ea:	f06f 0002 	mvn.w	r0, #2
1a0022ee:	e7f3      	b.n	1a0022d8 <mpu9250CalibrateGyro+0x12c>
		return -4;
1a0022f0:	f06f 0003 	mvn.w	r0, #3
1a0022f4:	e7f0      	b.n	1a0022d8 <mpu9250CalibrateGyro+0x12c>
		return -5;
1a0022f6:	f06f 0004 	mvn.w	r0, #4
1a0022fa:	e7ed      	b.n	1a0022d8 <mpu9250CalibrateGyro+0x12c>
		return -6;
1a0022fc:	f06f 0005 	mvn.w	r0, #5
1a002300:	e7ea      	b.n	1a0022d8 <mpu9250CalibrateGyro+0x12c>
1a002302:	bf00      	nop
1a002304:	10000a18 	.word	0x10000a18

1a002308 <mpu9250Init>:
{
1a002308:	b510      	push	{r4, lr}
1a00230a:	4604      	mov	r4, r0
	mpu9250InitializeControlStructure();
1a00230c:	f7ff fbba 	bl	1a001a84 <mpu9250InitializeControlStructure>
	control.address = address;
1a002310:	4ba2      	ldr	r3, [pc, #648]	; (1a00259c <mpu9250Init+0x294>)
1a002312:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a002314:	49a2      	ldr	r1, [pc, #648]	; (1a0025a0 <mpu9250Init+0x298>)
1a002316:	2000      	movs	r0, #0
1a002318:	f7ff fac2 	bl	1a0018a0 <i2cInit>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a00231c:	2101      	movs	r1, #1
1a00231e:	206b      	movs	r0, #107	; 0x6b
1a002320:	f7ff fc1c 	bl	1a001b5c <mpu9250WriteRegister>
1a002324:	2800      	cmp	r0, #0
1a002326:	f2c0 80fd 	blt.w	1a002524 <mpu9250Init+0x21c>
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a00232a:	2120      	movs	r1, #32
1a00232c:	206a      	movs	r0, #106	; 0x6a
1a00232e:	f7ff fc15 	bl	1a001b5c <mpu9250WriteRegister>
1a002332:	2800      	cmp	r0, #0
1a002334:	f2c0 80f9 	blt.w	1a00252a <mpu9250Init+0x222>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a002338:	210d      	movs	r1, #13
1a00233a:	2024      	movs	r0, #36	; 0x24
1a00233c:	f7ff fc0e 	bl	1a001b5c <mpu9250WriteRegister>
1a002340:	2800      	cmp	r0, #0
1a002342:	f2c0 80f5 	blt.w	1a002530 <mpu9250Init+0x228>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a002346:	2100      	movs	r1, #0
1a002348:	200a      	movs	r0, #10
1a00234a:	f7ff fc6b 	bl	1a001c24 <mpu9250WriteAK8963Register>
	mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a00234e:	2180      	movs	r1, #128	; 0x80
1a002350:	206b      	movs	r0, #107	; 0x6b
1a002352:	f7ff fc03 	bl	1a001b5c <mpu9250WriteRegister>
	delay(1);
1a002356:	2001      	movs	r0, #1
1a002358:	2100      	movs	r1, #0
1a00235a:	f7ff fb77 	bl	1a001a4c <delay>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a00235e:	2101      	movs	r1, #1
1a002360:	200b      	movs	r0, #11
1a002362:	f7ff fc5f 	bl	1a001c24 <mpu9250WriteAK8963Register>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a002366:	2101      	movs	r1, #1
1a002368:	206b      	movs	r0, #107	; 0x6b
1a00236a:	f7ff fbf7 	bl	1a001b5c <mpu9250WriteRegister>
1a00236e:	2800      	cmp	r0, #0
1a002370:	f2c0 80e1 	blt.w	1a002536 <mpu9250Init+0x22e>
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
1a002374:	f7ff fbe2 	bl	1a001b3c <mpu9250WhoAmI>
1a002378:	2871      	cmp	r0, #113	; 0x71
1a00237a:	d004      	beq.n	1a002386 <mpu9250Init+0x7e>
1a00237c:	f7ff fbde 	bl	1a001b3c <mpu9250WhoAmI>
1a002380:	2873      	cmp	r0, #115	; 0x73
1a002382:	f040 80db 	bne.w	1a00253c <mpu9250Init+0x234>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a002386:	2100      	movs	r1, #0
1a002388:	206c      	movs	r0, #108	; 0x6c
1a00238a:	f7ff fbe7 	bl	1a001b5c <mpu9250WriteRegister>
1a00238e:	2800      	cmp	r0, #0
1a002390:	f2c0 80d7 	blt.w	1a002542 <mpu9250Init+0x23a>
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a002394:	2118      	movs	r1, #24
1a002396:	201c      	movs	r0, #28
1a002398:	f7ff fbe0 	bl	1a001b5c <mpu9250WriteRegister>
1a00239c:	2800      	cmp	r0, #0
1a00239e:	f2c0 80d3 	blt.w	1a002548 <mpu9250Init+0x240>
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a0023a2:	4b7e      	ldr	r3, [pc, #504]	; (1a00259c <mpu9250Init+0x294>)
1a0023a4:	4a7f      	ldr	r2, [pc, #508]	; (1a0025a4 <mpu9250Init+0x29c>)
1a0023a6:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a0023a8:	2203      	movs	r2, #3
1a0023aa:	f883 2020 	strb.w	r2, [r3, #32]
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a0023ae:	2118      	movs	r1, #24
1a0023b0:	201b      	movs	r0, #27
1a0023b2:	f7ff fbd3 	bl	1a001b5c <mpu9250WriteRegister>
1a0023b6:	2800      	cmp	r0, #0
1a0023b8:	f2c0 80c9 	blt.w	1a00254e <mpu9250Init+0x246>
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a0023bc:	4b77      	ldr	r3, [pc, #476]	; (1a00259c <mpu9250Init+0x294>)
1a0023be:	4a7a      	ldr	r2, [pc, #488]	; (1a0025a8 <mpu9250Init+0x2a0>)
1a0023c0:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a0023c2:	2203      	movs	r2, #3
1a0023c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a0023c8:	2101      	movs	r1, #1
1a0023ca:	201d      	movs	r0, #29
1a0023cc:	f7ff fbc6 	bl	1a001b5c <mpu9250WriteRegister>
1a0023d0:	2800      	cmp	r0, #0
1a0023d2:	f2c0 80bf 	blt.w	1a002554 <mpu9250Init+0x24c>
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a0023d6:	2101      	movs	r1, #1
1a0023d8:	201a      	movs	r0, #26
1a0023da:	f7ff fbbf 	bl	1a001b5c <mpu9250WriteRegister>
1a0023de:	2800      	cmp	r0, #0
1a0023e0:	f2c0 80bb 	blt.w	1a00255a <mpu9250Init+0x252>
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a0023e4:	2100      	movs	r1, #0
1a0023e6:	4b6d      	ldr	r3, [pc, #436]	; (1a00259c <mpu9250Init+0x294>)
1a0023e8:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a0023ec:	2019      	movs	r0, #25
1a0023ee:	f7ff fbb5 	bl	1a001b5c <mpu9250WriteRegister>
1a0023f2:	2800      	cmp	r0, #0
1a0023f4:	f2c0 80b4 	blt.w	1a002560 <mpu9250Init+0x258>
	control._srd = 0;
1a0023f8:	4b68      	ldr	r3, [pc, #416]	; (1a00259c <mpu9250Init+0x294>)
1a0023fa:	2200      	movs	r2, #0
1a0023fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a002400:	2120      	movs	r1, #32
1a002402:	206a      	movs	r0, #106	; 0x6a
1a002404:	f7ff fbaa 	bl	1a001b5c <mpu9250WriteRegister>
1a002408:	2800      	cmp	r0, #0
1a00240a:	f2c0 80ac 	blt.w	1a002566 <mpu9250Init+0x25e>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a00240e:	210d      	movs	r1, #13
1a002410:	2024      	movs	r0, #36	; 0x24
1a002412:	f7ff fba3 	bl	1a001b5c <mpu9250WriteRegister>
1a002416:	2800      	cmp	r0, #0
1a002418:	f2c0 80a8 	blt.w	1a00256c <mpu9250Init+0x264>
	if (mpu9250WhoAmIAK8963() != 72) {
1a00241c:	f7ff fbf2 	bl	1a001c04 <mpu9250WhoAmIAK8963>
1a002420:	2848      	cmp	r0, #72	; 0x48
1a002422:	f040 80a6 	bne.w	1a002572 <mpu9250Init+0x26a>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a002426:	2100      	movs	r1, #0
1a002428:	200a      	movs	r0, #10
1a00242a:	f7ff fbfb 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a00242e:	2800      	cmp	r0, #0
1a002430:	f2c0 80a2 	blt.w	1a002578 <mpu9250Init+0x270>
	delay(100); // long wait between AK8963 mode changes
1a002434:	2064      	movs	r0, #100	; 0x64
1a002436:	2100      	movs	r1, #0
1a002438:	f7ff fb08 	bl	1a001a4c <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a00243c:	210f      	movs	r1, #15
1a00243e:	200a      	movs	r0, #10
1a002440:	f7ff fbf0 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a002444:	2800      	cmp	r0, #0
1a002446:	f2c0 809a 	blt.w	1a00257e <mpu9250Init+0x276>
	delay(100); // long wait between AK8963 mode changes
1a00244a:	2064      	movs	r0, #100	; 0x64
1a00244c:	2100      	movs	r1, #0
1a00244e:	f7ff fafd 	bl	1a001a4c <delay>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a002452:	2103      	movs	r1, #3
1a002454:	2010      	movs	r0, #16
1a002456:	f7ff fba7 	bl	1a001ba8 <mpu9250ReadAK8963Registers>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00245a:	4b50      	ldr	r3, [pc, #320]	; (1a00259c <mpu9250Init+0x294>)
1a00245c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a002460:	ee07 2a10 	vmov	s14, r2
1a002464:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a002468:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a0025ac <mpu9250Init+0x2a4>
1a00246c:	ee37 7a64 	vsub.f32	s14, s14, s9
1a002470:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a0025b0 <mpu9250Init+0x2a8>
1a002474:	ee27 7a05 	vmul.f32	s14, s14, s10
1a002478:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a00247c:	ee37 7a25 	vadd.f32	s14, s14, s11
1a002480:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a0025b4 <mpu9250Init+0x2ac>
1a002484:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a002488:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a0025b8 <mpu9250Init+0x2b0>
1a00248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a002490:	edc3 7a03 	vstr	s15, [r3, #12]
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a002494:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a002498:	ee07 2a10 	vmov	s14, r2
1a00249c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a0024a0:	ee37 7a64 	vsub.f32	s14, s14, s9
1a0024a4:	ee27 7a05 	vmul.f32	s14, s14, s10
1a0024a8:	ee37 7a25 	vadd.f32	s14, s14, s11
1a0024ac:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a0024b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0024b4:	edc3 7a04 	vstr	s15, [r3, #16]
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0024b8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a0024bc:	ee07 2a90 	vmov	s15, r2
1a0024c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a0024c4:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a0024c8:	ee67 7a85 	vmul.f32	s15, s15, s10
1a0024cc:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a0024d0:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a0024d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0024d8:	ed83 7a05 	vstr	s14, [r3, #20]
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0024dc:	2100      	movs	r1, #0
1a0024de:	200a      	movs	r0, #10
1a0024e0:	f7ff fba0 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a0024e4:	2800      	cmp	r0, #0
1a0024e6:	db4d      	blt.n	1a002584 <mpu9250Init+0x27c>
	delay(100); // long wait between AK8963 mode changes
1a0024e8:	2064      	movs	r0, #100	; 0x64
1a0024ea:	2100      	movs	r1, #0
1a0024ec:	f7ff faae 	bl	1a001a4c <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a0024f0:	2116      	movs	r1, #22
1a0024f2:	200a      	movs	r0, #10
1a0024f4:	f7ff fb96 	bl	1a001c24 <mpu9250WriteAK8963Register>
1a0024f8:	2800      	cmp	r0, #0
1a0024fa:	db46      	blt.n	1a00258a <mpu9250Init+0x282>
	delay(100); // long wait between AK8963 mode changes
1a0024fc:	2064      	movs	r0, #100	; 0x64
1a0024fe:	2100      	movs	r1, #0
1a002500:	f7ff faa4 	bl	1a001a4c <delay>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a002504:	2101      	movs	r1, #1
1a002506:	206b      	movs	r0, #107	; 0x6b
1a002508:	f7ff fb28 	bl	1a001b5c <mpu9250WriteRegister>
1a00250c:	2800      	cmp	r0, #0
1a00250e:	db3f      	blt.n	1a002590 <mpu9250Init+0x288>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a002510:	2107      	movs	r1, #7
1a002512:	2003      	movs	r0, #3
1a002514:	f7ff fb48 	bl	1a001ba8 <mpu9250ReadAK8963Registers>
	if (mpu9250CalibrateGyro() < 0) {
1a002518:	f7ff fe48 	bl	1a0021ac <mpu9250CalibrateGyro>
1a00251c:	2800      	cmp	r0, #0
1a00251e:	db3a      	blt.n	1a002596 <mpu9250Init+0x28e>
	return 1;
1a002520:	2001      	movs	r0, #1
}
1a002522:	bd10      	pop	{r4, pc}
		return -1;
1a002524:	f04f 30ff 	mov.w	r0, #4294967295
1a002528:	e7fb      	b.n	1a002522 <mpu9250Init+0x21a>
		return -2;
1a00252a:	f06f 0001 	mvn.w	r0, #1
1a00252e:	e7f8      	b.n	1a002522 <mpu9250Init+0x21a>
		return -3;
1a002530:	f06f 0002 	mvn.w	r0, #2
1a002534:	e7f5      	b.n	1a002522 <mpu9250Init+0x21a>
		return -4;
1a002536:	f06f 0003 	mvn.w	r0, #3
1a00253a:	e7f2      	b.n	1a002522 <mpu9250Init+0x21a>
		return -5;
1a00253c:	f06f 0004 	mvn.w	r0, #4
1a002540:	e7ef      	b.n	1a002522 <mpu9250Init+0x21a>
		return -6;
1a002542:	f06f 0005 	mvn.w	r0, #5
1a002546:	e7ec      	b.n	1a002522 <mpu9250Init+0x21a>
		return -7;
1a002548:	f06f 0006 	mvn.w	r0, #6
1a00254c:	e7e9      	b.n	1a002522 <mpu9250Init+0x21a>
		return -8;
1a00254e:	f06f 0007 	mvn.w	r0, #7
1a002552:	e7e6      	b.n	1a002522 <mpu9250Init+0x21a>
		return -9;
1a002554:	f06f 0008 	mvn.w	r0, #8
1a002558:	e7e3      	b.n	1a002522 <mpu9250Init+0x21a>
		return -10;
1a00255a:	f06f 0009 	mvn.w	r0, #9
1a00255e:	e7e0      	b.n	1a002522 <mpu9250Init+0x21a>
		return -11;
1a002560:	f06f 000a 	mvn.w	r0, #10
1a002564:	e7dd      	b.n	1a002522 <mpu9250Init+0x21a>
		return -12;
1a002566:	f06f 000b 	mvn.w	r0, #11
1a00256a:	e7da      	b.n	1a002522 <mpu9250Init+0x21a>
		return -13;
1a00256c:	f06f 000c 	mvn.w	r0, #12
1a002570:	e7d7      	b.n	1a002522 <mpu9250Init+0x21a>
		return -14;
1a002572:	f06f 000d 	mvn.w	r0, #13
1a002576:	e7d4      	b.n	1a002522 <mpu9250Init+0x21a>
		return -15;
1a002578:	f06f 000e 	mvn.w	r0, #14
1a00257c:	e7d1      	b.n	1a002522 <mpu9250Init+0x21a>
		return -16;
1a00257e:	f06f 000f 	mvn.w	r0, #15
1a002582:	e7ce      	b.n	1a002522 <mpu9250Init+0x21a>
		return -17;
1a002584:	f06f 0010 	mvn.w	r0, #16
1a002588:	e7cb      	b.n	1a002522 <mpu9250Init+0x21a>
		return -18;
1a00258a:	f06f 0011 	mvn.w	r0, #17
1a00258e:	e7c8      	b.n	1a002522 <mpu9250Init+0x21a>
		return -19;
1a002590:	f06f 0012 	mvn.w	r0, #18
1a002594:	e7c5      	b.n	1a002522 <mpu9250Init+0x21a>
		return -20;
1a002596:	f06f 0013 	mvn.w	r0, #19
1a00259a:	e7c2      	b.n	1a002522 <mpu9250Init+0x21a>
1a00259c:	10000a18 	.word	0x10000a18
1a0025a0:	00061a80 	.word	0x00061a80
1a0025a4:	3b9cea16 	.word	0x3b9cea16
1a0025a8:	3a8ba0e4 	.word	0x3a8ba0e4
1a0025ac:	43000000 	.word	0x43000000
1a0025b0:	3b800000 	.word	0x3b800000
1a0025b4:	45998000 	.word	0x45998000
1a0025b8:	46fff000 	.word	0x46fff000

1a0025bc <mpu9250GetMagX_uT>:

// Returns the magnetometer measurement in the x direction, uT
float mpu9250GetMagX_uT( void )
{
  return control._hx;
}
1a0025bc:	4b01      	ldr	r3, [pc, #4]	; (1a0025c4 <mpu9250GetMagX_uT+0x8>)
1a0025be:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
1a0025c2:	4770      	bx	lr
1a0025c4:	10000a18 	.word	0x10000a18

1a0025c8 <mpu9250GetMagY_uT>:

// Returns the magnetometer measurement in the y direction, uT
float mpu9250GetMagY_uT( void )
{
  return control._hy;
}
1a0025c8:	4b01      	ldr	r3, [pc, #4]	; (1a0025d0 <mpu9250GetMagY_uT+0x8>)
1a0025ca:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
1a0025ce:	4770      	bx	lr
1a0025d0:	10000a18 	.word	0x10000a18

1a0025d4 <mpu9250GetMagZ_uT>:

// Returns the magnetometer measurement in the z direction, uT
float mpu9250GetMagZ_uT( void )
{
  return control._hz;
}
1a0025d4:	4b01      	ldr	r3, [pc, #4]	; (1a0025dc <mpu9250GetMagZ_uT+0x8>)
1a0025d6:	ed93 0a17 	vldr	s0, [r3, #92]	; 0x5c
1a0025da:	4770      	bx	lr
1a0025dc:	10000a18 	.word	0x10000a18

1a0025e0 <mpu9250GetTemperature_C>:

// Returns the die temperature, C
float mpu9250GetTemperature_C( void )
{
  return control._t;
}
1a0025e0:	4b01      	ldr	r3, [pc, #4]	; (1a0025e8 <mpu9250GetTemperature_C+0x8>)
1a0025e2:	ed93 0a18 	vldr	s0, [r3, #96]	; 0x60
1a0025e6:	4770      	bx	lr
1a0025e8:	10000a18 	.word	0x10000a18

1a0025ec <__aeabi_drsub>:
1a0025ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0025f0:	e002      	b.n	1a0025f8 <__adddf3>
1a0025f2:	bf00      	nop

1a0025f4 <__aeabi_dsub>:
1a0025f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0025f8 <__adddf3>:
1a0025f8:	b530      	push	{r4, r5, lr}
1a0025fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0025fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002602:	ea94 0f05 	teq	r4, r5
1a002606:	bf08      	it	eq
1a002608:	ea90 0f02 	teqeq	r0, r2
1a00260c:	bf1f      	itttt	ne
1a00260e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002612:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002616:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00261a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00261e:	f000 80e2 	beq.w	1a0027e6 <__adddf3+0x1ee>
1a002622:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002626:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00262a:	bfb8      	it	lt
1a00262c:	426d      	neglt	r5, r5
1a00262e:	dd0c      	ble.n	1a00264a <__adddf3+0x52>
1a002630:	442c      	add	r4, r5
1a002632:	ea80 0202 	eor.w	r2, r0, r2
1a002636:	ea81 0303 	eor.w	r3, r1, r3
1a00263a:	ea82 0000 	eor.w	r0, r2, r0
1a00263e:	ea83 0101 	eor.w	r1, r3, r1
1a002642:	ea80 0202 	eor.w	r2, r0, r2
1a002646:	ea81 0303 	eor.w	r3, r1, r3
1a00264a:	2d36      	cmp	r5, #54	; 0x36
1a00264c:	bf88      	it	hi
1a00264e:	bd30      	pophi	{r4, r5, pc}
1a002650:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002654:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002658:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00265c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002660:	d002      	beq.n	1a002668 <__adddf3+0x70>
1a002662:	4240      	negs	r0, r0
1a002664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002668:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00266c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002670:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002674:	d002      	beq.n	1a00267c <__adddf3+0x84>
1a002676:	4252      	negs	r2, r2
1a002678:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00267c:	ea94 0f05 	teq	r4, r5
1a002680:	f000 80a7 	beq.w	1a0027d2 <__adddf3+0x1da>
1a002684:	f1a4 0401 	sub.w	r4, r4, #1
1a002688:	f1d5 0e20 	rsbs	lr, r5, #32
1a00268c:	db0d      	blt.n	1a0026aa <__adddf3+0xb2>
1a00268e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a002692:	fa22 f205 	lsr.w	r2, r2, r5
1a002696:	1880      	adds	r0, r0, r2
1a002698:	f141 0100 	adc.w	r1, r1, #0
1a00269c:	fa03 f20e 	lsl.w	r2, r3, lr
1a0026a0:	1880      	adds	r0, r0, r2
1a0026a2:	fa43 f305 	asr.w	r3, r3, r5
1a0026a6:	4159      	adcs	r1, r3
1a0026a8:	e00e      	b.n	1a0026c8 <__adddf3+0xd0>
1a0026aa:	f1a5 0520 	sub.w	r5, r5, #32
1a0026ae:	f10e 0e20 	add.w	lr, lr, #32
1a0026b2:	2a01      	cmp	r2, #1
1a0026b4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0026b8:	bf28      	it	cs
1a0026ba:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0026be:	fa43 f305 	asr.w	r3, r3, r5
1a0026c2:	18c0      	adds	r0, r0, r3
1a0026c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0026c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0026cc:	d507      	bpl.n	1a0026de <__adddf3+0xe6>
1a0026ce:	f04f 0e00 	mov.w	lr, #0
1a0026d2:	f1dc 0c00 	rsbs	ip, ip, #0
1a0026d6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0026da:	eb6e 0101 	sbc.w	r1, lr, r1
1a0026de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0026e2:	d31b      	bcc.n	1a00271c <__adddf3+0x124>
1a0026e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0026e8:	d30c      	bcc.n	1a002704 <__adddf3+0x10c>
1a0026ea:	0849      	lsrs	r1, r1, #1
1a0026ec:	ea5f 0030 	movs.w	r0, r0, rrx
1a0026f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0026f4:	f104 0401 	add.w	r4, r4, #1
1a0026f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0026fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002700:	f080 809a 	bcs.w	1a002838 <__adddf3+0x240>
1a002704:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002708:	bf08      	it	eq
1a00270a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00270e:	f150 0000 	adcs.w	r0, r0, #0
1a002712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002716:	ea41 0105 	orr.w	r1, r1, r5
1a00271a:	bd30      	pop	{r4, r5, pc}
1a00271c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002720:	4140      	adcs	r0, r0
1a002722:	eb41 0101 	adc.w	r1, r1, r1
1a002726:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00272a:	f1a4 0401 	sub.w	r4, r4, #1
1a00272e:	d1e9      	bne.n	1a002704 <__adddf3+0x10c>
1a002730:	f091 0f00 	teq	r1, #0
1a002734:	bf04      	itt	eq
1a002736:	4601      	moveq	r1, r0
1a002738:	2000      	moveq	r0, #0
1a00273a:	fab1 f381 	clz	r3, r1
1a00273e:	bf08      	it	eq
1a002740:	3320      	addeq	r3, #32
1a002742:	f1a3 030b 	sub.w	r3, r3, #11
1a002746:	f1b3 0220 	subs.w	r2, r3, #32
1a00274a:	da0c      	bge.n	1a002766 <__adddf3+0x16e>
1a00274c:	320c      	adds	r2, #12
1a00274e:	dd08      	ble.n	1a002762 <__adddf3+0x16a>
1a002750:	f102 0c14 	add.w	ip, r2, #20
1a002754:	f1c2 020c 	rsb	r2, r2, #12
1a002758:	fa01 f00c 	lsl.w	r0, r1, ip
1a00275c:	fa21 f102 	lsr.w	r1, r1, r2
1a002760:	e00c      	b.n	1a00277c <__adddf3+0x184>
1a002762:	f102 0214 	add.w	r2, r2, #20
1a002766:	bfd8      	it	le
1a002768:	f1c2 0c20 	rsble	ip, r2, #32
1a00276c:	fa01 f102 	lsl.w	r1, r1, r2
1a002770:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002774:	bfdc      	itt	le
1a002776:	ea41 010c 	orrle.w	r1, r1, ip
1a00277a:	4090      	lslle	r0, r2
1a00277c:	1ae4      	subs	r4, r4, r3
1a00277e:	bfa2      	ittt	ge
1a002780:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002784:	4329      	orrge	r1, r5
1a002786:	bd30      	popge	{r4, r5, pc}
1a002788:	ea6f 0404 	mvn.w	r4, r4
1a00278c:	3c1f      	subs	r4, #31
1a00278e:	da1c      	bge.n	1a0027ca <__adddf3+0x1d2>
1a002790:	340c      	adds	r4, #12
1a002792:	dc0e      	bgt.n	1a0027b2 <__adddf3+0x1ba>
1a002794:	f104 0414 	add.w	r4, r4, #20
1a002798:	f1c4 0220 	rsb	r2, r4, #32
1a00279c:	fa20 f004 	lsr.w	r0, r0, r4
1a0027a0:	fa01 f302 	lsl.w	r3, r1, r2
1a0027a4:	ea40 0003 	orr.w	r0, r0, r3
1a0027a8:	fa21 f304 	lsr.w	r3, r1, r4
1a0027ac:	ea45 0103 	orr.w	r1, r5, r3
1a0027b0:	bd30      	pop	{r4, r5, pc}
1a0027b2:	f1c4 040c 	rsb	r4, r4, #12
1a0027b6:	f1c4 0220 	rsb	r2, r4, #32
1a0027ba:	fa20 f002 	lsr.w	r0, r0, r2
1a0027be:	fa01 f304 	lsl.w	r3, r1, r4
1a0027c2:	ea40 0003 	orr.w	r0, r0, r3
1a0027c6:	4629      	mov	r1, r5
1a0027c8:	bd30      	pop	{r4, r5, pc}
1a0027ca:	fa21 f004 	lsr.w	r0, r1, r4
1a0027ce:	4629      	mov	r1, r5
1a0027d0:	bd30      	pop	{r4, r5, pc}
1a0027d2:	f094 0f00 	teq	r4, #0
1a0027d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0027da:	bf06      	itte	eq
1a0027dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0027e0:	3401      	addeq	r4, #1
1a0027e2:	3d01      	subne	r5, #1
1a0027e4:	e74e      	b.n	1a002684 <__adddf3+0x8c>
1a0027e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0027ea:	bf18      	it	ne
1a0027ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0027f0:	d029      	beq.n	1a002846 <__adddf3+0x24e>
1a0027f2:	ea94 0f05 	teq	r4, r5
1a0027f6:	bf08      	it	eq
1a0027f8:	ea90 0f02 	teqeq	r0, r2
1a0027fc:	d005      	beq.n	1a00280a <__adddf3+0x212>
1a0027fe:	ea54 0c00 	orrs.w	ip, r4, r0
1a002802:	bf04      	itt	eq
1a002804:	4619      	moveq	r1, r3
1a002806:	4610      	moveq	r0, r2
1a002808:	bd30      	pop	{r4, r5, pc}
1a00280a:	ea91 0f03 	teq	r1, r3
1a00280e:	bf1e      	ittt	ne
1a002810:	2100      	movne	r1, #0
1a002812:	2000      	movne	r0, #0
1a002814:	bd30      	popne	{r4, r5, pc}
1a002816:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00281a:	d105      	bne.n	1a002828 <__adddf3+0x230>
1a00281c:	0040      	lsls	r0, r0, #1
1a00281e:	4149      	adcs	r1, r1
1a002820:	bf28      	it	cs
1a002822:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002826:	bd30      	pop	{r4, r5, pc}
1a002828:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00282c:	bf3c      	itt	cc
1a00282e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002832:	bd30      	popcc	{r4, r5, pc}
1a002834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002838:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00283c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002840:	f04f 0000 	mov.w	r0, #0
1a002844:	bd30      	pop	{r4, r5, pc}
1a002846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00284a:	bf1a      	itte	ne
1a00284c:	4619      	movne	r1, r3
1a00284e:	4610      	movne	r0, r2
1a002850:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002854:	bf1c      	itt	ne
1a002856:	460b      	movne	r3, r1
1a002858:	4602      	movne	r2, r0
1a00285a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00285e:	bf06      	itte	eq
1a002860:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002864:	ea91 0f03 	teqeq	r1, r3
1a002868:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a00286c:	bd30      	pop	{r4, r5, pc}
1a00286e:	bf00      	nop

1a002870 <__aeabi_ui2d>:
1a002870:	f090 0f00 	teq	r0, #0
1a002874:	bf04      	itt	eq
1a002876:	2100      	moveq	r1, #0
1a002878:	4770      	bxeq	lr
1a00287a:	b530      	push	{r4, r5, lr}
1a00287c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002880:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002884:	f04f 0500 	mov.w	r5, #0
1a002888:	f04f 0100 	mov.w	r1, #0
1a00288c:	e750      	b.n	1a002730 <__adddf3+0x138>
1a00288e:	bf00      	nop

1a002890 <__aeabi_i2d>:
1a002890:	f090 0f00 	teq	r0, #0
1a002894:	bf04      	itt	eq
1a002896:	2100      	moveq	r1, #0
1a002898:	4770      	bxeq	lr
1a00289a:	b530      	push	{r4, r5, lr}
1a00289c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0028a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0028a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0028a8:	bf48      	it	mi
1a0028aa:	4240      	negmi	r0, r0
1a0028ac:	f04f 0100 	mov.w	r1, #0
1a0028b0:	e73e      	b.n	1a002730 <__adddf3+0x138>
1a0028b2:	bf00      	nop

1a0028b4 <__aeabi_f2d>:
1a0028b4:	0042      	lsls	r2, r0, #1
1a0028b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0028ba:	ea4f 0131 	mov.w	r1, r1, rrx
1a0028be:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0028c2:	bf1f      	itttt	ne
1a0028c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0028c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0028cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0028d0:	4770      	bxne	lr
1a0028d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0028d6:	bf08      	it	eq
1a0028d8:	4770      	bxeq	lr
1a0028da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0028de:	bf04      	itt	eq
1a0028e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0028e4:	4770      	bxeq	lr
1a0028e6:	b530      	push	{r4, r5, lr}
1a0028e8:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0028ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0028f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0028f4:	e71c      	b.n	1a002730 <__adddf3+0x138>
1a0028f6:	bf00      	nop

1a0028f8 <__aeabi_ul2d>:
1a0028f8:	ea50 0201 	orrs.w	r2, r0, r1
1a0028fc:	bf08      	it	eq
1a0028fe:	4770      	bxeq	lr
1a002900:	b530      	push	{r4, r5, lr}
1a002902:	f04f 0500 	mov.w	r5, #0
1a002906:	e00a      	b.n	1a00291e <__aeabi_l2d+0x16>

1a002908 <__aeabi_l2d>:
1a002908:	ea50 0201 	orrs.w	r2, r0, r1
1a00290c:	bf08      	it	eq
1a00290e:	4770      	bxeq	lr
1a002910:	b530      	push	{r4, r5, lr}
1a002912:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002916:	d502      	bpl.n	1a00291e <__aeabi_l2d+0x16>
1a002918:	4240      	negs	r0, r0
1a00291a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00291e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002922:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002926:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00292a:	f43f aed8 	beq.w	1a0026de <__adddf3+0xe6>
1a00292e:	f04f 0203 	mov.w	r2, #3
1a002932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002936:	bf18      	it	ne
1a002938:	3203      	addne	r2, #3
1a00293a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00293e:	bf18      	it	ne
1a002940:	3203      	addne	r2, #3
1a002942:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002946:	f1c2 0320 	rsb	r3, r2, #32
1a00294a:	fa00 fc03 	lsl.w	ip, r0, r3
1a00294e:	fa20 f002 	lsr.w	r0, r0, r2
1a002952:	fa01 fe03 	lsl.w	lr, r1, r3
1a002956:	ea40 000e 	orr.w	r0, r0, lr
1a00295a:	fa21 f102 	lsr.w	r1, r1, r2
1a00295e:	4414      	add	r4, r2
1a002960:	e6bd      	b.n	1a0026de <__adddf3+0xe6>
1a002962:	bf00      	nop

1a002964 <__aeabi_dmul>:
1a002964:	b570      	push	{r4, r5, r6, lr}
1a002966:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00296a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00296e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002972:	bf1d      	ittte	ne
1a002974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002978:	ea94 0f0c 	teqne	r4, ip
1a00297c:	ea95 0f0c 	teqne	r5, ip
1a002980:	f000 f8de 	bleq	1a002b40 <__aeabi_dmul+0x1dc>
1a002984:	442c      	add	r4, r5
1a002986:	ea81 0603 	eor.w	r6, r1, r3
1a00298a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00298e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002992:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002996:	bf18      	it	ne
1a002998:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a00299c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0029a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0029a4:	d038      	beq.n	1a002a18 <__aeabi_dmul+0xb4>
1a0029a6:	fba0 ce02 	umull	ip, lr, r0, r2
1a0029aa:	f04f 0500 	mov.w	r5, #0
1a0029ae:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0029b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0029b6:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0029ba:	f04f 0600 	mov.w	r6, #0
1a0029be:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0029c2:	f09c 0f00 	teq	ip, #0
1a0029c6:	bf18      	it	ne
1a0029c8:	f04e 0e01 	orrne.w	lr, lr, #1
1a0029cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0029d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0029d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0029d8:	d204      	bcs.n	1a0029e4 <__aeabi_dmul+0x80>
1a0029da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0029de:	416d      	adcs	r5, r5
1a0029e0:	eb46 0606 	adc.w	r6, r6, r6
1a0029e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0029e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0029ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0029f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0029f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0029f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0029fc:	bf88      	it	hi
1a0029fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002a02:	d81e      	bhi.n	1a002a42 <__aeabi_dmul+0xde>
1a002a04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002a08:	bf08      	it	eq
1a002a0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002a0e:	f150 0000 	adcs.w	r0, r0, #0
1a002a12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002a16:	bd70      	pop	{r4, r5, r6, pc}
1a002a18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002a1c:	ea46 0101 	orr.w	r1, r6, r1
1a002a20:	ea40 0002 	orr.w	r0, r0, r2
1a002a24:	ea81 0103 	eor.w	r1, r1, r3
1a002a28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002a2c:	bfc2      	ittt	gt
1a002a2e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002a32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002a36:	bd70      	popgt	{r4, r5, r6, pc}
1a002a38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002a3c:	f04f 0e00 	mov.w	lr, #0
1a002a40:	3c01      	subs	r4, #1
1a002a42:	f300 80ab 	bgt.w	1a002b9c <__aeabi_dmul+0x238>
1a002a46:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002a4a:	bfde      	ittt	le
1a002a4c:	2000      	movle	r0, #0
1a002a4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002a52:	bd70      	pople	{r4, r5, r6, pc}
1a002a54:	f1c4 0400 	rsb	r4, r4, #0
1a002a58:	3c20      	subs	r4, #32
1a002a5a:	da35      	bge.n	1a002ac8 <__aeabi_dmul+0x164>
1a002a5c:	340c      	adds	r4, #12
1a002a5e:	dc1b      	bgt.n	1a002a98 <__aeabi_dmul+0x134>
1a002a60:	f104 0414 	add.w	r4, r4, #20
1a002a64:	f1c4 0520 	rsb	r5, r4, #32
1a002a68:	fa00 f305 	lsl.w	r3, r0, r5
1a002a6c:	fa20 f004 	lsr.w	r0, r0, r4
1a002a70:	fa01 f205 	lsl.w	r2, r1, r5
1a002a74:	ea40 0002 	orr.w	r0, r0, r2
1a002a78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002a7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002a80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002a84:	fa21 f604 	lsr.w	r6, r1, r4
1a002a88:	eb42 0106 	adc.w	r1, r2, r6
1a002a8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002a90:	bf08      	it	eq
1a002a92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002a96:	bd70      	pop	{r4, r5, r6, pc}
1a002a98:	f1c4 040c 	rsb	r4, r4, #12
1a002a9c:	f1c4 0520 	rsb	r5, r4, #32
1a002aa0:	fa00 f304 	lsl.w	r3, r0, r4
1a002aa4:	fa20 f005 	lsr.w	r0, r0, r5
1a002aa8:	fa01 f204 	lsl.w	r2, r1, r4
1a002aac:	ea40 0002 	orr.w	r0, r0, r2
1a002ab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ab4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002ab8:	f141 0100 	adc.w	r1, r1, #0
1a002abc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002ac0:	bf08      	it	eq
1a002ac2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002ac6:	bd70      	pop	{r4, r5, r6, pc}
1a002ac8:	f1c4 0520 	rsb	r5, r4, #32
1a002acc:	fa00 f205 	lsl.w	r2, r0, r5
1a002ad0:	ea4e 0e02 	orr.w	lr, lr, r2
1a002ad4:	fa20 f304 	lsr.w	r3, r0, r4
1a002ad8:	fa01 f205 	lsl.w	r2, r1, r5
1a002adc:	ea43 0302 	orr.w	r3, r3, r2
1a002ae0:	fa21 f004 	lsr.w	r0, r1, r4
1a002ae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ae8:	fa21 f204 	lsr.w	r2, r1, r4
1a002aec:	ea20 0002 	bic.w	r0, r0, r2
1a002af0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002af8:	bf08      	it	eq
1a002afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002afe:	bd70      	pop	{r4, r5, r6, pc}
1a002b00:	f094 0f00 	teq	r4, #0
1a002b04:	d10f      	bne.n	1a002b26 <__aeabi_dmul+0x1c2>
1a002b06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002b0a:	0040      	lsls	r0, r0, #1
1a002b0c:	eb41 0101 	adc.w	r1, r1, r1
1a002b10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002b14:	bf08      	it	eq
1a002b16:	3c01      	subeq	r4, #1
1a002b18:	d0f7      	beq.n	1a002b0a <__aeabi_dmul+0x1a6>
1a002b1a:	ea41 0106 	orr.w	r1, r1, r6
1a002b1e:	f095 0f00 	teq	r5, #0
1a002b22:	bf18      	it	ne
1a002b24:	4770      	bxne	lr
1a002b26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002b2a:	0052      	lsls	r2, r2, #1
1a002b2c:	eb43 0303 	adc.w	r3, r3, r3
1a002b30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002b34:	bf08      	it	eq
1a002b36:	3d01      	subeq	r5, #1
1a002b38:	d0f7      	beq.n	1a002b2a <__aeabi_dmul+0x1c6>
1a002b3a:	ea43 0306 	orr.w	r3, r3, r6
1a002b3e:	4770      	bx	lr
1a002b40:	ea94 0f0c 	teq	r4, ip
1a002b44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002b48:	bf18      	it	ne
1a002b4a:	ea95 0f0c 	teqne	r5, ip
1a002b4e:	d00c      	beq.n	1a002b6a <__aeabi_dmul+0x206>
1a002b50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002b54:	bf18      	it	ne
1a002b56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002b5a:	d1d1      	bne.n	1a002b00 <__aeabi_dmul+0x19c>
1a002b5c:	ea81 0103 	eor.w	r1, r1, r3
1a002b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002b64:	f04f 0000 	mov.w	r0, #0
1a002b68:	bd70      	pop	{r4, r5, r6, pc}
1a002b6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002b6e:	bf06      	itte	eq
1a002b70:	4610      	moveq	r0, r2
1a002b72:	4619      	moveq	r1, r3
1a002b74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002b78:	d019      	beq.n	1a002bae <__aeabi_dmul+0x24a>
1a002b7a:	ea94 0f0c 	teq	r4, ip
1a002b7e:	d102      	bne.n	1a002b86 <__aeabi_dmul+0x222>
1a002b80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002b84:	d113      	bne.n	1a002bae <__aeabi_dmul+0x24a>
1a002b86:	ea95 0f0c 	teq	r5, ip
1a002b8a:	d105      	bne.n	1a002b98 <__aeabi_dmul+0x234>
1a002b8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002b90:	bf1c      	itt	ne
1a002b92:	4610      	movne	r0, r2
1a002b94:	4619      	movne	r1, r3
1a002b96:	d10a      	bne.n	1a002bae <__aeabi_dmul+0x24a>
1a002b98:	ea81 0103 	eor.w	r1, r1, r3
1a002b9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ba0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002ba4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002ba8:	f04f 0000 	mov.w	r0, #0
1a002bac:	bd70      	pop	{r4, r5, r6, pc}
1a002bae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002bb2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002bb6:	bd70      	pop	{r4, r5, r6, pc}

1a002bb8 <__aeabi_ddiv>:
1a002bb8:	b570      	push	{r4, r5, r6, lr}
1a002bba:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002bbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002bc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002bc6:	bf1d      	ittte	ne
1a002bc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002bcc:	ea94 0f0c 	teqne	r4, ip
1a002bd0:	ea95 0f0c 	teqne	r5, ip
1a002bd4:	f000 f8a7 	bleq	1a002d26 <__aeabi_ddiv+0x16e>
1a002bd8:	eba4 0405 	sub.w	r4, r4, r5
1a002bdc:	ea81 0e03 	eor.w	lr, r1, r3
1a002be0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002be4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002be8:	f000 8088 	beq.w	1a002cfc <__aeabi_ddiv+0x144>
1a002bec:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002bf0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002bf4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002bf8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002bfc:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002c00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002c04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002c08:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002c0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002c10:	429d      	cmp	r5, r3
1a002c12:	bf08      	it	eq
1a002c14:	4296      	cmpeq	r6, r2
1a002c16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002c1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002c1e:	d202      	bcs.n	1a002c26 <__aeabi_ddiv+0x6e>
1a002c20:	085b      	lsrs	r3, r3, #1
1a002c22:	ea4f 0232 	mov.w	r2, r2, rrx
1a002c26:	1ab6      	subs	r6, r6, r2
1a002c28:	eb65 0503 	sbc.w	r5, r5, r3
1a002c2c:	085b      	lsrs	r3, r3, #1
1a002c2e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002c32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002c36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002c3a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002c3e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002c42:	bf22      	ittt	cs
1a002c44:	1ab6      	subcs	r6, r6, r2
1a002c46:	4675      	movcs	r5, lr
1a002c48:	ea40 000c 	orrcs.w	r0, r0, ip
1a002c4c:	085b      	lsrs	r3, r3, #1
1a002c4e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002c52:	ebb6 0e02 	subs.w	lr, r6, r2
1a002c56:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002c5a:	bf22      	ittt	cs
1a002c5c:	1ab6      	subcs	r6, r6, r2
1a002c5e:	4675      	movcs	r5, lr
1a002c60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002c64:	085b      	lsrs	r3, r3, #1
1a002c66:	ea4f 0232 	mov.w	r2, r2, rrx
1a002c6a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002c6e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002c72:	bf22      	ittt	cs
1a002c74:	1ab6      	subcs	r6, r6, r2
1a002c76:	4675      	movcs	r5, lr
1a002c78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002c7c:	085b      	lsrs	r3, r3, #1
1a002c7e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002c82:	ebb6 0e02 	subs.w	lr, r6, r2
1a002c86:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002c8a:	bf22      	ittt	cs
1a002c8c:	1ab6      	subcs	r6, r6, r2
1a002c8e:	4675      	movcs	r5, lr
1a002c90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002c94:	ea55 0e06 	orrs.w	lr, r5, r6
1a002c98:	d018      	beq.n	1a002ccc <__aeabi_ddiv+0x114>
1a002c9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002c9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002ca2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002ca6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002caa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002cae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002cb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002cb6:	d1c0      	bne.n	1a002c3a <__aeabi_ddiv+0x82>
1a002cb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002cbc:	d10b      	bne.n	1a002cd6 <__aeabi_ddiv+0x11e>
1a002cbe:	ea41 0100 	orr.w	r1, r1, r0
1a002cc2:	f04f 0000 	mov.w	r0, #0
1a002cc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002cca:	e7b6      	b.n	1a002c3a <__aeabi_ddiv+0x82>
1a002ccc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002cd0:	bf04      	itt	eq
1a002cd2:	4301      	orreq	r1, r0
1a002cd4:	2000      	moveq	r0, #0
1a002cd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002cda:	bf88      	it	hi
1a002cdc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002ce0:	f63f aeaf 	bhi.w	1a002a42 <__aeabi_dmul+0xde>
1a002ce4:	ebb5 0c03 	subs.w	ip, r5, r3
1a002ce8:	bf04      	itt	eq
1a002cea:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002cee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002cf2:	f150 0000 	adcs.w	r0, r0, #0
1a002cf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002cfa:	bd70      	pop	{r4, r5, r6, pc}
1a002cfc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002d00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002d04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002d08:	bfc2      	ittt	gt
1a002d0a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002d0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002d12:	bd70      	popgt	{r4, r5, r6, pc}
1a002d14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002d18:	f04f 0e00 	mov.w	lr, #0
1a002d1c:	3c01      	subs	r4, #1
1a002d1e:	e690      	b.n	1a002a42 <__aeabi_dmul+0xde>
1a002d20:	ea45 0e06 	orr.w	lr, r5, r6
1a002d24:	e68d      	b.n	1a002a42 <__aeabi_dmul+0xde>
1a002d26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002d2a:	ea94 0f0c 	teq	r4, ip
1a002d2e:	bf08      	it	eq
1a002d30:	ea95 0f0c 	teqeq	r5, ip
1a002d34:	f43f af3b 	beq.w	1a002bae <__aeabi_dmul+0x24a>
1a002d38:	ea94 0f0c 	teq	r4, ip
1a002d3c:	d10a      	bne.n	1a002d54 <__aeabi_ddiv+0x19c>
1a002d3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002d42:	f47f af34 	bne.w	1a002bae <__aeabi_dmul+0x24a>
1a002d46:	ea95 0f0c 	teq	r5, ip
1a002d4a:	f47f af25 	bne.w	1a002b98 <__aeabi_dmul+0x234>
1a002d4e:	4610      	mov	r0, r2
1a002d50:	4619      	mov	r1, r3
1a002d52:	e72c      	b.n	1a002bae <__aeabi_dmul+0x24a>
1a002d54:	ea95 0f0c 	teq	r5, ip
1a002d58:	d106      	bne.n	1a002d68 <__aeabi_ddiv+0x1b0>
1a002d5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002d5e:	f43f aefd 	beq.w	1a002b5c <__aeabi_dmul+0x1f8>
1a002d62:	4610      	mov	r0, r2
1a002d64:	4619      	mov	r1, r3
1a002d66:	e722      	b.n	1a002bae <__aeabi_dmul+0x24a>
1a002d68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002d6c:	bf18      	it	ne
1a002d6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002d72:	f47f aec5 	bne.w	1a002b00 <__aeabi_dmul+0x19c>
1a002d76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002d7a:	f47f af0d 	bne.w	1a002b98 <__aeabi_dmul+0x234>
1a002d7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002d82:	f47f aeeb 	bne.w	1a002b5c <__aeabi_dmul+0x1f8>
1a002d86:	e712      	b.n	1a002bae <__aeabi_dmul+0x24a>

1a002d88 <__gedf2>:
1a002d88:	f04f 3cff 	mov.w	ip, #4294967295
1a002d8c:	e006      	b.n	1a002d9c <__cmpdf2+0x4>
1a002d8e:	bf00      	nop

1a002d90 <__ledf2>:
1a002d90:	f04f 0c01 	mov.w	ip, #1
1a002d94:	e002      	b.n	1a002d9c <__cmpdf2+0x4>
1a002d96:	bf00      	nop

1a002d98 <__cmpdf2>:
1a002d98:	f04f 0c01 	mov.w	ip, #1
1a002d9c:	f84d cd04 	str.w	ip, [sp, #-4]!
1a002da0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002da8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002dac:	bf18      	it	ne
1a002dae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a002db2:	d01b      	beq.n	1a002dec <__cmpdf2+0x54>
1a002db4:	b001      	add	sp, #4
1a002db6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002dba:	bf0c      	ite	eq
1a002dbc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a002dc0:	ea91 0f03 	teqne	r1, r3
1a002dc4:	bf02      	ittt	eq
1a002dc6:	ea90 0f02 	teqeq	r0, r2
1a002dca:	2000      	moveq	r0, #0
1a002dcc:	4770      	bxeq	lr
1a002dce:	f110 0f00 	cmn.w	r0, #0
1a002dd2:	ea91 0f03 	teq	r1, r3
1a002dd6:	bf58      	it	pl
1a002dd8:	4299      	cmppl	r1, r3
1a002dda:	bf08      	it	eq
1a002ddc:	4290      	cmpeq	r0, r2
1a002dde:	bf2c      	ite	cs
1a002de0:	17d8      	asrcs	r0, r3, #31
1a002de2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002de6:	f040 0001 	orr.w	r0, r0, #1
1a002dea:	4770      	bx	lr
1a002dec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002df0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002df4:	d102      	bne.n	1a002dfc <__cmpdf2+0x64>
1a002df6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002dfa:	d107      	bne.n	1a002e0c <__cmpdf2+0x74>
1a002dfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002e00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002e04:	d1d6      	bne.n	1a002db4 <__cmpdf2+0x1c>
1a002e06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002e0a:	d0d3      	beq.n	1a002db4 <__cmpdf2+0x1c>
1a002e0c:	f85d 0b04 	ldr.w	r0, [sp], #4
1a002e10:	4770      	bx	lr
1a002e12:	bf00      	nop

1a002e14 <__aeabi_cdrcmple>:
1a002e14:	4684      	mov	ip, r0
1a002e16:	4610      	mov	r0, r2
1a002e18:	4662      	mov	r2, ip
1a002e1a:	468c      	mov	ip, r1
1a002e1c:	4619      	mov	r1, r3
1a002e1e:	4663      	mov	r3, ip
1a002e20:	e000      	b.n	1a002e24 <__aeabi_cdcmpeq>
1a002e22:	bf00      	nop

1a002e24 <__aeabi_cdcmpeq>:
1a002e24:	b501      	push	{r0, lr}
1a002e26:	f7ff ffb7 	bl	1a002d98 <__cmpdf2>
1a002e2a:	2800      	cmp	r0, #0
1a002e2c:	bf48      	it	mi
1a002e2e:	f110 0f00 	cmnmi.w	r0, #0
1a002e32:	bd01      	pop	{r0, pc}

1a002e34 <__aeabi_dcmpeq>:
1a002e34:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002e38:	f7ff fff4 	bl	1a002e24 <__aeabi_cdcmpeq>
1a002e3c:	bf0c      	ite	eq
1a002e3e:	2001      	moveq	r0, #1
1a002e40:	2000      	movne	r0, #0
1a002e42:	f85d fb08 	ldr.w	pc, [sp], #8
1a002e46:	bf00      	nop

1a002e48 <__aeabi_dcmplt>:
1a002e48:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002e4c:	f7ff ffea 	bl	1a002e24 <__aeabi_cdcmpeq>
1a002e50:	bf34      	ite	cc
1a002e52:	2001      	movcc	r0, #1
1a002e54:	2000      	movcs	r0, #0
1a002e56:	f85d fb08 	ldr.w	pc, [sp], #8
1a002e5a:	bf00      	nop

1a002e5c <__aeabi_dcmple>:
1a002e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002e60:	f7ff ffe0 	bl	1a002e24 <__aeabi_cdcmpeq>
1a002e64:	bf94      	ite	ls
1a002e66:	2001      	movls	r0, #1
1a002e68:	2000      	movhi	r0, #0
1a002e6a:	f85d fb08 	ldr.w	pc, [sp], #8
1a002e6e:	bf00      	nop

1a002e70 <__aeabi_dcmpge>:
1a002e70:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002e74:	f7ff ffce 	bl	1a002e14 <__aeabi_cdrcmple>
1a002e78:	bf94      	ite	ls
1a002e7a:	2001      	movls	r0, #1
1a002e7c:	2000      	movhi	r0, #0
1a002e7e:	f85d fb08 	ldr.w	pc, [sp], #8
1a002e82:	bf00      	nop

1a002e84 <__aeabi_dcmpgt>:
1a002e84:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002e88:	f7ff ffc4 	bl	1a002e14 <__aeabi_cdrcmple>
1a002e8c:	bf34      	ite	cc
1a002e8e:	2001      	movcc	r0, #1
1a002e90:	2000      	movcs	r0, #0
1a002e92:	f85d fb08 	ldr.w	pc, [sp], #8
1a002e96:	bf00      	nop

1a002e98 <__aeabi_d2f>:
1a002e98:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002e9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a002ea0:	bf24      	itt	cs
1a002ea2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a002ea6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a002eaa:	d90d      	bls.n	1a002ec8 <__aeabi_d2f+0x30>
1a002eac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a002eb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a002eb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a002eb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a002ebc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a002ec0:	bf08      	it	eq
1a002ec2:	f020 0001 	biceq.w	r0, r0, #1
1a002ec6:	4770      	bx	lr
1a002ec8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a002ecc:	d121      	bne.n	1a002f12 <__aeabi_d2f+0x7a>
1a002ece:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a002ed2:	bfbc      	itt	lt
1a002ed4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a002ed8:	4770      	bxlt	lr
1a002eda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002ede:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a002ee2:	f1c2 0218 	rsb	r2, r2, #24
1a002ee6:	f1c2 0c20 	rsb	ip, r2, #32
1a002eea:	fa10 f30c 	lsls.w	r3, r0, ip
1a002eee:	fa20 f002 	lsr.w	r0, r0, r2
1a002ef2:	bf18      	it	ne
1a002ef4:	f040 0001 	orrne.w	r0, r0, #1
1a002ef8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002efc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a002f00:	fa03 fc0c 	lsl.w	ip, r3, ip
1a002f04:	ea40 000c 	orr.w	r0, r0, ip
1a002f08:	fa23 f302 	lsr.w	r3, r3, r2
1a002f0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a002f10:	e7cc      	b.n	1a002eac <__aeabi_d2f+0x14>
1a002f12:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a002f16:	d107      	bne.n	1a002f28 <__aeabi_d2f+0x90>
1a002f18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a002f1c:	bf1e      	ittt	ne
1a002f1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a002f22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a002f26:	4770      	bxne	lr
1a002f28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a002f2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a002f30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a002f34:	4770      	bx	lr
1a002f36:	bf00      	nop

1a002f38 <__aeabi_uldivmod>:
1a002f38:	b953      	cbnz	r3, 1a002f50 <__aeabi_uldivmod+0x18>
1a002f3a:	b94a      	cbnz	r2, 1a002f50 <__aeabi_uldivmod+0x18>
1a002f3c:	2900      	cmp	r1, #0
1a002f3e:	bf08      	it	eq
1a002f40:	2800      	cmpeq	r0, #0
1a002f42:	bf1c      	itt	ne
1a002f44:	f04f 31ff 	movne.w	r1, #4294967295
1a002f48:	f04f 30ff 	movne.w	r0, #4294967295
1a002f4c:	f000 b974 	b.w	1a003238 <__aeabi_idiv0>
1a002f50:	f1ad 0c08 	sub.w	ip, sp, #8
1a002f54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002f58:	f000 f806 	bl	1a002f68 <__udivmoddi4>
1a002f5c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002f64:	b004      	add	sp, #16
1a002f66:	4770      	bx	lr

1a002f68 <__udivmoddi4>:
1a002f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002f6c:	9e08      	ldr	r6, [sp, #32]
1a002f6e:	4604      	mov	r4, r0
1a002f70:	4688      	mov	r8, r1
1a002f72:	2b00      	cmp	r3, #0
1a002f74:	f040 8085 	bne.w	1a003082 <__udivmoddi4+0x11a>
1a002f78:	428a      	cmp	r2, r1
1a002f7a:	4615      	mov	r5, r2
1a002f7c:	d948      	bls.n	1a003010 <__udivmoddi4+0xa8>
1a002f7e:	fab2 f282 	clz	r2, r2
1a002f82:	b14a      	cbz	r2, 1a002f98 <__udivmoddi4+0x30>
1a002f84:	f1c2 0720 	rsb	r7, r2, #32
1a002f88:	fa01 f302 	lsl.w	r3, r1, r2
1a002f8c:	fa20 f707 	lsr.w	r7, r0, r7
1a002f90:	4095      	lsls	r5, r2
1a002f92:	ea47 0803 	orr.w	r8, r7, r3
1a002f96:	4094      	lsls	r4, r2
1a002f98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002f9c:	0c23      	lsrs	r3, r4, #16
1a002f9e:	fbb8 f7fe 	udiv	r7, r8, lr
1a002fa2:	fa1f fc85 	uxth.w	ip, r5
1a002fa6:	fb0e 8817 	mls	r8, lr, r7, r8
1a002faa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002fae:	fb07 f10c 	mul.w	r1, r7, ip
1a002fb2:	4299      	cmp	r1, r3
1a002fb4:	d909      	bls.n	1a002fca <__udivmoddi4+0x62>
1a002fb6:	18eb      	adds	r3, r5, r3
1a002fb8:	f107 30ff 	add.w	r0, r7, #4294967295
1a002fbc:	f080 80e3 	bcs.w	1a003186 <__udivmoddi4+0x21e>
1a002fc0:	4299      	cmp	r1, r3
1a002fc2:	f240 80e0 	bls.w	1a003186 <__udivmoddi4+0x21e>
1a002fc6:	3f02      	subs	r7, #2
1a002fc8:	442b      	add	r3, r5
1a002fca:	1a5b      	subs	r3, r3, r1
1a002fcc:	b2a4      	uxth	r4, r4
1a002fce:	fbb3 f0fe 	udiv	r0, r3, lr
1a002fd2:	fb0e 3310 	mls	r3, lr, r0, r3
1a002fd6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002fda:	fb00 fc0c 	mul.w	ip, r0, ip
1a002fde:	45a4      	cmp	ip, r4
1a002fe0:	d909      	bls.n	1a002ff6 <__udivmoddi4+0x8e>
1a002fe2:	192c      	adds	r4, r5, r4
1a002fe4:	f100 33ff 	add.w	r3, r0, #4294967295
1a002fe8:	f080 80cb 	bcs.w	1a003182 <__udivmoddi4+0x21a>
1a002fec:	45a4      	cmp	ip, r4
1a002fee:	f240 80c8 	bls.w	1a003182 <__udivmoddi4+0x21a>
1a002ff2:	3802      	subs	r0, #2
1a002ff4:	442c      	add	r4, r5
1a002ff6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002ffa:	eba4 040c 	sub.w	r4, r4, ip
1a002ffe:	2700      	movs	r7, #0
1a003000:	b11e      	cbz	r6, 1a00300a <__udivmoddi4+0xa2>
1a003002:	40d4      	lsrs	r4, r2
1a003004:	2300      	movs	r3, #0
1a003006:	e9c6 4300 	strd	r4, r3, [r6]
1a00300a:	4639      	mov	r1, r7
1a00300c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003010:	2a00      	cmp	r2, #0
1a003012:	d053      	beq.n	1a0030bc <__udivmoddi4+0x154>
1a003014:	fab2 f282 	clz	r2, r2
1a003018:	2a00      	cmp	r2, #0
1a00301a:	f040 80b6 	bne.w	1a00318a <__udivmoddi4+0x222>
1a00301e:	1b49      	subs	r1, r1, r5
1a003020:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003024:	fa1f f885 	uxth.w	r8, r5
1a003028:	2701      	movs	r7, #1
1a00302a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00302e:	0c23      	lsrs	r3, r4, #16
1a003030:	fb0e 111c 	mls	r1, lr, ip, r1
1a003034:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003038:	fb08 f10c 	mul.w	r1, r8, ip
1a00303c:	4299      	cmp	r1, r3
1a00303e:	d907      	bls.n	1a003050 <__udivmoddi4+0xe8>
1a003040:	18eb      	adds	r3, r5, r3
1a003042:	f10c 30ff 	add.w	r0, ip, #4294967295
1a003046:	d202      	bcs.n	1a00304e <__udivmoddi4+0xe6>
1a003048:	4299      	cmp	r1, r3
1a00304a:	f200 80ec 	bhi.w	1a003226 <__udivmoddi4+0x2be>
1a00304e:	4684      	mov	ip, r0
1a003050:	1a59      	subs	r1, r3, r1
1a003052:	b2a3      	uxth	r3, r4
1a003054:	fbb1 f0fe 	udiv	r0, r1, lr
1a003058:	fb0e 1410 	mls	r4, lr, r0, r1
1a00305c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003060:	fb08 f800 	mul.w	r8, r8, r0
1a003064:	45a0      	cmp	r8, r4
1a003066:	d907      	bls.n	1a003078 <__udivmoddi4+0x110>
1a003068:	192c      	adds	r4, r5, r4
1a00306a:	f100 33ff 	add.w	r3, r0, #4294967295
1a00306e:	d202      	bcs.n	1a003076 <__udivmoddi4+0x10e>
1a003070:	45a0      	cmp	r8, r4
1a003072:	f200 80dc 	bhi.w	1a00322e <__udivmoddi4+0x2c6>
1a003076:	4618      	mov	r0, r3
1a003078:	eba4 0408 	sub.w	r4, r4, r8
1a00307c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003080:	e7be      	b.n	1a003000 <__udivmoddi4+0x98>
1a003082:	428b      	cmp	r3, r1
1a003084:	d908      	bls.n	1a003098 <__udivmoddi4+0x130>
1a003086:	2e00      	cmp	r6, #0
1a003088:	d078      	beq.n	1a00317c <__udivmoddi4+0x214>
1a00308a:	2700      	movs	r7, #0
1a00308c:	e9c6 0100 	strd	r0, r1, [r6]
1a003090:	4638      	mov	r0, r7
1a003092:	4639      	mov	r1, r7
1a003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003098:	fab3 f783 	clz	r7, r3
1a00309c:	b97f      	cbnz	r7, 1a0030be <__udivmoddi4+0x156>
1a00309e:	428b      	cmp	r3, r1
1a0030a0:	d302      	bcc.n	1a0030a8 <__udivmoddi4+0x140>
1a0030a2:	4282      	cmp	r2, r0
1a0030a4:	f200 80bd 	bhi.w	1a003222 <__udivmoddi4+0x2ba>
1a0030a8:	1a84      	subs	r4, r0, r2
1a0030aa:	eb61 0303 	sbc.w	r3, r1, r3
1a0030ae:	2001      	movs	r0, #1
1a0030b0:	4698      	mov	r8, r3
1a0030b2:	2e00      	cmp	r6, #0
1a0030b4:	d0a9      	beq.n	1a00300a <__udivmoddi4+0xa2>
1a0030b6:	e9c6 4800 	strd	r4, r8, [r6]
1a0030ba:	e7a6      	b.n	1a00300a <__udivmoddi4+0xa2>
1a0030bc:	deff      	udf	#255	; 0xff
1a0030be:	f1c7 0520 	rsb	r5, r7, #32
1a0030c2:	40bb      	lsls	r3, r7
1a0030c4:	fa22 fc05 	lsr.w	ip, r2, r5
1a0030c8:	ea4c 0c03 	orr.w	ip, ip, r3
1a0030cc:	fa01 f407 	lsl.w	r4, r1, r7
1a0030d0:	fa20 f805 	lsr.w	r8, r0, r5
1a0030d4:	fa21 f305 	lsr.w	r3, r1, r5
1a0030d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0030dc:	ea48 0404 	orr.w	r4, r8, r4
1a0030e0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0030e4:	0c21      	lsrs	r1, r4, #16
1a0030e6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0030ea:	fa1f f88c 	uxth.w	r8, ip
1a0030ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0030f2:	fb09 fa08 	mul.w	sl, r9, r8
1a0030f6:	459a      	cmp	sl, r3
1a0030f8:	fa02 f207 	lsl.w	r2, r2, r7
1a0030fc:	fa00 f107 	lsl.w	r1, r0, r7
1a003100:	d90b      	bls.n	1a00311a <__udivmoddi4+0x1b2>
1a003102:	eb1c 0303 	adds.w	r3, ip, r3
1a003106:	f109 30ff 	add.w	r0, r9, #4294967295
1a00310a:	f080 8088 	bcs.w	1a00321e <__udivmoddi4+0x2b6>
1a00310e:	459a      	cmp	sl, r3
1a003110:	f240 8085 	bls.w	1a00321e <__udivmoddi4+0x2b6>
1a003114:	f1a9 0902 	sub.w	r9, r9, #2
1a003118:	4463      	add	r3, ip
1a00311a:	eba3 030a 	sub.w	r3, r3, sl
1a00311e:	b2a4      	uxth	r4, r4
1a003120:	fbb3 f0fe 	udiv	r0, r3, lr
1a003124:	fb0e 3310 	mls	r3, lr, r0, r3
1a003128:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00312c:	fb00 f808 	mul.w	r8, r0, r8
1a003130:	45a0      	cmp	r8, r4
1a003132:	d908      	bls.n	1a003146 <__udivmoddi4+0x1de>
1a003134:	eb1c 0404 	adds.w	r4, ip, r4
1a003138:	f100 33ff 	add.w	r3, r0, #4294967295
1a00313c:	d26b      	bcs.n	1a003216 <__udivmoddi4+0x2ae>
1a00313e:	45a0      	cmp	r8, r4
1a003140:	d969      	bls.n	1a003216 <__udivmoddi4+0x2ae>
1a003142:	3802      	subs	r0, #2
1a003144:	4464      	add	r4, ip
1a003146:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00314a:	eba4 0408 	sub.w	r4, r4, r8
1a00314e:	fba0 8902 	umull	r8, r9, r0, r2
1a003152:	454c      	cmp	r4, r9
1a003154:	46c6      	mov	lr, r8
1a003156:	464b      	mov	r3, r9
1a003158:	d354      	bcc.n	1a003204 <__udivmoddi4+0x29c>
1a00315a:	d051      	beq.n	1a003200 <__udivmoddi4+0x298>
1a00315c:	2e00      	cmp	r6, #0
1a00315e:	d069      	beq.n	1a003234 <__udivmoddi4+0x2cc>
1a003160:	ebb1 020e 	subs.w	r2, r1, lr
1a003164:	eb64 0403 	sbc.w	r4, r4, r3
1a003168:	fa04 f505 	lsl.w	r5, r4, r5
1a00316c:	fa22 f307 	lsr.w	r3, r2, r7
1a003170:	40fc      	lsrs	r4, r7
1a003172:	431d      	orrs	r5, r3
1a003174:	e9c6 5400 	strd	r5, r4, [r6]
1a003178:	2700      	movs	r7, #0
1a00317a:	e746      	b.n	1a00300a <__udivmoddi4+0xa2>
1a00317c:	4637      	mov	r7, r6
1a00317e:	4630      	mov	r0, r6
1a003180:	e743      	b.n	1a00300a <__udivmoddi4+0xa2>
1a003182:	4618      	mov	r0, r3
1a003184:	e737      	b.n	1a002ff6 <__udivmoddi4+0x8e>
1a003186:	4607      	mov	r7, r0
1a003188:	e71f      	b.n	1a002fca <__udivmoddi4+0x62>
1a00318a:	f1c2 0320 	rsb	r3, r2, #32
1a00318e:	fa20 f703 	lsr.w	r7, r0, r3
1a003192:	4095      	lsls	r5, r2
1a003194:	fa01 f002 	lsl.w	r0, r1, r2
1a003198:	fa21 f303 	lsr.w	r3, r1, r3
1a00319c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0031a0:	4338      	orrs	r0, r7
1a0031a2:	0c01      	lsrs	r1, r0, #16
1a0031a4:	fbb3 f7fe 	udiv	r7, r3, lr
1a0031a8:	fa1f f885 	uxth.w	r8, r5
1a0031ac:	fb0e 3317 	mls	r3, lr, r7, r3
1a0031b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0031b4:	fb07 f308 	mul.w	r3, r7, r8
1a0031b8:	428b      	cmp	r3, r1
1a0031ba:	fa04 f402 	lsl.w	r4, r4, r2
1a0031be:	d907      	bls.n	1a0031d0 <__udivmoddi4+0x268>
1a0031c0:	1869      	adds	r1, r5, r1
1a0031c2:	f107 3cff 	add.w	ip, r7, #4294967295
1a0031c6:	d228      	bcs.n	1a00321a <__udivmoddi4+0x2b2>
1a0031c8:	428b      	cmp	r3, r1
1a0031ca:	d926      	bls.n	1a00321a <__udivmoddi4+0x2b2>
1a0031cc:	3f02      	subs	r7, #2
1a0031ce:	4429      	add	r1, r5
1a0031d0:	1acb      	subs	r3, r1, r3
1a0031d2:	b281      	uxth	r1, r0
1a0031d4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0031d8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0031dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0031e0:	fb00 f308 	mul.w	r3, r0, r8
1a0031e4:	428b      	cmp	r3, r1
1a0031e6:	d907      	bls.n	1a0031f8 <__udivmoddi4+0x290>
1a0031e8:	1869      	adds	r1, r5, r1
1a0031ea:	f100 3cff 	add.w	ip, r0, #4294967295
1a0031ee:	d210      	bcs.n	1a003212 <__udivmoddi4+0x2aa>
1a0031f0:	428b      	cmp	r3, r1
1a0031f2:	d90e      	bls.n	1a003212 <__udivmoddi4+0x2aa>
1a0031f4:	3802      	subs	r0, #2
1a0031f6:	4429      	add	r1, r5
1a0031f8:	1ac9      	subs	r1, r1, r3
1a0031fa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0031fe:	e714      	b.n	1a00302a <__udivmoddi4+0xc2>
1a003200:	4541      	cmp	r1, r8
1a003202:	d2ab      	bcs.n	1a00315c <__udivmoddi4+0x1f4>
1a003204:	ebb8 0e02 	subs.w	lr, r8, r2
1a003208:	eb69 020c 	sbc.w	r2, r9, ip
1a00320c:	3801      	subs	r0, #1
1a00320e:	4613      	mov	r3, r2
1a003210:	e7a4      	b.n	1a00315c <__udivmoddi4+0x1f4>
1a003212:	4660      	mov	r0, ip
1a003214:	e7f0      	b.n	1a0031f8 <__udivmoddi4+0x290>
1a003216:	4618      	mov	r0, r3
1a003218:	e795      	b.n	1a003146 <__udivmoddi4+0x1de>
1a00321a:	4667      	mov	r7, ip
1a00321c:	e7d8      	b.n	1a0031d0 <__udivmoddi4+0x268>
1a00321e:	4681      	mov	r9, r0
1a003220:	e77b      	b.n	1a00311a <__udivmoddi4+0x1b2>
1a003222:	4638      	mov	r0, r7
1a003224:	e745      	b.n	1a0030b2 <__udivmoddi4+0x14a>
1a003226:	f1ac 0c02 	sub.w	ip, ip, #2
1a00322a:	442b      	add	r3, r5
1a00322c:	e710      	b.n	1a003050 <__udivmoddi4+0xe8>
1a00322e:	3802      	subs	r0, #2
1a003230:	442c      	add	r4, r5
1a003232:	e721      	b.n	1a003078 <__udivmoddi4+0x110>
1a003234:	4637      	mov	r7, r6
1a003236:	e6e8      	b.n	1a00300a <__udivmoddi4+0xa2>

1a003238 <__aeabi_idiv0>:
1a003238:	4770      	bx	lr
1a00323a:	bf00      	nop

1a00323c <_fclose_r>:
1a00323c:	b570      	push	{r4, r5, r6, lr}
1a00323e:	2900      	cmp	r1, #0
1a003240:	d04a      	beq.n	1a0032d8 <_fclose_r+0x9c>
1a003242:	4605      	mov	r5, r0
1a003244:	460c      	mov	r4, r1
1a003246:	b110      	cbz	r0, 1a00324e <_fclose_r+0x12>
1a003248:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00324a:	2b00      	cmp	r3, #0
1a00324c:	d047      	beq.n	1a0032de <_fclose_r+0xa2>
1a00324e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003254:	07d8      	lsls	r0, r3, #31
1a003256:	d532      	bpl.n	1a0032be <_fclose_r+0x82>
1a003258:	2a00      	cmp	r2, #0
1a00325a:	d03d      	beq.n	1a0032d8 <_fclose_r+0x9c>
1a00325c:	4621      	mov	r1, r4
1a00325e:	4628      	mov	r0, r5
1a003260:	f000 f854 	bl	1a00330c <__sflush_r>
1a003264:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003266:	4606      	mov	r6, r0
1a003268:	b133      	cbz	r3, 1a003278 <_fclose_r+0x3c>
1a00326a:	69e1      	ldr	r1, [r4, #28]
1a00326c:	4628      	mov	r0, r5
1a00326e:	4798      	blx	r3
1a003270:	2800      	cmp	r0, #0
1a003272:	bfb8      	it	lt
1a003274:	f04f 36ff 	movlt.w	r6, #4294967295
1a003278:	89a3      	ldrh	r3, [r4, #12]
1a00327a:	061a      	lsls	r2, r3, #24
1a00327c:	d43c      	bmi.n	1a0032f8 <_fclose_r+0xbc>
1a00327e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a003280:	b141      	cbz	r1, 1a003294 <_fclose_r+0x58>
1a003282:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a003286:	4299      	cmp	r1, r3
1a003288:	d002      	beq.n	1a003290 <_fclose_r+0x54>
1a00328a:	4628      	mov	r0, r5
1a00328c:	f000 f9c6 	bl	1a00361c <_free_r>
1a003290:	2300      	movs	r3, #0
1a003292:	6323      	str	r3, [r4, #48]	; 0x30
1a003294:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a003296:	b121      	cbz	r1, 1a0032a2 <_fclose_r+0x66>
1a003298:	4628      	mov	r0, r5
1a00329a:	f000 f9bf 	bl	1a00361c <_free_r>
1a00329e:	2300      	movs	r3, #0
1a0032a0:	6463      	str	r3, [r4, #68]	; 0x44
1a0032a2:	f000 f95f 	bl	1a003564 <__sfp_lock_acquire>
1a0032a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0032a8:	2200      	movs	r2, #0
1a0032aa:	07db      	lsls	r3, r3, #31
1a0032ac:	81a2      	strh	r2, [r4, #12]
1a0032ae:	d528      	bpl.n	1a003302 <_fclose_r+0xc6>
1a0032b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0032b2:	f000 faf9 	bl	1a0038a8 <__retarget_lock_close_recursive>
1a0032b6:	f000 f95b 	bl	1a003570 <__sfp_lock_release>
1a0032ba:	4630      	mov	r0, r6
1a0032bc:	bd70      	pop	{r4, r5, r6, pc}
1a0032be:	0591      	lsls	r1, r2, #22
1a0032c0:	d4cc      	bmi.n	1a00325c <_fclose_r+0x20>
1a0032c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0032c4:	f000 faf2 	bl	1a0038ac <__retarget_lock_acquire_recursive>
1a0032c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0032cc:	2b00      	cmp	r3, #0
1a0032ce:	d1c5      	bne.n	1a00325c <_fclose_r+0x20>
1a0032d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0032d2:	f016 0601 	ands.w	r6, r6, #1
1a0032d6:	d00a      	beq.n	1a0032ee <_fclose_r+0xb2>
1a0032d8:	2600      	movs	r6, #0
1a0032da:	4630      	mov	r0, r6
1a0032dc:	bd70      	pop	{r4, r5, r6, pc}
1a0032de:	f000 f917 	bl	1a003510 <__sinit>
1a0032e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0032e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0032e8:	07d8      	lsls	r0, r3, #31
1a0032ea:	d4b5      	bmi.n	1a003258 <_fclose_r+0x1c>
1a0032ec:	e7e7      	b.n	1a0032be <_fclose_r+0x82>
1a0032ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0032f0:	f000 fade 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a0032f4:	4630      	mov	r0, r6
1a0032f6:	bd70      	pop	{r4, r5, r6, pc}
1a0032f8:	6921      	ldr	r1, [r4, #16]
1a0032fa:	4628      	mov	r0, r5
1a0032fc:	f000 f98e 	bl	1a00361c <_free_r>
1a003300:	e7bd      	b.n	1a00327e <_fclose_r+0x42>
1a003302:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003304:	f000 fad4 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a003308:	e7d2      	b.n	1a0032b0 <_fclose_r+0x74>
1a00330a:	bf00      	nop

1a00330c <__sflush_r>:
1a00330c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a003310:	b29a      	uxth	r2, r3
1a003312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003316:	460c      	mov	r4, r1
1a003318:	0711      	lsls	r1, r2, #28
1a00331a:	4680      	mov	r8, r0
1a00331c:	d448      	bmi.n	1a0033b0 <__sflush_r+0xa4>
1a00331e:	6862      	ldr	r2, [r4, #4]
1a003320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003324:	2a00      	cmp	r2, #0
1a003326:	81a3      	strh	r3, [r4, #12]
1a003328:	dd5d      	ble.n	1a0033e6 <__sflush_r+0xda>
1a00332a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a00332c:	2d00      	cmp	r5, #0
1a00332e:	d057      	beq.n	1a0033e0 <__sflush_r+0xd4>
1a003330:	2200      	movs	r2, #0
1a003332:	b29b      	uxth	r3, r3
1a003334:	f8d8 6000 	ldr.w	r6, [r8]
1a003338:	69e1      	ldr	r1, [r4, #28]
1a00333a:	f8c8 2000 	str.w	r2, [r8]
1a00333e:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a003342:	d154      	bne.n	1a0033ee <__sflush_r+0xe2>
1a003344:	2301      	movs	r3, #1
1a003346:	4640      	mov	r0, r8
1a003348:	47a8      	blx	r5
1a00334a:	1c43      	adds	r3, r0, #1
1a00334c:	4602      	mov	r2, r0
1a00334e:	d065      	beq.n	1a00341c <__sflush_r+0x110>
1a003350:	89a3      	ldrh	r3, [r4, #12]
1a003352:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a003354:	69e1      	ldr	r1, [r4, #28]
1a003356:	075f      	lsls	r7, r3, #29
1a003358:	d505      	bpl.n	1a003366 <__sflush_r+0x5a>
1a00335a:	6860      	ldr	r0, [r4, #4]
1a00335c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00335e:	1a12      	subs	r2, r2, r0
1a003360:	b10b      	cbz	r3, 1a003366 <__sflush_r+0x5a>
1a003362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003364:	1ad2      	subs	r2, r2, r3
1a003366:	2300      	movs	r3, #0
1a003368:	4640      	mov	r0, r8
1a00336a:	47a8      	blx	r5
1a00336c:	1c45      	adds	r5, r0, #1
1a00336e:	d148      	bne.n	1a003402 <__sflush_r+0xf6>
1a003370:	f8d8 2000 	ldr.w	r2, [r8]
1a003374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003378:	2a00      	cmp	r2, #0
1a00337a:	d05c      	beq.n	1a003436 <__sflush_r+0x12a>
1a00337c:	2a1d      	cmp	r2, #29
1a00337e:	d001      	beq.n	1a003384 <__sflush_r+0x78>
1a003380:	2a16      	cmp	r2, #22
1a003382:	d164      	bne.n	1a00344e <__sflush_r+0x142>
1a003384:	6922      	ldr	r2, [r4, #16]
1a003386:	2100      	movs	r1, #0
1a003388:	e9c4 2100 	strd	r2, r1, [r4]
1a00338c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a003390:	81a3      	strh	r3, [r4, #12]
1a003392:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a003394:	f8c8 6000 	str.w	r6, [r8]
1a003398:	b311      	cbz	r1, 1a0033e0 <__sflush_r+0xd4>
1a00339a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00339e:	4299      	cmp	r1, r3
1a0033a0:	d002      	beq.n	1a0033a8 <__sflush_r+0x9c>
1a0033a2:	4640      	mov	r0, r8
1a0033a4:	f000 f93a 	bl	1a00361c <_free_r>
1a0033a8:	2000      	movs	r0, #0
1a0033aa:	6320      	str	r0, [r4, #48]	; 0x30
1a0033ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0033b0:	6926      	ldr	r6, [r4, #16]
1a0033b2:	b1ae      	cbz	r6, 1a0033e0 <__sflush_r+0xd4>
1a0033b4:	6825      	ldr	r5, [r4, #0]
1a0033b6:	6026      	str	r6, [r4, #0]
1a0033b8:	0791      	lsls	r1, r2, #30
1a0033ba:	bf0c      	ite	eq
1a0033bc:	6963      	ldreq	r3, [r4, #20]
1a0033be:	2300      	movne	r3, #0
1a0033c0:	1bad      	subs	r5, r5, r6
1a0033c2:	60a3      	str	r3, [r4, #8]
1a0033c4:	e00a      	b.n	1a0033dc <__sflush_r+0xd0>
1a0033c6:	462b      	mov	r3, r5
1a0033c8:	4632      	mov	r2, r6
1a0033ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0033cc:	69e1      	ldr	r1, [r4, #28]
1a0033ce:	4640      	mov	r0, r8
1a0033d0:	47b8      	blx	r7
1a0033d2:	2800      	cmp	r0, #0
1a0033d4:	eba5 0500 	sub.w	r5, r5, r0
1a0033d8:	4406      	add	r6, r0
1a0033da:	dd0a      	ble.n	1a0033f2 <__sflush_r+0xe6>
1a0033dc:	2d00      	cmp	r5, #0
1a0033de:	dcf2      	bgt.n	1a0033c6 <__sflush_r+0xba>
1a0033e0:	2000      	movs	r0, #0
1a0033e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0033e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0033e8:	2a00      	cmp	r2, #0
1a0033ea:	dc9e      	bgt.n	1a00332a <__sflush_r+0x1e>
1a0033ec:	e7f8      	b.n	1a0033e0 <__sflush_r+0xd4>
1a0033ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a0033f0:	e7b1      	b.n	1a003356 <__sflush_r+0x4a>
1a0033f2:	89a3      	ldrh	r3, [r4, #12]
1a0033f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0033f8:	81a3      	strh	r3, [r4, #12]
1a0033fa:	f04f 30ff 	mov.w	r0, #4294967295
1a0033fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003406:	6922      	ldr	r2, [r4, #16]
1a003408:	6022      	str	r2, [r4, #0]
1a00340a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a00340e:	2200      	movs	r2, #0
1a003410:	6062      	str	r2, [r4, #4]
1a003412:	04da      	lsls	r2, r3, #19
1a003414:	81a3      	strh	r3, [r4, #12]
1a003416:	d5bc      	bpl.n	1a003392 <__sflush_r+0x86>
1a003418:	6520      	str	r0, [r4, #80]	; 0x50
1a00341a:	e7ba      	b.n	1a003392 <__sflush_r+0x86>
1a00341c:	f8d8 3000 	ldr.w	r3, [r8]
1a003420:	2b00      	cmp	r3, #0
1a003422:	d095      	beq.n	1a003350 <__sflush_r+0x44>
1a003424:	2b1d      	cmp	r3, #29
1a003426:	d00f      	beq.n	1a003448 <__sflush_r+0x13c>
1a003428:	2b16      	cmp	r3, #22
1a00342a:	d00d      	beq.n	1a003448 <__sflush_r+0x13c>
1a00342c:	89a3      	ldrh	r3, [r4, #12]
1a00342e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003432:	81a3      	strh	r3, [r4, #12]
1a003434:	e7d5      	b.n	1a0033e2 <__sflush_r+0xd6>
1a003436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a00343a:	6921      	ldr	r1, [r4, #16]
1a00343c:	81a3      	strh	r3, [r4, #12]
1a00343e:	04db      	lsls	r3, r3, #19
1a003440:	e9c4 1200 	strd	r1, r2, [r4]
1a003444:	d5a5      	bpl.n	1a003392 <__sflush_r+0x86>
1a003446:	e7e7      	b.n	1a003418 <__sflush_r+0x10c>
1a003448:	f8c8 6000 	str.w	r6, [r8]
1a00344c:	e7c8      	b.n	1a0033e0 <__sflush_r+0xd4>
1a00344e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003452:	81a3      	strh	r3, [r4, #12]
1a003454:	e7c5      	b.n	1a0033e2 <__sflush_r+0xd6>
1a003456:	bf00      	nop

1a003458 <_fflush_r>:
1a003458:	b538      	push	{r3, r4, r5, lr}
1a00345a:	460d      	mov	r5, r1
1a00345c:	4604      	mov	r4, r0
1a00345e:	b108      	cbz	r0, 1a003464 <_fflush_r+0xc>
1a003460:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a003462:	b1a3      	cbz	r3, 1a00348e <_fflush_r+0x36>
1a003464:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a003468:	b1b8      	cbz	r0, 1a00349a <_fflush_r+0x42>
1a00346a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00346c:	07db      	lsls	r3, r3, #31
1a00346e:	d401      	bmi.n	1a003474 <_fflush_r+0x1c>
1a003470:	0581      	lsls	r1, r0, #22
1a003472:	d515      	bpl.n	1a0034a0 <_fflush_r+0x48>
1a003474:	4620      	mov	r0, r4
1a003476:	4629      	mov	r1, r5
1a003478:	f7ff ff48 	bl	1a00330c <__sflush_r>
1a00347c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00347e:	07da      	lsls	r2, r3, #31
1a003480:	4604      	mov	r4, r0
1a003482:	d402      	bmi.n	1a00348a <_fflush_r+0x32>
1a003484:	89ab      	ldrh	r3, [r5, #12]
1a003486:	059b      	lsls	r3, r3, #22
1a003488:	d50e      	bpl.n	1a0034a8 <_fflush_r+0x50>
1a00348a:	4620      	mov	r0, r4
1a00348c:	bd38      	pop	{r3, r4, r5, pc}
1a00348e:	f000 f83f 	bl	1a003510 <__sinit>
1a003492:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a003496:	2800      	cmp	r0, #0
1a003498:	d1e7      	bne.n	1a00346a <_fflush_r+0x12>
1a00349a:	4604      	mov	r4, r0
1a00349c:	4620      	mov	r0, r4
1a00349e:	bd38      	pop	{r3, r4, r5, pc}
1a0034a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0034a2:	f000 fa03 	bl	1a0038ac <__retarget_lock_acquire_recursive>
1a0034a6:	e7e5      	b.n	1a003474 <_fflush_r+0x1c>
1a0034a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0034aa:	f000 fa01 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a0034ae:	4620      	mov	r0, r4
1a0034b0:	bd38      	pop	{r3, r4, r5, pc}
1a0034b2:	bf00      	nop

1a0034b4 <std>:
1a0034b4:	b510      	push	{r4, lr}
1a0034b6:	2300      	movs	r3, #0
1a0034b8:	4604      	mov	r4, r0
1a0034ba:	8181      	strh	r1, [r0, #12]
1a0034bc:	81c2      	strh	r2, [r0, #14]
1a0034be:	e9c0 3300 	strd	r3, r3, [r0]
1a0034c2:	6083      	str	r3, [r0, #8]
1a0034c4:	6643      	str	r3, [r0, #100]	; 0x64
1a0034c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0034ca:	6183      	str	r3, [r0, #24]
1a0034cc:	4619      	mov	r1, r3
1a0034ce:	2208      	movs	r2, #8
1a0034d0:	305c      	adds	r0, #92	; 0x5c
1a0034d2:	f000 fd41 	bl	1a003f58 <memset>
1a0034d6:	4807      	ldr	r0, [pc, #28]	; (1a0034f4 <std+0x40>)
1a0034d8:	4907      	ldr	r1, [pc, #28]	; (1a0034f8 <std+0x44>)
1a0034da:	4a08      	ldr	r2, [pc, #32]	; (1a0034fc <std+0x48>)
1a0034dc:	4b08      	ldr	r3, [pc, #32]	; (1a003500 <std+0x4c>)
1a0034de:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0034e0:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a0034e4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a0034e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0034ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0034f0:	f000 b9d8 	b.w	1a0038a4 <__retarget_lock_init_recursive>
1a0034f4:	1a0040e5 	.word	0x1a0040e5
1a0034f8:	1a004109 	.word	0x1a004109
1a0034fc:	1a004149 	.word	0x1a004149
1a003500:	1a004169 	.word	0x1a004169

1a003504 <_cleanup_r>:
1a003504:	4901      	ldr	r1, [pc, #4]	; (1a00350c <_cleanup_r+0x8>)
1a003506:	f000 b97f 	b.w	1a003808 <_fwalk_reent>
1a00350a:	bf00      	nop
1a00350c:	1a00323d 	.word	0x1a00323d

1a003510 <__sinit>:
1a003510:	b510      	push	{r4, lr}
1a003512:	4604      	mov	r4, r0
1a003514:	4811      	ldr	r0, [pc, #68]	; (1a00355c <__sinit+0x4c>)
1a003516:	f000 f9c9 	bl	1a0038ac <__retarget_lock_acquire_recursive>
1a00351a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00351c:	b9c2      	cbnz	r2, 1a003550 <__sinit+0x40>
1a00351e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a003522:	480f      	ldr	r0, [pc, #60]	; (1a003560 <__sinit+0x50>)
1a003524:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a003528:	2103      	movs	r1, #3
1a00352a:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a00352e:	63e0      	str	r0, [r4, #60]	; 0x3c
1a003530:	2104      	movs	r1, #4
1a003532:	6860      	ldr	r0, [r4, #4]
1a003534:	f7ff ffbe 	bl	1a0034b4 <std>
1a003538:	2201      	movs	r2, #1
1a00353a:	2109      	movs	r1, #9
1a00353c:	68a0      	ldr	r0, [r4, #8]
1a00353e:	f7ff ffb9 	bl	1a0034b4 <std>
1a003542:	2202      	movs	r2, #2
1a003544:	2112      	movs	r1, #18
1a003546:	68e0      	ldr	r0, [r4, #12]
1a003548:	f7ff ffb4 	bl	1a0034b4 <std>
1a00354c:	2301      	movs	r3, #1
1a00354e:	63a3      	str	r3, [r4, #56]	; 0x38
1a003550:	4802      	ldr	r0, [pc, #8]	; (1a00355c <__sinit+0x4c>)
1a003552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003556:	f000 b9ab 	b.w	1a0038b0 <__retarget_lock_release_recursive>
1a00355a:	bf00      	nop
1a00355c:	10000bb8 	.word	0x10000bb8
1a003560:	1a003505 	.word	0x1a003505

1a003564 <__sfp_lock_acquire>:
1a003564:	4801      	ldr	r0, [pc, #4]	; (1a00356c <__sfp_lock_acquire+0x8>)
1a003566:	f000 b9a1 	b.w	1a0038ac <__retarget_lock_acquire_recursive>
1a00356a:	bf00      	nop
1a00356c:	10000bcc 	.word	0x10000bcc

1a003570 <__sfp_lock_release>:
1a003570:	4801      	ldr	r0, [pc, #4]	; (1a003578 <__sfp_lock_release+0x8>)
1a003572:	f000 b99d 	b.w	1a0038b0 <__retarget_lock_release_recursive>
1a003576:	bf00      	nop
1a003578:	10000bcc 	.word	0x10000bcc

1a00357c <_malloc_trim_r>:
1a00357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00357e:	4f24      	ldr	r7, [pc, #144]	; (1a003610 <_malloc_trim_r+0x94>)
1a003580:	460c      	mov	r4, r1
1a003582:	4606      	mov	r6, r0
1a003584:	f000 fd38 	bl	1a003ff8 <__malloc_lock>
1a003588:	68bb      	ldr	r3, [r7, #8]
1a00358a:	685d      	ldr	r5, [r3, #4]
1a00358c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a003590:	310f      	adds	r1, #15
1a003592:	f025 0503 	bic.w	r5, r5, #3
1a003596:	4429      	add	r1, r5
1a003598:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00359c:	f021 010f 	bic.w	r1, r1, #15
1a0035a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0035a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0035a8:	db07      	blt.n	1a0035ba <_malloc_trim_r+0x3e>
1a0035aa:	2100      	movs	r1, #0
1a0035ac:	4630      	mov	r0, r6
1a0035ae:	f7fc fffd 	bl	1a0005ac <_sbrk_r>
1a0035b2:	68bb      	ldr	r3, [r7, #8]
1a0035b4:	442b      	add	r3, r5
1a0035b6:	4298      	cmp	r0, r3
1a0035b8:	d004      	beq.n	1a0035c4 <_malloc_trim_r+0x48>
1a0035ba:	4630      	mov	r0, r6
1a0035bc:	f000 fd22 	bl	1a004004 <__malloc_unlock>
1a0035c0:	2000      	movs	r0, #0
1a0035c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0035c4:	4261      	negs	r1, r4
1a0035c6:	4630      	mov	r0, r6
1a0035c8:	f7fc fff0 	bl	1a0005ac <_sbrk_r>
1a0035cc:	3001      	adds	r0, #1
1a0035ce:	d00d      	beq.n	1a0035ec <_malloc_trim_r+0x70>
1a0035d0:	4b10      	ldr	r3, [pc, #64]	; (1a003614 <_malloc_trim_r+0x98>)
1a0035d2:	68ba      	ldr	r2, [r7, #8]
1a0035d4:	6819      	ldr	r1, [r3, #0]
1a0035d6:	1b2d      	subs	r5, r5, r4
1a0035d8:	f045 0501 	orr.w	r5, r5, #1
1a0035dc:	4630      	mov	r0, r6
1a0035de:	1b09      	subs	r1, r1, r4
1a0035e0:	6055      	str	r5, [r2, #4]
1a0035e2:	6019      	str	r1, [r3, #0]
1a0035e4:	f000 fd0e 	bl	1a004004 <__malloc_unlock>
1a0035e8:	2001      	movs	r0, #1
1a0035ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0035ec:	2100      	movs	r1, #0
1a0035ee:	4630      	mov	r0, r6
1a0035f0:	f7fc ffdc 	bl	1a0005ac <_sbrk_r>
1a0035f4:	68ba      	ldr	r2, [r7, #8]
1a0035f6:	1a83      	subs	r3, r0, r2
1a0035f8:	2b0f      	cmp	r3, #15
1a0035fa:	ddde      	ble.n	1a0035ba <_malloc_trim_r+0x3e>
1a0035fc:	4c06      	ldr	r4, [pc, #24]	; (1a003618 <_malloc_trim_r+0x9c>)
1a0035fe:	4905      	ldr	r1, [pc, #20]	; (1a003614 <_malloc_trim_r+0x98>)
1a003600:	6824      	ldr	r4, [r4, #0]
1a003602:	f043 0301 	orr.w	r3, r3, #1
1a003606:	1b00      	subs	r0, r0, r4
1a003608:	6053      	str	r3, [r2, #4]
1a00360a:	6008      	str	r0, [r1, #0]
1a00360c:	e7d5      	b.n	1a0035ba <_malloc_trim_r+0x3e>
1a00360e:	bf00      	nop
1a003610:	10000478 	.word	0x10000478
1a003614:	10000b70 	.word	0x10000b70
1a003618:	10000880 	.word	0x10000880

1a00361c <_free_r>:
1a00361c:	2900      	cmp	r1, #0
1a00361e:	d05d      	beq.n	1a0036dc <_free_r+0xc0>
1a003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003622:	460f      	mov	r7, r1
1a003624:	4606      	mov	r6, r0
1a003626:	f000 fce7 	bl	1a003ff8 <__malloc_lock>
1a00362a:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a00362e:	4c73      	ldr	r4, [pc, #460]	; (1a0037fc <_free_r+0x1e0>)
1a003630:	f02c 0301 	bic.w	r3, ip, #1
1a003634:	f1a7 0008 	sub.w	r0, r7, #8
1a003638:	18c2      	adds	r2, r0, r3
1a00363a:	68a1      	ldr	r1, [r4, #8]
1a00363c:	6855      	ldr	r5, [r2, #4]
1a00363e:	4291      	cmp	r1, r2
1a003640:	f025 0503 	bic.w	r5, r5, #3
1a003644:	d07f      	beq.n	1a003746 <_free_r+0x12a>
1a003646:	f01c 0f01 	tst.w	ip, #1
1a00364a:	6055      	str	r5, [r2, #4]
1a00364c:	eb02 0105 	add.w	r1, r2, r5
1a003650:	d133      	bne.n	1a0036ba <_free_r+0x9e>
1a003652:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a003656:	6849      	ldr	r1, [r1, #4]
1a003658:	eba0 000e 	sub.w	r0, r0, lr
1a00365c:	f104 0c08 	add.w	ip, r4, #8
1a003660:	6887      	ldr	r7, [r0, #8]
1a003662:	4567      	cmp	r7, ip
1a003664:	4473      	add	r3, lr
1a003666:	f001 0101 	and.w	r1, r1, #1
1a00366a:	d060      	beq.n	1a00372e <_free_r+0x112>
1a00366c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a003670:	f8c7 e00c 	str.w	lr, [r7, #12]
1a003674:	f8ce 7008 	str.w	r7, [lr, #8]
1a003678:	2900      	cmp	r1, #0
1a00367a:	f000 8089 	beq.w	1a003790 <_free_r+0x174>
1a00367e:	f043 0101 	orr.w	r1, r3, #1
1a003682:	6041      	str	r1, [r0, #4]
1a003684:	6013      	str	r3, [r2, #0]
1a003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00368a:	d230      	bcs.n	1a0036ee <_free_r+0xd2>
1a00368c:	08db      	lsrs	r3, r3, #3
1a00368e:	1c59      	adds	r1, r3, #1
1a003690:	6865      	ldr	r5, [r4, #4]
1a003692:	109a      	asrs	r2, r3, #2
1a003694:	2301      	movs	r3, #1
1a003696:	4093      	lsls	r3, r2
1a003698:	432b      	orrs	r3, r5
1a00369a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a00369e:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a0036a2:	6063      	str	r3, [r4, #4]
1a0036a4:	3a08      	subs	r2, #8
1a0036a6:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a0036aa:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a0036ae:	60e8      	str	r0, [r5, #12]
1a0036b0:	4630      	mov	r0, r6
1a0036b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0036b6:	f000 bca5 	b.w	1a004004 <__malloc_unlock>
1a0036ba:	6849      	ldr	r1, [r1, #4]
1a0036bc:	07c9      	lsls	r1, r1, #31
1a0036be:	d40e      	bmi.n	1a0036de <_free_r+0xc2>
1a0036c0:	442b      	add	r3, r5
1a0036c2:	f104 0c08 	add.w	ip, r4, #8
1a0036c6:	6891      	ldr	r1, [r2, #8]
1a0036c8:	4561      	cmp	r1, ip
1a0036ca:	f043 0501 	orr.w	r5, r3, #1
1a0036ce:	d067      	beq.n	1a0037a0 <_free_r+0x184>
1a0036d0:	68d2      	ldr	r2, [r2, #12]
1a0036d2:	60ca      	str	r2, [r1, #12]
1a0036d4:	6091      	str	r1, [r2, #8]
1a0036d6:	6045      	str	r5, [r0, #4]
1a0036d8:	50c3      	str	r3, [r0, r3]
1a0036da:	e7d4      	b.n	1a003686 <_free_r+0x6a>
1a0036dc:	4770      	bx	lr
1a0036de:	f043 0101 	orr.w	r1, r3, #1
1a0036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0036e6:	f847 1c04 	str.w	r1, [r7, #-4]
1a0036ea:	6013      	str	r3, [r2, #0]
1a0036ec:	d3ce      	bcc.n	1a00368c <_free_r+0x70>
1a0036ee:	0a5a      	lsrs	r2, r3, #9
1a0036f0:	2a04      	cmp	r2, #4
1a0036f2:	d842      	bhi.n	1a00377a <_free_r+0x15e>
1a0036f4:	099a      	lsrs	r2, r3, #6
1a0036f6:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a0036fa:	00ff      	lsls	r7, r7, #3
1a0036fc:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a003700:	19e5      	adds	r5, r4, r7
1a003702:	59e2      	ldr	r2, [r4, r7]
1a003704:	3d08      	subs	r5, #8
1a003706:	4295      	cmp	r5, r2
1a003708:	d051      	beq.n	1a0037ae <_free_r+0x192>
1a00370a:	6851      	ldr	r1, [r2, #4]
1a00370c:	f021 0103 	bic.w	r1, r1, #3
1a003710:	4299      	cmp	r1, r3
1a003712:	d902      	bls.n	1a00371a <_free_r+0xfe>
1a003714:	6892      	ldr	r2, [r2, #8]
1a003716:	4295      	cmp	r5, r2
1a003718:	d1f7      	bne.n	1a00370a <_free_r+0xee>
1a00371a:	68d5      	ldr	r5, [r2, #12]
1a00371c:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a003720:	60a8      	str	r0, [r5, #8]
1a003722:	60d0      	str	r0, [r2, #12]
1a003724:	4630      	mov	r0, r6
1a003726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00372a:	f000 bc6b 	b.w	1a004004 <__malloc_unlock>
1a00372e:	2900      	cmp	r1, #0
1a003730:	d15e      	bne.n	1a0037f0 <_free_r+0x1d4>
1a003732:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a003736:	442b      	add	r3, r5
1a003738:	f043 0401 	orr.w	r4, r3, #1
1a00373c:	60ca      	str	r2, [r1, #12]
1a00373e:	6091      	str	r1, [r2, #8]
1a003740:	6044      	str	r4, [r0, #4]
1a003742:	50c3      	str	r3, [r0, r3]
1a003744:	e7b4      	b.n	1a0036b0 <_free_r+0x94>
1a003746:	f01c 0f01 	tst.w	ip, #1
1a00374a:	442b      	add	r3, r5
1a00374c:	d107      	bne.n	1a00375e <_free_r+0x142>
1a00374e:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a003752:	1a80      	subs	r0, r0, r2
1a003754:	4413      	add	r3, r2
1a003756:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a00375a:	60ca      	str	r2, [r1, #12]
1a00375c:	6091      	str	r1, [r2, #8]
1a00375e:	4a28      	ldr	r2, [pc, #160]	; (1a003800 <_free_r+0x1e4>)
1a003760:	6812      	ldr	r2, [r2, #0]
1a003762:	f043 0101 	orr.w	r1, r3, #1
1a003766:	429a      	cmp	r2, r3
1a003768:	6041      	str	r1, [r0, #4]
1a00376a:	60a0      	str	r0, [r4, #8]
1a00376c:	d8a0      	bhi.n	1a0036b0 <_free_r+0x94>
1a00376e:	4b25      	ldr	r3, [pc, #148]	; (1a003804 <_free_r+0x1e8>)
1a003770:	4630      	mov	r0, r6
1a003772:	6819      	ldr	r1, [r3, #0]
1a003774:	f7ff ff02 	bl	1a00357c <_malloc_trim_r>
1a003778:	e79a      	b.n	1a0036b0 <_free_r+0x94>
1a00377a:	2a14      	cmp	r2, #20
1a00377c:	d90a      	bls.n	1a003794 <_free_r+0x178>
1a00377e:	2a54      	cmp	r2, #84	; 0x54
1a003780:	d81d      	bhi.n	1a0037be <_free_r+0x1a2>
1a003782:	0b1a      	lsrs	r2, r3, #12
1a003784:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a003788:	00ff      	lsls	r7, r7, #3
1a00378a:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a00378e:	e7b7      	b.n	1a003700 <_free_r+0xe4>
1a003790:	442b      	add	r3, r5
1a003792:	e798      	b.n	1a0036c6 <_free_r+0xaa>
1a003794:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a003798:	00ff      	lsls	r7, r7, #3
1a00379a:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a00379e:	e7af      	b.n	1a003700 <_free_r+0xe4>
1a0037a0:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a0037a4:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a0037a8:	6045      	str	r5, [r0, #4]
1a0037aa:	50c3      	str	r3, [r0, r3]
1a0037ac:	e780      	b.n	1a0036b0 <_free_r+0x94>
1a0037ae:	6863      	ldr	r3, [r4, #4]
1a0037b0:	1089      	asrs	r1, r1, #2
1a0037b2:	2701      	movs	r7, #1
1a0037b4:	fa07 f101 	lsl.w	r1, r7, r1
1a0037b8:	4319      	orrs	r1, r3
1a0037ba:	6061      	str	r1, [r4, #4]
1a0037bc:	e7ae      	b.n	1a00371c <_free_r+0x100>
1a0037be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0037c2:	d806      	bhi.n	1a0037d2 <_free_r+0x1b6>
1a0037c4:	0bda      	lsrs	r2, r3, #15
1a0037c6:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a0037ca:	00ff      	lsls	r7, r7, #3
1a0037cc:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a0037d0:	e796      	b.n	1a003700 <_free_r+0xe4>
1a0037d2:	f240 5154 	movw	r1, #1364	; 0x554
1a0037d6:	428a      	cmp	r2, r1
1a0037d8:	d806      	bhi.n	1a0037e8 <_free_r+0x1cc>
1a0037da:	0c9a      	lsrs	r2, r3, #18
1a0037dc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0037e0:	00ff      	lsls	r7, r7, #3
1a0037e2:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a0037e6:	e78b      	b.n	1a003700 <_free_r+0xe4>
1a0037e8:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a0037ec:	217e      	movs	r1, #126	; 0x7e
1a0037ee:	e787      	b.n	1a003700 <_free_r+0xe4>
1a0037f0:	f043 0101 	orr.w	r1, r3, #1
1a0037f4:	6041      	str	r1, [r0, #4]
1a0037f6:	6013      	str	r3, [r2, #0]
1a0037f8:	e75a      	b.n	1a0036b0 <_free_r+0x94>
1a0037fa:	bf00      	nop
1a0037fc:	10000478 	.word	0x10000478
1a003800:	10000884 	.word	0x10000884
1a003804:	10000ba0 	.word	0x10000ba0

1a003808 <_fwalk_reent>:
1a003808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00380c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a003810:	d01f      	beq.n	1a003852 <_fwalk_reent+0x4a>
1a003812:	4688      	mov	r8, r1
1a003814:	4606      	mov	r6, r0
1a003816:	f04f 0900 	mov.w	r9, #0
1a00381a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a00381e:	3d01      	subs	r5, #1
1a003820:	d411      	bmi.n	1a003846 <_fwalk_reent+0x3e>
1a003822:	89a3      	ldrh	r3, [r4, #12]
1a003824:	2b01      	cmp	r3, #1
1a003826:	f105 35ff 	add.w	r5, r5, #4294967295
1a00382a:	d908      	bls.n	1a00383e <_fwalk_reent+0x36>
1a00382c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003830:	3301      	adds	r3, #1
1a003832:	4621      	mov	r1, r4
1a003834:	4630      	mov	r0, r6
1a003836:	d002      	beq.n	1a00383e <_fwalk_reent+0x36>
1a003838:	47c0      	blx	r8
1a00383a:	ea49 0900 	orr.w	r9, r9, r0
1a00383e:	1c6b      	adds	r3, r5, #1
1a003840:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003844:	d1ed      	bne.n	1a003822 <_fwalk_reent+0x1a>
1a003846:	683f      	ldr	r7, [r7, #0]
1a003848:	2f00      	cmp	r7, #0
1a00384a:	d1e6      	bne.n	1a00381a <_fwalk_reent+0x12>
1a00384c:	4648      	mov	r0, r9
1a00384e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003852:	46b9      	mov	r9, r7
1a003854:	4648      	mov	r0, r9
1a003856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00385a:	bf00      	nop

1a00385c <__libc_init_array>:
1a00385c:	b570      	push	{r4, r5, r6, lr}
1a00385e:	4e0d      	ldr	r6, [pc, #52]	; (1a003894 <__libc_init_array+0x38>)
1a003860:	4d0d      	ldr	r5, [pc, #52]	; (1a003898 <__libc_init_array+0x3c>)
1a003862:	1b76      	subs	r6, r6, r5
1a003864:	10b6      	asrs	r6, r6, #2
1a003866:	d006      	beq.n	1a003876 <__libc_init_array+0x1a>
1a003868:	2400      	movs	r4, #0
1a00386a:	3401      	adds	r4, #1
1a00386c:	f855 3b04 	ldr.w	r3, [r5], #4
1a003870:	4798      	blx	r3
1a003872:	42a6      	cmp	r6, r4
1a003874:	d1f9      	bne.n	1a00386a <__libc_init_array+0xe>
1a003876:	4e09      	ldr	r6, [pc, #36]	; (1a00389c <__libc_init_array+0x40>)
1a003878:	4d09      	ldr	r5, [pc, #36]	; (1a0038a0 <__libc_init_array+0x44>)
1a00387a:	1b76      	subs	r6, r6, r5
1a00387c:	f7fc fe41 	bl	1a000502 <_init>
1a003880:	10b6      	asrs	r6, r6, #2
1a003882:	d006      	beq.n	1a003892 <__libc_init_array+0x36>
1a003884:	2400      	movs	r4, #0
1a003886:	3401      	adds	r4, #1
1a003888:	f855 3b04 	ldr.w	r3, [r5], #4
1a00388c:	4798      	blx	r3
1a00388e:	42a6      	cmp	r6, r4
1a003890:	d1f9      	bne.n	1a003886 <__libc_init_array+0x2a>
1a003892:	bd70      	pop	{r4, r5, r6, pc}
1a003894:	1a0088ac 	.word	0x1a0088ac
1a003898:	1a0088ac 	.word	0x1a0088ac
1a00389c:	1a0088b0 	.word	0x1a0088b0
1a0038a0:	1a0088ac 	.word	0x1a0088ac

1a0038a4 <__retarget_lock_init_recursive>:
1a0038a4:	4770      	bx	lr
1a0038a6:	bf00      	nop

1a0038a8 <__retarget_lock_close_recursive>:
1a0038a8:	4770      	bx	lr
1a0038aa:	bf00      	nop

1a0038ac <__retarget_lock_acquire_recursive>:
1a0038ac:	4770      	bx	lr
1a0038ae:	bf00      	nop

1a0038b0 <__retarget_lock_release_recursive>:
1a0038b0:	4770      	bx	lr
1a0038b2:	bf00      	nop

1a0038b4 <_malloc_r>:
1a0038b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0038b8:	f101 050b 	add.w	r5, r1, #11
1a0038bc:	2d16      	cmp	r5, #22
1a0038be:	b083      	sub	sp, #12
1a0038c0:	4606      	mov	r6, r0
1a0038c2:	d823      	bhi.n	1a00390c <_malloc_r+0x58>
1a0038c4:	2910      	cmp	r1, #16
1a0038c6:	f200 80b9 	bhi.w	1a003a3c <_malloc_r+0x188>
1a0038ca:	f000 fb95 	bl	1a003ff8 <__malloc_lock>
1a0038ce:	2510      	movs	r5, #16
1a0038d0:	2318      	movs	r3, #24
1a0038d2:	2002      	movs	r0, #2
1a0038d4:	4fba      	ldr	r7, [pc, #744]	; (1a003bc0 <_malloc_r+0x30c>)
1a0038d6:	443b      	add	r3, r7
1a0038d8:	f1a3 0208 	sub.w	r2, r3, #8
1a0038dc:	685c      	ldr	r4, [r3, #4]
1a0038de:	4294      	cmp	r4, r2
1a0038e0:	f000 80b9 	beq.w	1a003a56 <_malloc_r+0x1a2>
1a0038e4:	6863      	ldr	r3, [r4, #4]
1a0038e6:	f023 0303 	bic.w	r3, r3, #3
1a0038ea:	4423      	add	r3, r4
1a0038ec:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a0038f0:	685a      	ldr	r2, [r3, #4]
1a0038f2:	60e9      	str	r1, [r5, #12]
1a0038f4:	f042 0201 	orr.w	r2, r2, #1
1a0038f8:	4630      	mov	r0, r6
1a0038fa:	608d      	str	r5, [r1, #8]
1a0038fc:	605a      	str	r2, [r3, #4]
1a0038fe:	f000 fb81 	bl	1a004004 <__malloc_unlock>
1a003902:	3408      	adds	r4, #8
1a003904:	4620      	mov	r0, r4
1a003906:	b003      	add	sp, #12
1a003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00390c:	f035 0507 	bics.w	r5, r5, #7
1a003910:	f100 8094 	bmi.w	1a003a3c <_malloc_r+0x188>
1a003914:	42a9      	cmp	r1, r5
1a003916:	f200 8091 	bhi.w	1a003a3c <_malloc_r+0x188>
1a00391a:	f000 fb6d 	bl	1a003ff8 <__malloc_lock>
1a00391e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a003922:	f0c0 81a2 	bcc.w	1a003c6a <_malloc_r+0x3b6>
1a003926:	0a6b      	lsrs	r3, r5, #9
1a003928:	f000 808f 	beq.w	1a003a4a <_malloc_r+0x196>
1a00392c:	2b04      	cmp	r3, #4
1a00392e:	f200 8178 	bhi.w	1a003c22 <_malloc_r+0x36e>
1a003932:	09ab      	lsrs	r3, r5, #6
1a003934:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a003938:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a00393c:	00c3      	lsls	r3, r0, #3
1a00393e:	4fa0      	ldr	r7, [pc, #640]	; (1a003bc0 <_malloc_r+0x30c>)
1a003940:	443b      	add	r3, r7
1a003942:	f1a3 0108 	sub.w	r1, r3, #8
1a003946:	685c      	ldr	r4, [r3, #4]
1a003948:	42a1      	cmp	r1, r4
1a00394a:	d106      	bne.n	1a00395a <_malloc_r+0xa6>
1a00394c:	e00c      	b.n	1a003968 <_malloc_r+0xb4>
1a00394e:	2a00      	cmp	r2, #0
1a003950:	f280 8127 	bge.w	1a003ba2 <_malloc_r+0x2ee>
1a003954:	68e4      	ldr	r4, [r4, #12]
1a003956:	42a1      	cmp	r1, r4
1a003958:	d006      	beq.n	1a003968 <_malloc_r+0xb4>
1a00395a:	6863      	ldr	r3, [r4, #4]
1a00395c:	f023 0303 	bic.w	r3, r3, #3
1a003960:	1b5a      	subs	r2, r3, r5
1a003962:	2a0f      	cmp	r2, #15
1a003964:	ddf3      	ble.n	1a00394e <_malloc_r+0x9a>
1a003966:	4660      	mov	r0, ip
1a003968:	693c      	ldr	r4, [r7, #16]
1a00396a:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a003bd4 <_malloc_r+0x320>
1a00396e:	4564      	cmp	r4, ip
1a003970:	d07c      	beq.n	1a003a6c <_malloc_r+0x1b8>
1a003972:	6863      	ldr	r3, [r4, #4]
1a003974:	f023 0303 	bic.w	r3, r3, #3
1a003978:	1b5a      	subs	r2, r3, r5
1a00397a:	2a0f      	cmp	r2, #15
1a00397c:	f300 8183 	bgt.w	1a003c86 <_malloc_r+0x3d2>
1a003980:	2a00      	cmp	r2, #0
1a003982:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a003986:	f280 8174 	bge.w	1a003c72 <_malloc_r+0x3be>
1a00398a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00398e:	f080 8125 	bcs.w	1a003bdc <_malloc_r+0x328>
1a003992:	08db      	lsrs	r3, r3, #3
1a003994:	1c59      	adds	r1, r3, #1
1a003996:	687a      	ldr	r2, [r7, #4]
1a003998:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a00399c:	f8c4 8008 	str.w	r8, [r4, #8]
1a0039a0:	f04f 0e01 	mov.w	lr, #1
1a0039a4:	109b      	asrs	r3, r3, #2
1a0039a6:	fa0e f303 	lsl.w	r3, lr, r3
1a0039aa:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a0039ae:	4313      	orrs	r3, r2
1a0039b0:	f1ae 0208 	sub.w	r2, lr, #8
1a0039b4:	60e2      	str	r2, [r4, #12]
1a0039b6:	607b      	str	r3, [r7, #4]
1a0039b8:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a0039bc:	f8c8 400c 	str.w	r4, [r8, #12]
1a0039c0:	1082      	asrs	r2, r0, #2
1a0039c2:	2401      	movs	r4, #1
1a0039c4:	4094      	lsls	r4, r2
1a0039c6:	429c      	cmp	r4, r3
1a0039c8:	d856      	bhi.n	1a003a78 <_malloc_r+0x1c4>
1a0039ca:	421c      	tst	r4, r3
1a0039cc:	d106      	bne.n	1a0039dc <_malloc_r+0x128>
1a0039ce:	f020 0003 	bic.w	r0, r0, #3
1a0039d2:	0064      	lsls	r4, r4, #1
1a0039d4:	421c      	tst	r4, r3
1a0039d6:	f100 0004 	add.w	r0, r0, #4
1a0039da:	d0fa      	beq.n	1a0039d2 <_malloc_r+0x11e>
1a0039dc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a0039e0:	46ce      	mov	lr, r9
1a0039e2:	4680      	mov	r8, r0
1a0039e4:	f8de 300c 	ldr.w	r3, [lr, #12]
1a0039e8:	459e      	cmp	lr, r3
1a0039ea:	d107      	bne.n	1a0039fc <_malloc_r+0x148>
1a0039ec:	e125      	b.n	1a003c3a <_malloc_r+0x386>
1a0039ee:	2a00      	cmp	r2, #0
1a0039f0:	f280 812c 	bge.w	1a003c4c <_malloc_r+0x398>
1a0039f4:	68db      	ldr	r3, [r3, #12]
1a0039f6:	459e      	cmp	lr, r3
1a0039f8:	f000 811f 	beq.w	1a003c3a <_malloc_r+0x386>
1a0039fc:	6859      	ldr	r1, [r3, #4]
1a0039fe:	f021 0103 	bic.w	r1, r1, #3
1a003a02:	1b4a      	subs	r2, r1, r5
1a003a04:	2a0f      	cmp	r2, #15
1a003a06:	ddf2      	ble.n	1a0039ee <_malloc_r+0x13a>
1a003a08:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a003a0c:	195c      	adds	r4, r3, r5
1a003a0e:	f045 0501 	orr.w	r5, r5, #1
1a003a12:	605d      	str	r5, [r3, #4]
1a003a14:	f042 0501 	orr.w	r5, r2, #1
1a003a18:	f8c8 e00c 	str.w	lr, [r8, #12]
1a003a1c:	4630      	mov	r0, r6
1a003a1e:	f8ce 8008 	str.w	r8, [lr, #8]
1a003a22:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a003a26:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a003a2a:	6065      	str	r5, [r4, #4]
1a003a2c:	505a      	str	r2, [r3, r1]
1a003a2e:	9300      	str	r3, [sp, #0]
1a003a30:	f000 fae8 	bl	1a004004 <__malloc_unlock>
1a003a34:	9b00      	ldr	r3, [sp, #0]
1a003a36:	f103 0408 	add.w	r4, r3, #8
1a003a3a:	e002      	b.n	1a003a42 <_malloc_r+0x18e>
1a003a3c:	230c      	movs	r3, #12
1a003a3e:	6033      	str	r3, [r6, #0]
1a003a40:	2400      	movs	r4, #0
1a003a42:	4620      	mov	r0, r4
1a003a44:	b003      	add	sp, #12
1a003a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
1a003a4e:	2040      	movs	r0, #64	; 0x40
1a003a50:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a003a54:	e773      	b.n	1a00393e <_malloc_r+0x8a>
1a003a56:	68dc      	ldr	r4, [r3, #12]
1a003a58:	42a3      	cmp	r3, r4
1a003a5a:	bf08      	it	eq
1a003a5c:	3002      	addeq	r0, #2
1a003a5e:	f47f af41 	bne.w	1a0038e4 <_malloc_r+0x30>
1a003a62:	693c      	ldr	r4, [r7, #16]
1a003a64:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a003bd4 <_malloc_r+0x320>
1a003a68:	4564      	cmp	r4, ip
1a003a6a:	d182      	bne.n	1a003972 <_malloc_r+0xbe>
1a003a6c:	687b      	ldr	r3, [r7, #4]
1a003a6e:	1082      	asrs	r2, r0, #2
1a003a70:	2401      	movs	r4, #1
1a003a72:	4094      	lsls	r4, r2
1a003a74:	429c      	cmp	r4, r3
1a003a76:	d9a8      	bls.n	1a0039ca <_malloc_r+0x116>
1a003a78:	68bc      	ldr	r4, [r7, #8]
1a003a7a:	6863      	ldr	r3, [r4, #4]
1a003a7c:	f023 0803 	bic.w	r8, r3, #3
1a003a80:	45a8      	cmp	r8, r5
1a003a82:	d303      	bcc.n	1a003a8c <_malloc_r+0x1d8>
1a003a84:	eba8 0305 	sub.w	r3, r8, r5
1a003a88:	2b0f      	cmp	r3, #15
1a003a8a:	dc7a      	bgt.n	1a003b82 <_malloc_r+0x2ce>
1a003a8c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a003bd8 <_malloc_r+0x324>
1a003a90:	4b4c      	ldr	r3, [pc, #304]	; (1a003bc4 <_malloc_r+0x310>)
1a003a92:	f8d9 2000 	ldr.w	r2, [r9]
1a003a96:	681b      	ldr	r3, [r3, #0]
1a003a98:	3201      	adds	r2, #1
1a003a9a:	442b      	add	r3, r5
1a003a9c:	eb04 0a08 	add.w	sl, r4, r8
1a003aa0:	f000 813c 	beq.w	1a003d1c <_malloc_r+0x468>
1a003aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003aa8:	330f      	adds	r3, #15
1a003aaa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a003aae:	f02b 0b0f 	bic.w	fp, fp, #15
1a003ab2:	4659      	mov	r1, fp
1a003ab4:	4630      	mov	r0, r6
1a003ab6:	f7fc fd79 	bl	1a0005ac <_sbrk_r>
1a003aba:	1c41      	adds	r1, r0, #1
1a003abc:	4602      	mov	r2, r0
1a003abe:	f000 80fc 	beq.w	1a003cba <_malloc_r+0x406>
1a003ac2:	4582      	cmp	sl, r0
1a003ac4:	f200 80f7 	bhi.w	1a003cb6 <_malloc_r+0x402>
1a003ac8:	4b3f      	ldr	r3, [pc, #252]	; (1a003bc8 <_malloc_r+0x314>)
1a003aca:	6818      	ldr	r0, [r3, #0]
1a003acc:	4458      	add	r0, fp
1a003ace:	6018      	str	r0, [r3, #0]
1a003ad0:	4601      	mov	r1, r0
1a003ad2:	f000 8157 	beq.w	1a003d84 <_malloc_r+0x4d0>
1a003ad6:	f8d9 0000 	ldr.w	r0, [r9]
1a003ada:	9301      	str	r3, [sp, #4]
1a003adc:	3001      	adds	r0, #1
1a003ade:	bf1b      	ittet	ne
1a003ae0:	eba2 0a0a 	subne.w	sl, r2, sl
1a003ae4:	4451      	addne	r1, sl
1a003ae6:	f8c9 2000 	streq.w	r2, [r9]
1a003aea:	6019      	strne	r1, [r3, #0]
1a003aec:	f012 0a07 	ands.w	sl, r2, #7
1a003af0:	f000 8120 	beq.w	1a003d34 <_malloc_r+0x480>
1a003af4:	f1ca 0108 	rsb	r1, sl, #8
1a003af8:	440a      	add	r2, r1
1a003afa:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a003afe:	4493      	add	fp, r2
1a003b00:	3108      	adds	r1, #8
1a003b02:	eba1 010b 	sub.w	r1, r1, fp
1a003b06:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a003b0a:	4649      	mov	r1, r9
1a003b0c:	4630      	mov	r0, r6
1a003b0e:	9200      	str	r2, [sp, #0]
1a003b10:	f7fc fd4c 	bl	1a0005ac <_sbrk_r>
1a003b14:	1c42      	adds	r2, r0, #1
1a003b16:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003b1a:	f000 8158 	beq.w	1a003dce <_malloc_r+0x51a>
1a003b1e:	1a80      	subs	r0, r0, r2
1a003b20:	eb00 0b09 	add.w	fp, r0, r9
1a003b24:	6818      	ldr	r0, [r3, #0]
1a003b26:	60ba      	str	r2, [r7, #8]
1a003b28:	f04b 0101 	orr.w	r1, fp, #1
1a003b2c:	4448      	add	r0, r9
1a003b2e:	42bc      	cmp	r4, r7
1a003b30:	6051      	str	r1, [r2, #4]
1a003b32:	6018      	str	r0, [r3, #0]
1a003b34:	f000 8132 	beq.w	1a003d9c <_malloc_r+0x4e8>
1a003b38:	f1b8 0f0f 	cmp.w	r8, #15
1a003b3c:	f240 8130 	bls.w	1a003da0 <_malloc_r+0x4ec>
1a003b40:	6861      	ldr	r1, [r4, #4]
1a003b42:	f1a8 0c0c 	sub.w	ip, r8, #12
1a003b46:	f02c 0c07 	bic.w	ip, ip, #7
1a003b4a:	f001 0101 	and.w	r1, r1, #1
1a003b4e:	eb04 0e0c 	add.w	lr, r4, ip
1a003b52:	ea41 010c 	orr.w	r1, r1, ip
1a003b56:	f04f 0805 	mov.w	r8, #5
1a003b5a:	f1bc 0f0f 	cmp.w	ip, #15
1a003b5e:	6061      	str	r1, [r4, #4]
1a003b60:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a003b64:	f200 813b 	bhi.w	1a003dde <_malloc_r+0x52a>
1a003b68:	6851      	ldr	r1, [r2, #4]
1a003b6a:	4614      	mov	r4, r2
1a003b6c:	4b17      	ldr	r3, [pc, #92]	; (1a003bcc <_malloc_r+0x318>)
1a003b6e:	681a      	ldr	r2, [r3, #0]
1a003b70:	4282      	cmp	r2, r0
1a003b72:	bf38      	it	cc
1a003b74:	6018      	strcc	r0, [r3, #0]
1a003b76:	4b16      	ldr	r3, [pc, #88]	; (1a003bd0 <_malloc_r+0x31c>)
1a003b78:	681a      	ldr	r2, [r3, #0]
1a003b7a:	4282      	cmp	r2, r0
1a003b7c:	bf38      	it	cc
1a003b7e:	6018      	strcc	r0, [r3, #0]
1a003b80:	e09d      	b.n	1a003cbe <_malloc_r+0x40a>
1a003b82:	1962      	adds	r2, r4, r5
1a003b84:	f043 0301 	orr.w	r3, r3, #1
1a003b88:	f045 0501 	orr.w	r5, r5, #1
1a003b8c:	6065      	str	r5, [r4, #4]
1a003b8e:	4630      	mov	r0, r6
1a003b90:	60ba      	str	r2, [r7, #8]
1a003b92:	6053      	str	r3, [r2, #4]
1a003b94:	f000 fa36 	bl	1a004004 <__malloc_unlock>
1a003b98:	3408      	adds	r4, #8
1a003b9a:	4620      	mov	r0, r4
1a003b9c:	b003      	add	sp, #12
1a003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003ba2:	4423      	add	r3, r4
1a003ba4:	68e1      	ldr	r1, [r4, #12]
1a003ba6:	685a      	ldr	r2, [r3, #4]
1a003ba8:	68a5      	ldr	r5, [r4, #8]
1a003baa:	f042 0201 	orr.w	r2, r2, #1
1a003bae:	60e9      	str	r1, [r5, #12]
1a003bb0:	4630      	mov	r0, r6
1a003bb2:	608d      	str	r5, [r1, #8]
1a003bb4:	605a      	str	r2, [r3, #4]
1a003bb6:	f000 fa25 	bl	1a004004 <__malloc_unlock>
1a003bba:	3408      	adds	r4, #8
1a003bbc:	e741      	b.n	1a003a42 <_malloc_r+0x18e>
1a003bbe:	bf00      	nop
1a003bc0:	10000478 	.word	0x10000478
1a003bc4:	10000ba0 	.word	0x10000ba0
1a003bc8:	10000b70 	.word	0x10000b70
1a003bcc:	10000b98 	.word	0x10000b98
1a003bd0:	10000b9c 	.word	0x10000b9c
1a003bd4:	10000480 	.word	0x10000480
1a003bd8:	10000880 	.word	0x10000880
1a003bdc:	0a5a      	lsrs	r2, r3, #9
1a003bde:	2a04      	cmp	r2, #4
1a003be0:	d963      	bls.n	1a003caa <_malloc_r+0x3f6>
1a003be2:	2a14      	cmp	r2, #20
1a003be4:	f200 80b7 	bhi.w	1a003d56 <_malloc_r+0x4a2>
1a003be8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a003bec:	00c9      	lsls	r1, r1, #3
1a003bee:	325b      	adds	r2, #91	; 0x5b
1a003bf0:	eb07 0e01 	add.w	lr, r7, r1
1a003bf4:	5879      	ldr	r1, [r7, r1]
1a003bf6:	f1ae 0e08 	sub.w	lr, lr, #8
1a003bfa:	458e      	cmp	lr, r1
1a003bfc:	f000 8091 	beq.w	1a003d22 <_malloc_r+0x46e>
1a003c00:	684a      	ldr	r2, [r1, #4]
1a003c02:	f022 0203 	bic.w	r2, r2, #3
1a003c06:	429a      	cmp	r2, r3
1a003c08:	d902      	bls.n	1a003c10 <_malloc_r+0x35c>
1a003c0a:	6889      	ldr	r1, [r1, #8]
1a003c0c:	458e      	cmp	lr, r1
1a003c0e:	d1f7      	bne.n	1a003c00 <_malloc_r+0x34c>
1a003c10:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a003c14:	687b      	ldr	r3, [r7, #4]
1a003c16:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a003c1a:	f8ce 4008 	str.w	r4, [lr, #8]
1a003c1e:	60cc      	str	r4, [r1, #12]
1a003c20:	e6ce      	b.n	1a0039c0 <_malloc_r+0x10c>
1a003c22:	2b14      	cmp	r3, #20
1a003c24:	d959      	bls.n	1a003cda <_malloc_r+0x426>
1a003c26:	2b54      	cmp	r3, #84	; 0x54
1a003c28:	f200 809d 	bhi.w	1a003d66 <_malloc_r+0x4b2>
1a003c2c:	0b2b      	lsrs	r3, r5, #12
1a003c2e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a003c32:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a003c36:	00c3      	lsls	r3, r0, #3
1a003c38:	e681      	b.n	1a00393e <_malloc_r+0x8a>
1a003c3a:	f108 0801 	add.w	r8, r8, #1
1a003c3e:	f018 0f03 	tst.w	r8, #3
1a003c42:	f10e 0e08 	add.w	lr, lr, #8
1a003c46:	f47f aecd 	bne.w	1a0039e4 <_malloc_r+0x130>
1a003c4a:	e051      	b.n	1a003cf0 <_malloc_r+0x43c>
1a003c4c:	4419      	add	r1, r3
1a003c4e:	461c      	mov	r4, r3
1a003c50:	684a      	ldr	r2, [r1, #4]
1a003c52:	68db      	ldr	r3, [r3, #12]
1a003c54:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a003c58:	f042 0201 	orr.w	r2, r2, #1
1a003c5c:	604a      	str	r2, [r1, #4]
1a003c5e:	4630      	mov	r0, r6
1a003c60:	60eb      	str	r3, [r5, #12]
1a003c62:	609d      	str	r5, [r3, #8]
1a003c64:	f000 f9ce 	bl	1a004004 <__malloc_unlock>
1a003c68:	e6eb      	b.n	1a003a42 <_malloc_r+0x18e>
1a003c6a:	08e8      	lsrs	r0, r5, #3
1a003c6c:	f105 0308 	add.w	r3, r5, #8
1a003c70:	e630      	b.n	1a0038d4 <_malloc_r+0x20>
1a003c72:	4423      	add	r3, r4
1a003c74:	4630      	mov	r0, r6
1a003c76:	685a      	ldr	r2, [r3, #4]
1a003c78:	f042 0201 	orr.w	r2, r2, #1
1a003c7c:	605a      	str	r2, [r3, #4]
1a003c7e:	3408      	adds	r4, #8
1a003c80:	f000 f9c0 	bl	1a004004 <__malloc_unlock>
1a003c84:	e6dd      	b.n	1a003a42 <_malloc_r+0x18e>
1a003c86:	1961      	adds	r1, r4, r5
1a003c88:	f045 0e01 	orr.w	lr, r5, #1
1a003c8c:	f042 0501 	orr.w	r5, r2, #1
1a003c90:	f8c4 e004 	str.w	lr, [r4, #4]
1a003c94:	4630      	mov	r0, r6
1a003c96:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a003c9a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a003c9e:	604d      	str	r5, [r1, #4]
1a003ca0:	50e2      	str	r2, [r4, r3]
1a003ca2:	f000 f9af 	bl	1a004004 <__malloc_unlock>
1a003ca6:	3408      	adds	r4, #8
1a003ca8:	e6cb      	b.n	1a003a42 <_malloc_r+0x18e>
1a003caa:	099a      	lsrs	r2, r3, #6
1a003cac:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a003cb0:	00c9      	lsls	r1, r1, #3
1a003cb2:	3238      	adds	r2, #56	; 0x38
1a003cb4:	e79c      	b.n	1a003bf0 <_malloc_r+0x33c>
1a003cb6:	42bc      	cmp	r4, r7
1a003cb8:	d05f      	beq.n	1a003d7a <_malloc_r+0x4c6>
1a003cba:	68bc      	ldr	r4, [r7, #8]
1a003cbc:	6861      	ldr	r1, [r4, #4]
1a003cbe:	f021 0b03 	bic.w	fp, r1, #3
1a003cc2:	45ab      	cmp	fp, r5
1a003cc4:	ebab 0305 	sub.w	r3, fp, r5
1a003cc8:	d302      	bcc.n	1a003cd0 <_malloc_r+0x41c>
1a003cca:	2b0f      	cmp	r3, #15
1a003ccc:	f73f af59 	bgt.w	1a003b82 <_malloc_r+0x2ce>
1a003cd0:	4630      	mov	r0, r6
1a003cd2:	f000 f997 	bl	1a004004 <__malloc_unlock>
1a003cd6:	2400      	movs	r4, #0
1a003cd8:	e6b3      	b.n	1a003a42 <_malloc_r+0x18e>
1a003cda:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a003cde:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a003ce2:	00c3      	lsls	r3, r0, #3
1a003ce4:	e62b      	b.n	1a00393e <_malloc_r+0x8a>
1a003ce6:	f859 3908 	ldr.w	r3, [r9], #-8
1a003cea:	454b      	cmp	r3, r9
1a003cec:	f040 8096 	bne.w	1a003e1c <_malloc_r+0x568>
1a003cf0:	f010 0f03 	tst.w	r0, #3
1a003cf4:	f100 30ff 	add.w	r0, r0, #4294967295
1a003cf8:	d1f5      	bne.n	1a003ce6 <_malloc_r+0x432>
1a003cfa:	687b      	ldr	r3, [r7, #4]
1a003cfc:	ea23 0304 	bic.w	r3, r3, r4
1a003d00:	607b      	str	r3, [r7, #4]
1a003d02:	0064      	lsls	r4, r4, #1
1a003d04:	429c      	cmp	r4, r3
1a003d06:	f63f aeb7 	bhi.w	1a003a78 <_malloc_r+0x1c4>
1a003d0a:	b91c      	cbnz	r4, 1a003d14 <_malloc_r+0x460>
1a003d0c:	e6b4      	b.n	1a003a78 <_malloc_r+0x1c4>
1a003d0e:	0064      	lsls	r4, r4, #1
1a003d10:	f108 0804 	add.w	r8, r8, #4
1a003d14:	421c      	tst	r4, r3
1a003d16:	d0fa      	beq.n	1a003d0e <_malloc_r+0x45a>
1a003d18:	4640      	mov	r0, r8
1a003d1a:	e65f      	b.n	1a0039dc <_malloc_r+0x128>
1a003d1c:	f103 0b10 	add.w	fp, r3, #16
1a003d20:	e6c7      	b.n	1a003ab2 <_malloc_r+0x1fe>
1a003d22:	687b      	ldr	r3, [r7, #4]
1a003d24:	1092      	asrs	r2, r2, #2
1a003d26:	f04f 0801 	mov.w	r8, #1
1a003d2a:	fa08 f202 	lsl.w	r2, r8, r2
1a003d2e:	4313      	orrs	r3, r2
1a003d30:	607b      	str	r3, [r7, #4]
1a003d32:	e770      	b.n	1a003c16 <_malloc_r+0x362>
1a003d34:	eb02 000b 	add.w	r0, r2, fp
1a003d38:	4240      	negs	r0, r0
1a003d3a:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a003d3e:	4649      	mov	r1, r9
1a003d40:	4630      	mov	r0, r6
1a003d42:	9200      	str	r2, [sp, #0]
1a003d44:	f7fc fc32 	bl	1a0005ac <_sbrk_r>
1a003d48:	1c43      	adds	r3, r0, #1
1a003d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003d4e:	f47f aee6 	bne.w	1a003b1e <_malloc_r+0x26a>
1a003d52:	46d1      	mov	r9, sl
1a003d54:	e6e6      	b.n	1a003b24 <_malloc_r+0x270>
1a003d56:	2a54      	cmp	r2, #84	; 0x54
1a003d58:	d825      	bhi.n	1a003da6 <_malloc_r+0x4f2>
1a003d5a:	0b1a      	lsrs	r2, r3, #12
1a003d5c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a003d60:	00c9      	lsls	r1, r1, #3
1a003d62:	326e      	adds	r2, #110	; 0x6e
1a003d64:	e744      	b.n	1a003bf0 <_malloc_r+0x33c>
1a003d66:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a003d6a:	d825      	bhi.n	1a003db8 <_malloc_r+0x504>
1a003d6c:	0beb      	lsrs	r3, r5, #15
1a003d6e:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a003d72:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a003d76:	00c3      	lsls	r3, r0, #3
1a003d78:	e5e1      	b.n	1a00393e <_malloc_r+0x8a>
1a003d7a:	4b29      	ldr	r3, [pc, #164]	; (1a003e20 <_malloc_r+0x56c>)
1a003d7c:	6819      	ldr	r1, [r3, #0]
1a003d7e:	4459      	add	r1, fp
1a003d80:	6019      	str	r1, [r3, #0]
1a003d82:	e6a8      	b.n	1a003ad6 <_malloc_r+0x222>
1a003d84:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a003d88:	f1bc 0f00 	cmp.w	ip, #0
1a003d8c:	f47f aea3 	bne.w	1a003ad6 <_malloc_r+0x222>
1a003d90:	44c3      	add	fp, r8
1a003d92:	68bc      	ldr	r4, [r7, #8]
1a003d94:	f04b 0101 	orr.w	r1, fp, #1
1a003d98:	6061      	str	r1, [r4, #4]
1a003d9a:	e6e7      	b.n	1a003b6c <_malloc_r+0x2b8>
1a003d9c:	4614      	mov	r4, r2
1a003d9e:	e6e5      	b.n	1a003b6c <_malloc_r+0x2b8>
1a003da0:	2301      	movs	r3, #1
1a003da2:	6053      	str	r3, [r2, #4]
1a003da4:	e794      	b.n	1a003cd0 <_malloc_r+0x41c>
1a003da6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a003daa:	d823      	bhi.n	1a003df4 <_malloc_r+0x540>
1a003dac:	0bda      	lsrs	r2, r3, #15
1a003dae:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a003db2:	00c9      	lsls	r1, r1, #3
1a003db4:	3277      	adds	r2, #119	; 0x77
1a003db6:	e71b      	b.n	1a003bf0 <_malloc_r+0x33c>
1a003db8:	f240 5254 	movw	r2, #1364	; 0x554
1a003dbc:	4293      	cmp	r3, r2
1a003dbe:	d823      	bhi.n	1a003e08 <_malloc_r+0x554>
1a003dc0:	0cab      	lsrs	r3, r5, #18
1a003dc2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a003dc6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a003dca:	00c3      	lsls	r3, r0, #3
1a003dcc:	e5b7      	b.n	1a00393e <_malloc_r+0x8a>
1a003dce:	f1aa 0a08 	sub.w	sl, sl, #8
1a003dd2:	44d3      	add	fp, sl
1a003dd4:	ebab 0b02 	sub.w	fp, fp, r2
1a003dd8:	f04f 0900 	mov.w	r9, #0
1a003ddc:	e6a2      	b.n	1a003b24 <_malloc_r+0x270>
1a003dde:	f104 0108 	add.w	r1, r4, #8
1a003de2:	4630      	mov	r0, r6
1a003de4:	9300      	str	r3, [sp, #0]
1a003de6:	f7ff fc19 	bl	1a00361c <_free_r>
1a003dea:	68bc      	ldr	r4, [r7, #8]
1a003dec:	9b00      	ldr	r3, [sp, #0]
1a003dee:	6861      	ldr	r1, [r4, #4]
1a003df0:	6818      	ldr	r0, [r3, #0]
1a003df2:	e6bb      	b.n	1a003b6c <_malloc_r+0x2b8>
1a003df4:	f240 5154 	movw	r1, #1364	; 0x554
1a003df8:	428a      	cmp	r2, r1
1a003dfa:	d80b      	bhi.n	1a003e14 <_malloc_r+0x560>
1a003dfc:	0c9a      	lsrs	r2, r3, #18
1a003dfe:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a003e02:	00c9      	lsls	r1, r1, #3
1a003e04:	327c      	adds	r2, #124	; 0x7c
1a003e06:	e6f3      	b.n	1a003bf0 <_malloc_r+0x33c>
1a003e08:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a003e0c:	207f      	movs	r0, #127	; 0x7f
1a003e0e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a003e12:	e594      	b.n	1a00393e <_malloc_r+0x8a>
1a003e14:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a003e18:	227e      	movs	r2, #126	; 0x7e
1a003e1a:	e6e9      	b.n	1a003bf0 <_malloc_r+0x33c>
1a003e1c:	687b      	ldr	r3, [r7, #4]
1a003e1e:	e770      	b.n	1a003d02 <_malloc_r+0x44e>
1a003e20:	10000b70 	.word	0x10000b70

1a003e24 <memcpy>:
1a003e24:	4684      	mov	ip, r0
1a003e26:	ea41 0300 	orr.w	r3, r1, r0
1a003e2a:	f013 0303 	ands.w	r3, r3, #3
1a003e2e:	d16d      	bne.n	1a003f0c <memcpy+0xe8>
1a003e30:	3a40      	subs	r2, #64	; 0x40
1a003e32:	d341      	bcc.n	1a003eb8 <memcpy+0x94>
1a003e34:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e38:	f840 3b04 	str.w	r3, [r0], #4
1a003e3c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e40:	f840 3b04 	str.w	r3, [r0], #4
1a003e44:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e48:	f840 3b04 	str.w	r3, [r0], #4
1a003e4c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e50:	f840 3b04 	str.w	r3, [r0], #4
1a003e54:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e58:	f840 3b04 	str.w	r3, [r0], #4
1a003e5c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e60:	f840 3b04 	str.w	r3, [r0], #4
1a003e64:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e68:	f840 3b04 	str.w	r3, [r0], #4
1a003e6c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e70:	f840 3b04 	str.w	r3, [r0], #4
1a003e74:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e78:	f840 3b04 	str.w	r3, [r0], #4
1a003e7c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e80:	f840 3b04 	str.w	r3, [r0], #4
1a003e84:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e88:	f840 3b04 	str.w	r3, [r0], #4
1a003e8c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e90:	f840 3b04 	str.w	r3, [r0], #4
1a003e94:	f851 3b04 	ldr.w	r3, [r1], #4
1a003e98:	f840 3b04 	str.w	r3, [r0], #4
1a003e9c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ea0:	f840 3b04 	str.w	r3, [r0], #4
1a003ea4:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ea8:	f840 3b04 	str.w	r3, [r0], #4
1a003eac:	f851 3b04 	ldr.w	r3, [r1], #4
1a003eb0:	f840 3b04 	str.w	r3, [r0], #4
1a003eb4:	3a40      	subs	r2, #64	; 0x40
1a003eb6:	d2bd      	bcs.n	1a003e34 <memcpy+0x10>
1a003eb8:	3230      	adds	r2, #48	; 0x30
1a003eba:	d311      	bcc.n	1a003ee0 <memcpy+0xbc>
1a003ebc:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ec0:	f840 3b04 	str.w	r3, [r0], #4
1a003ec4:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ec8:	f840 3b04 	str.w	r3, [r0], #4
1a003ecc:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ed0:	f840 3b04 	str.w	r3, [r0], #4
1a003ed4:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ed8:	f840 3b04 	str.w	r3, [r0], #4
1a003edc:	3a10      	subs	r2, #16
1a003ede:	d2ed      	bcs.n	1a003ebc <memcpy+0x98>
1a003ee0:	320c      	adds	r2, #12
1a003ee2:	d305      	bcc.n	1a003ef0 <memcpy+0xcc>
1a003ee4:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ee8:	f840 3b04 	str.w	r3, [r0], #4
1a003eec:	3a04      	subs	r2, #4
1a003eee:	d2f9      	bcs.n	1a003ee4 <memcpy+0xc0>
1a003ef0:	3204      	adds	r2, #4
1a003ef2:	d008      	beq.n	1a003f06 <memcpy+0xe2>
1a003ef4:	07d2      	lsls	r2, r2, #31
1a003ef6:	bf1c      	itt	ne
1a003ef8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003efc:	f800 3b01 	strbne.w	r3, [r0], #1
1a003f00:	d301      	bcc.n	1a003f06 <memcpy+0xe2>
1a003f02:	880b      	ldrh	r3, [r1, #0]
1a003f04:	8003      	strh	r3, [r0, #0]
1a003f06:	4660      	mov	r0, ip
1a003f08:	4770      	bx	lr
1a003f0a:	bf00      	nop
1a003f0c:	2a08      	cmp	r2, #8
1a003f0e:	d313      	bcc.n	1a003f38 <memcpy+0x114>
1a003f10:	078b      	lsls	r3, r1, #30
1a003f12:	d08d      	beq.n	1a003e30 <memcpy+0xc>
1a003f14:	f010 0303 	ands.w	r3, r0, #3
1a003f18:	d08a      	beq.n	1a003e30 <memcpy+0xc>
1a003f1a:	f1c3 0304 	rsb	r3, r3, #4
1a003f1e:	1ad2      	subs	r2, r2, r3
1a003f20:	07db      	lsls	r3, r3, #31
1a003f22:	bf1c      	itt	ne
1a003f24:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003f28:	f800 3b01 	strbne.w	r3, [r0], #1
1a003f2c:	d380      	bcc.n	1a003e30 <memcpy+0xc>
1a003f2e:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003f32:	f820 3b02 	strh.w	r3, [r0], #2
1a003f36:	e77b      	b.n	1a003e30 <memcpy+0xc>
1a003f38:	3a04      	subs	r2, #4
1a003f3a:	d3d9      	bcc.n	1a003ef0 <memcpy+0xcc>
1a003f3c:	3a01      	subs	r2, #1
1a003f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003f42:	f800 3b01 	strb.w	r3, [r0], #1
1a003f46:	d2f9      	bcs.n	1a003f3c <memcpy+0x118>
1a003f48:	780b      	ldrb	r3, [r1, #0]
1a003f4a:	7003      	strb	r3, [r0, #0]
1a003f4c:	784b      	ldrb	r3, [r1, #1]
1a003f4e:	7043      	strb	r3, [r0, #1]
1a003f50:	788b      	ldrb	r3, [r1, #2]
1a003f52:	7083      	strb	r3, [r0, #2]
1a003f54:	4660      	mov	r0, ip
1a003f56:	4770      	bx	lr

1a003f58 <memset>:
1a003f58:	b4f0      	push	{r4, r5, r6, r7}
1a003f5a:	0786      	lsls	r6, r0, #30
1a003f5c:	d046      	beq.n	1a003fec <memset+0x94>
1a003f5e:	1e54      	subs	r4, r2, #1
1a003f60:	2a00      	cmp	r2, #0
1a003f62:	d03c      	beq.n	1a003fde <memset+0x86>
1a003f64:	b2ca      	uxtb	r2, r1
1a003f66:	4603      	mov	r3, r0
1a003f68:	e002      	b.n	1a003f70 <memset+0x18>
1a003f6a:	f114 34ff 	adds.w	r4, r4, #4294967295
1a003f6e:	d336      	bcc.n	1a003fde <memset+0x86>
1a003f70:	f803 2b01 	strb.w	r2, [r3], #1
1a003f74:	079d      	lsls	r5, r3, #30
1a003f76:	d1f8      	bne.n	1a003f6a <memset+0x12>
1a003f78:	2c03      	cmp	r4, #3
1a003f7a:	d929      	bls.n	1a003fd0 <memset+0x78>
1a003f7c:	b2cd      	uxtb	r5, r1
1a003f7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003f82:	2c0f      	cmp	r4, #15
1a003f84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003f88:	d933      	bls.n	1a003ff2 <memset+0x9a>
1a003f8a:	f1a4 0610 	sub.w	r6, r4, #16
1a003f8e:	0936      	lsrs	r6, r6, #4
1a003f90:	f103 0720 	add.w	r7, r3, #32
1a003f94:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003f98:	f103 0210 	add.w	r2, r3, #16
1a003f9c:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003fa0:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003fa4:	3210      	adds	r2, #16
1a003fa6:	42ba      	cmp	r2, r7
1a003fa8:	d1f8      	bne.n	1a003f9c <memset+0x44>
1a003faa:	1c72      	adds	r2, r6, #1
1a003fac:	f014 0f0c 	tst.w	r4, #12
1a003fb0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a003fb4:	f004 060f 	and.w	r6, r4, #15
1a003fb8:	d013      	beq.n	1a003fe2 <memset+0x8a>
1a003fba:	1f33      	subs	r3, r6, #4
1a003fbc:	f023 0303 	bic.w	r3, r3, #3
1a003fc0:	3304      	adds	r3, #4
1a003fc2:	4413      	add	r3, r2
1a003fc4:	f842 5b04 	str.w	r5, [r2], #4
1a003fc8:	4293      	cmp	r3, r2
1a003fca:	d1fb      	bne.n	1a003fc4 <memset+0x6c>
1a003fcc:	f006 0403 	and.w	r4, r6, #3
1a003fd0:	b12c      	cbz	r4, 1a003fde <memset+0x86>
1a003fd2:	b2c9      	uxtb	r1, r1
1a003fd4:	441c      	add	r4, r3
1a003fd6:	f803 1b01 	strb.w	r1, [r3], #1
1a003fda:	429c      	cmp	r4, r3
1a003fdc:	d1fb      	bne.n	1a003fd6 <memset+0x7e>
1a003fde:	bcf0      	pop	{r4, r5, r6, r7}
1a003fe0:	4770      	bx	lr
1a003fe2:	4634      	mov	r4, r6
1a003fe4:	4613      	mov	r3, r2
1a003fe6:	2c00      	cmp	r4, #0
1a003fe8:	d1f3      	bne.n	1a003fd2 <memset+0x7a>
1a003fea:	e7f8      	b.n	1a003fde <memset+0x86>
1a003fec:	4614      	mov	r4, r2
1a003fee:	4603      	mov	r3, r0
1a003ff0:	e7c2      	b.n	1a003f78 <memset+0x20>
1a003ff2:	461a      	mov	r2, r3
1a003ff4:	4626      	mov	r6, r4
1a003ff6:	e7e0      	b.n	1a003fba <memset+0x62>

1a003ff8 <__malloc_lock>:
1a003ff8:	4801      	ldr	r0, [pc, #4]	; (1a004000 <__malloc_lock+0x8>)
1a003ffa:	f7ff bc57 	b.w	1a0038ac <__retarget_lock_acquire_recursive>
1a003ffe:	bf00      	nop
1a004000:	10000bbc 	.word	0x10000bbc

1a004004 <__malloc_unlock>:
1a004004:	4801      	ldr	r0, [pc, #4]	; (1a00400c <__malloc_unlock+0x8>)
1a004006:	f7ff bc53 	b.w	1a0038b0 <__retarget_lock_release_recursive>
1a00400a:	bf00      	nop
1a00400c:	10000bbc 	.word	0x10000bbc

1a004010 <printf>:
1a004010:	b40f      	push	{r0, r1, r2, r3}
1a004012:	b500      	push	{lr}
1a004014:	4907      	ldr	r1, [pc, #28]	; (1a004034 <printf+0x24>)
1a004016:	b083      	sub	sp, #12
1a004018:	ab04      	add	r3, sp, #16
1a00401a:	6808      	ldr	r0, [r1, #0]
1a00401c:	f853 2b04 	ldr.w	r2, [r3], #4
1a004020:	6881      	ldr	r1, [r0, #8]
1a004022:	9301      	str	r3, [sp, #4]
1a004024:	f000 f91c 	bl	1a004260 <_vfprintf_r>
1a004028:	b003      	add	sp, #12
1a00402a:	f85d eb04 	ldr.w	lr, [sp], #4
1a00402e:	b004      	add	sp, #16
1a004030:	4770      	bx	lr
1a004032:	bf00      	nop
1a004034:	10000048 	.word	0x10000048

1a004038 <_puts_r>:
1a004038:	b570      	push	{r4, r5, r6, lr}
1a00403a:	4605      	mov	r5, r0
1a00403c:	b088      	sub	sp, #32
1a00403e:	4608      	mov	r0, r1
1a004040:	460c      	mov	r4, r1
1a004042:	f000 f89d 	bl	1a004180 <strlen>
1a004046:	4a22      	ldr	r2, [pc, #136]	; (1a0040d0 <_puts_r+0x98>)
1a004048:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a00404a:	9404      	str	r4, [sp, #16]
1a00404c:	2601      	movs	r6, #1
1a00404e:	1c44      	adds	r4, r0, #1
1a004050:	a904      	add	r1, sp, #16
1a004052:	9206      	str	r2, [sp, #24]
1a004054:	2202      	movs	r2, #2
1a004056:	9403      	str	r4, [sp, #12]
1a004058:	9005      	str	r0, [sp, #20]
1a00405a:	68ac      	ldr	r4, [r5, #8]
1a00405c:	9607      	str	r6, [sp, #28]
1a00405e:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a004062:	b31b      	cbz	r3, 1a0040ac <_puts_r+0x74>
1a004064:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a004066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00406a:	07ce      	lsls	r6, r1, #31
1a00406c:	b29a      	uxth	r2, r3
1a00406e:	d401      	bmi.n	1a004074 <_puts_r+0x3c>
1a004070:	0590      	lsls	r0, r2, #22
1a004072:	d525      	bpl.n	1a0040c0 <_puts_r+0x88>
1a004074:	0491      	lsls	r1, r2, #18
1a004076:	d406      	bmi.n	1a004086 <_puts_r+0x4e>
1a004078:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00407a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00407e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a004082:	81a3      	strh	r3, [r4, #12]
1a004084:	6662      	str	r2, [r4, #100]	; 0x64
1a004086:	4628      	mov	r0, r5
1a004088:	aa01      	add	r2, sp, #4
1a00408a:	4621      	mov	r1, r4
1a00408c:	f002 fefa 	bl	1a006e84 <__sfvwrite_r>
1a004090:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a004092:	2800      	cmp	r0, #0
1a004094:	bf14      	ite	ne
1a004096:	f04f 35ff 	movne.w	r5, #4294967295
1a00409a:	250a      	moveq	r5, #10
1a00409c:	07da      	lsls	r2, r3, #31
1a00409e:	d402      	bmi.n	1a0040a6 <_puts_r+0x6e>
1a0040a0:	89a3      	ldrh	r3, [r4, #12]
1a0040a2:	059b      	lsls	r3, r3, #22
1a0040a4:	d506      	bpl.n	1a0040b4 <_puts_r+0x7c>
1a0040a6:	4628      	mov	r0, r5
1a0040a8:	b008      	add	sp, #32
1a0040aa:	bd70      	pop	{r4, r5, r6, pc}
1a0040ac:	4628      	mov	r0, r5
1a0040ae:	f7ff fa2f 	bl	1a003510 <__sinit>
1a0040b2:	e7d7      	b.n	1a004064 <_puts_r+0x2c>
1a0040b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0040b6:	f7ff fbfb 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a0040ba:	4628      	mov	r0, r5
1a0040bc:	b008      	add	sp, #32
1a0040be:	bd70      	pop	{r4, r5, r6, pc}
1a0040c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0040c2:	f7ff fbf3 	bl	1a0038ac <__retarget_lock_acquire_recursive>
1a0040c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0040ca:	b29a      	uxth	r2, r3
1a0040cc:	e7d2      	b.n	1a004074 <_puts_r+0x3c>
1a0040ce:	bf00      	nop
1a0040d0:	1a0083a0 	.word	0x1a0083a0

1a0040d4 <puts>:
1a0040d4:	4b02      	ldr	r3, [pc, #8]	; (1a0040e0 <puts+0xc>)
1a0040d6:	4601      	mov	r1, r0
1a0040d8:	6818      	ldr	r0, [r3, #0]
1a0040da:	f7ff bfad 	b.w	1a004038 <_puts_r>
1a0040de:	bf00      	nop
1a0040e0:	10000048 	.word	0x10000048

1a0040e4 <__sread>:
1a0040e4:	b510      	push	{r4, lr}
1a0040e6:	460c      	mov	r4, r1
1a0040e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0040ec:	f7fc fa22 	bl	1a000534 <_read_r>
1a0040f0:	2800      	cmp	r0, #0
1a0040f2:	db03      	blt.n	1a0040fc <__sread+0x18>
1a0040f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0040f6:	4403      	add	r3, r0
1a0040f8:	6523      	str	r3, [r4, #80]	; 0x50
1a0040fa:	bd10      	pop	{r4, pc}
1a0040fc:	89a3      	ldrh	r3, [r4, #12]
1a0040fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004102:	81a3      	strh	r3, [r4, #12]
1a004104:	bd10      	pop	{r4, pc}
1a004106:	bf00      	nop

1a004108 <__swrite>:
1a004108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00410c:	4616      	mov	r6, r2
1a00410e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a004112:	461f      	mov	r7, r3
1a004114:	05d3      	lsls	r3, r2, #23
1a004116:	460c      	mov	r4, r1
1a004118:	4605      	mov	r5, r0
1a00411a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00411e:	d409      	bmi.n	1a004134 <__swrite+0x2c>
1a004120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a004124:	81a2      	strh	r2, [r4, #12]
1a004126:	463b      	mov	r3, r7
1a004128:	4632      	mov	r2, r6
1a00412a:	4628      	mov	r0, r5
1a00412c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004130:	f7fc ba27 	b.w	1a000582 <_write_r>
1a004134:	2200      	movs	r2, #0
1a004136:	2302      	movs	r3, #2
1a004138:	f7fc f9f7 	bl	1a00052a <_lseek_r>
1a00413c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004144:	e7ec      	b.n	1a004120 <__swrite+0x18>
1a004146:	bf00      	nop

1a004148 <__sseek>:
1a004148:	b510      	push	{r4, lr}
1a00414a:	460c      	mov	r4, r1
1a00414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004150:	f7fc f9eb 	bl	1a00052a <_lseek_r>
1a004154:	89a3      	ldrh	r3, [r4, #12]
1a004156:	1c42      	adds	r2, r0, #1
1a004158:	bf0e      	itee	eq
1a00415a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00415e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004162:	6520      	strne	r0, [r4, #80]	; 0x50
1a004164:	81a3      	strh	r3, [r4, #12]
1a004166:	bd10      	pop	{r4, pc}

1a004168 <__sclose>:
1a004168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00416c:	f7fc b9ca 	b.w	1a000504 <_close_r>
1a004170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a004174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a004178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00417c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a004180 <strlen>:
1a004180:	f890 f000 	pld	[r0]
1a004184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a004188:	f020 0107 	bic.w	r1, r0, #7
1a00418c:	f06f 0c00 	mvn.w	ip, #0
1a004190:	f010 0407 	ands.w	r4, r0, #7
1a004194:	f891 f020 	pld	[r1, #32]
1a004198:	f040 8049 	bne.w	1a00422e <strlen+0xae>
1a00419c:	f04f 0400 	mov.w	r4, #0
1a0041a0:	f06f 0007 	mvn.w	r0, #7
1a0041a4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0041a8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0041ac:	f100 0008 	add.w	r0, r0, #8
1a0041b0:	fa82 f24c 	uadd8	r2, r2, ip
1a0041b4:	faa4 f28c 	sel	r2, r4, ip
1a0041b8:	fa83 f34c 	uadd8	r3, r3, ip
1a0041bc:	faa2 f38c 	sel	r3, r2, ip
1a0041c0:	bb4b      	cbnz	r3, 1a004216 <strlen+0x96>
1a0041c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a0041c6:	fa82 f24c 	uadd8	r2, r2, ip
1a0041ca:	f100 0008 	add.w	r0, r0, #8
1a0041ce:	faa4 f28c 	sel	r2, r4, ip
1a0041d2:	fa83 f34c 	uadd8	r3, r3, ip
1a0041d6:	faa2 f38c 	sel	r3, r2, ip
1a0041da:	b9e3      	cbnz	r3, 1a004216 <strlen+0x96>
1a0041dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0041e0:	fa82 f24c 	uadd8	r2, r2, ip
1a0041e4:	f100 0008 	add.w	r0, r0, #8
1a0041e8:	faa4 f28c 	sel	r2, r4, ip
1a0041ec:	fa83 f34c 	uadd8	r3, r3, ip
1a0041f0:	faa2 f38c 	sel	r3, r2, ip
1a0041f4:	b97b      	cbnz	r3, 1a004216 <strlen+0x96>
1a0041f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0041fa:	f101 0120 	add.w	r1, r1, #32
1a0041fe:	fa82 f24c 	uadd8	r2, r2, ip
1a004202:	f100 0008 	add.w	r0, r0, #8
1a004206:	faa4 f28c 	sel	r2, r4, ip
1a00420a:	fa83 f34c 	uadd8	r3, r3, ip
1a00420e:	faa2 f38c 	sel	r3, r2, ip
1a004212:	2b00      	cmp	r3, #0
1a004214:	d0c6      	beq.n	1a0041a4 <strlen+0x24>
1a004216:	2a00      	cmp	r2, #0
1a004218:	bf04      	itt	eq
1a00421a:	3004      	addeq	r0, #4
1a00421c:	461a      	moveq	r2, r3
1a00421e:	ba12      	rev	r2, r2
1a004220:	fab2 f282 	clz	r2, r2
1a004224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a004228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00422c:	4770      	bx	lr
1a00422e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a004232:	f004 0503 	and.w	r5, r4, #3
1a004236:	f1c4 0000 	rsb	r0, r4, #0
1a00423a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00423e:	f014 0f04 	tst.w	r4, #4
1a004242:	f891 f040 	pld	[r1, #64]	; 0x40
1a004246:	fa0c f505 	lsl.w	r5, ip, r5
1a00424a:	ea62 0205 	orn	r2, r2, r5
1a00424e:	bf1c      	itt	ne
1a004250:	ea63 0305 	ornne	r3, r3, r5
1a004254:	4662      	movne	r2, ip
1a004256:	f04f 0400 	mov.w	r4, #0
1a00425a:	e7a9      	b.n	1a0041b0 <strlen+0x30>
1a00425c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a004260 <_vfprintf_r>:
1a004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004264:	b0d5      	sub	sp, #340	; 0x154
1a004266:	461c      	mov	r4, r3
1a004268:	4689      	mov	r9, r1
1a00426a:	4617      	mov	r7, r2
1a00426c:	4605      	mov	r5, r0
1a00426e:	9005      	str	r0, [sp, #20]
1a004270:	f002 ff8c 	bl	1a00718c <_localeconv_r>
1a004274:	6803      	ldr	r3, [r0, #0]
1a004276:	9315      	str	r3, [sp, #84]	; 0x54
1a004278:	4618      	mov	r0, r3
1a00427a:	f7ff ff81 	bl	1a004180 <strlen>
1a00427e:	9408      	str	r4, [sp, #32]
1a004280:	9013      	str	r0, [sp, #76]	; 0x4c
1a004282:	b11d      	cbz	r5, 1a00428c <_vfprintf_r+0x2c>
1a004284:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a004286:	2b00      	cmp	r3, #0
1a004288:	f000 8411 	beq.w	1a004aae <_vfprintf_r+0x84e>
1a00428c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a004290:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a004294:	07cd      	lsls	r5, r1, #31
1a004296:	b293      	uxth	r3, r2
1a004298:	d402      	bmi.n	1a0042a0 <_vfprintf_r+0x40>
1a00429a:	0598      	lsls	r0, r3, #22
1a00429c:	f140 8754 	bpl.w	1a005148 <_vfprintf_r+0xee8>
1a0042a0:	0499      	lsls	r1, r3, #18
1a0042a2:	d40a      	bmi.n	1a0042ba <_vfprintf_r+0x5a>
1a0042a4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0042a8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a0042ac:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0042b0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0042b4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a0042b8:	b29b      	uxth	r3, r3
1a0042ba:	071a      	lsls	r2, r3, #28
1a0042bc:	f140 80bf 	bpl.w	1a00443e <_vfprintf_r+0x1de>
1a0042c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a0042c4:	2a00      	cmp	r2, #0
1a0042c6:	f000 80ba 	beq.w	1a00443e <_vfprintf_r+0x1de>
1a0042ca:	f003 021a 	and.w	r2, r3, #26
1a0042ce:	2a0a      	cmp	r2, #10
1a0042d0:	f000 80c3 	beq.w	1a00445a <_vfprintf_r+0x1fa>
1a0042d4:	2300      	movs	r3, #0
1a0042d6:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a004548 <_vfprintf_r+0x2e8>
1a0042da:	9312      	str	r3, [sp, #72]	; 0x48
1a0042dc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a0042e0:	9314      	str	r3, [sp, #80]	; 0x50
1a0042e2:	9316      	str	r3, [sp, #88]	; 0x58
1a0042e4:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a0042e8:	9317      	str	r3, [sp, #92]	; 0x5c
1a0042ea:	9304      	str	r3, [sp, #16]
1a0042ec:	ab2b      	add	r3, sp, #172	; 0xac
1a0042ee:	9328      	str	r3, [sp, #160]	; 0xa0
1a0042f0:	469b      	mov	fp, r3
1a0042f2:	783b      	ldrb	r3, [r7, #0]
1a0042f4:	f8cd 901c 	str.w	r9, [sp, #28]
1a0042f8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0042fc:	2b00      	cmp	r3, #0
1a0042fe:	f000 8267 	beq.w	1a0047d0 <_vfprintf_r+0x570>
1a004302:	2b25      	cmp	r3, #37	; 0x25
1a004304:	f001 80ab 	beq.w	1a00545e <_vfprintf_r+0x11fe>
1a004308:	463d      	mov	r5, r7
1a00430a:	e003      	b.n	1a004314 <_vfprintf_r+0xb4>
1a00430c:	2b25      	cmp	r3, #37	; 0x25
1a00430e:	f000 80bb 	beq.w	1a004488 <_vfprintf_r+0x228>
1a004312:	4625      	mov	r5, r4
1a004314:	786b      	ldrb	r3, [r5, #1]
1a004316:	1c6c      	adds	r4, r5, #1
1a004318:	2b00      	cmp	r3, #0
1a00431a:	d1f7      	bne.n	1a00430c <_vfprintf_r+0xac>
1a00431c:	1be6      	subs	r6, r4, r7
1a00431e:	f000 8257 	beq.w	1a0047d0 <_vfprintf_r+0x570>
1a004322:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a004326:	3301      	adds	r3, #1
1a004328:	4432      	add	r2, r6
1a00432a:	2b07      	cmp	r3, #7
1a00432c:	f8cb 7000 	str.w	r7, [fp]
1a004330:	f8cb 6004 	str.w	r6, [fp, #4]
1a004334:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a004338:	f300 80aa 	bgt.w	1a004490 <_vfprintf_r+0x230>
1a00433c:	f10b 0b08 	add.w	fp, fp, #8
1a004340:	9a04      	ldr	r2, [sp, #16]
1a004342:	786b      	ldrb	r3, [r5, #1]
1a004344:	4432      	add	r2, r6
1a004346:	9204      	str	r2, [sp, #16]
1a004348:	2b00      	cmp	r3, #0
1a00434a:	f000 8241 	beq.w	1a0047d0 <_vfprintf_r+0x570>
1a00434e:	2300      	movs	r3, #0
1a004350:	f894 8001 	ldrb.w	r8, [r4, #1]
1a004354:	9306      	str	r3, [sp, #24]
1a004356:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a00435a:	9302      	str	r3, [sp, #8]
1a00435c:	f104 0a01 	add.w	sl, r4, #1
1a004360:	f04f 39ff 	mov.w	r9, #4294967295
1a004364:	262b      	movs	r6, #43	; 0x2b
1a004366:	2120      	movs	r1, #32
1a004368:	f10a 0a01 	add.w	sl, sl, #1
1a00436c:	f1a8 0320 	sub.w	r3, r8, #32
1a004370:	2b5a      	cmp	r3, #90	; 0x5a
1a004372:	f200 83a1 	bhi.w	1a004ab8 <_vfprintf_r+0x858>
1a004376:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00437a:	0282      	.short	0x0282
1a00437c:	039f039f 	.word	0x039f039f
1a004380:	039f027b 	.word	0x039f027b
1a004384:	039f039f 	.word	0x039f039f
1a004388:	039f0301 	.word	0x039f0301
1a00438c:	02f6039f 	.word	0x02f6039f
1a004390:	039f00df 	.word	0x039f00df
1a004394:	032b00c4 	.word	0x032b00c4
1a004398:	0324039f 	.word	0x0324039f
1a00439c:	00960096 	.word	0x00960096
1a0043a0:	00960096 	.word	0x00960096
1a0043a4:	00960096 	.word	0x00960096
1a0043a8:	00960096 	.word	0x00960096
1a0043ac:	039f0096 	.word	0x039f0096
1a0043b0:	039f039f 	.word	0x039f039f
1a0043b4:	039f039f 	.word	0x039f039f
1a0043b8:	039f039f 	.word	0x039f039f
1a0043bc:	039f0345 	.word	0x039f0345
1a0043c0:	016201a8 	.word	0x016201a8
1a0043c4:	03450345 	.word	0x03450345
1a0043c8:	039f0345 	.word	0x039f0345
1a0043cc:	039f039f 	.word	0x039f039f
1a0043d0:	015b039f 	.word	0x015b039f
1a0043d4:	039f039f 	.word	0x039f039f
1a0043d8:	039f014e 	.word	0x039f014e
1a0043dc:	039f039f 	.word	0x039f039f
1a0043e0:	039f0123 	.word	0x039f0123
1a0043e4:	039f0115 	.word	0x039f0115
1a0043e8:	00cb039f 	.word	0x00cb039f
1a0043ec:	039f039f 	.word	0x039f039f
1a0043f0:	039f039f 	.word	0x039f039f
1a0043f4:	039f039f 	.word	0x039f039f
1a0043f8:	039f039f 	.word	0x039f039f
1a0043fc:	039f0345 	.word	0x039f0345
1a004400:	00ef01a8 	.word	0x00ef01a8
1a004404:	03450345 	.word	0x03450345
1a004408:	02700345 	.word	0x02700345
1a00440c:	005b00ef 	.word	0x005b00ef
1a004410:	02eb039f 	.word	0x02eb039f
1a004414:	02d1039f 	.word	0x02d1039f
1a004418:	028c02bd 	.word	0x028c02bd
1a00441c:	039f005b 	.word	0x039f005b
1a004420:	005f0123 	.word	0x005f0123
1a004424:	039f0387 	.word	0x039f0387
1a004428:	00a5039f 	.word	0x00a5039f
1a00442c:	005f039f 	.word	0x005f039f
1a004430:	9b02      	ldr	r3, [sp, #8]
1a004432:	f043 0320 	orr.w	r3, r3, #32
1a004436:	9302      	str	r3, [sp, #8]
1a004438:	f89a 8000 	ldrb.w	r8, [sl]
1a00443c:	e794      	b.n	1a004368 <_vfprintf_r+0x108>
1a00443e:	4649      	mov	r1, r9
1a004440:	9805      	ldr	r0, [sp, #20]
1a004442:	f001 fcf9 	bl	1a005e38 <__swsetup_r>
1a004446:	2800      	cmp	r0, #0
1a004448:	f041 8381 	bne.w	1a005b4e <_vfprintf_r+0x18ee>
1a00444c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004450:	f003 021a 	and.w	r2, r3, #26
1a004454:	2a0a      	cmp	r2, #10
1a004456:	f47f af3d 	bne.w	1a0042d4 <_vfprintf_r+0x74>
1a00445a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a00445e:	2a00      	cmp	r2, #0
1a004460:	f6ff af38 	blt.w	1a0042d4 <_vfprintf_r+0x74>
1a004464:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a004468:	07d6      	lsls	r6, r2, #31
1a00446a:	d402      	bmi.n	1a004472 <_vfprintf_r+0x212>
1a00446c:	059d      	lsls	r5, r3, #22
1a00446e:	f141 8190 	bpl.w	1a005792 <_vfprintf_r+0x1532>
1a004472:	4623      	mov	r3, r4
1a004474:	463a      	mov	r2, r7
1a004476:	4649      	mov	r1, r9
1a004478:	9805      	ldr	r0, [sp, #20]
1a00447a:	f001 fc9b 	bl	1a005db4 <__sbprintf>
1a00447e:	9004      	str	r0, [sp, #16]
1a004480:	9804      	ldr	r0, [sp, #16]
1a004482:	b055      	add	sp, #340	; 0x154
1a004484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004488:	1be6      	subs	r6, r4, r7
1a00448a:	f43f af60 	beq.w	1a00434e <_vfprintf_r+0xee>
1a00448e:	e748      	b.n	1a004322 <_vfprintf_r+0xc2>
1a004490:	aa28      	add	r2, sp, #160	; 0xa0
1a004492:	9907      	ldr	r1, [sp, #28]
1a004494:	9805      	ldr	r0, [sp, #20]
1a004496:	f003 fd1f 	bl	1a007ed8 <__sprint_r>
1a00449a:	2800      	cmp	r0, #0
1a00449c:	f041 8427 	bne.w	1a005cee <_vfprintf_r+0x1a8e>
1a0044a0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0044a4:	e74c      	b.n	1a004340 <_vfprintf_r+0xe0>
1a0044a6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0044aa:	2200      	movs	r2, #0
1a0044ac:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0044b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0044b4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a0044b8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0044bc:	2b09      	cmp	r3, #9
1a0044be:	d9f5      	bls.n	1a0044ac <_vfprintf_r+0x24c>
1a0044c0:	9206      	str	r2, [sp, #24]
1a0044c2:	e753      	b.n	1a00436c <_vfprintf_r+0x10c>
1a0044c4:	4b22      	ldr	r3, [pc, #136]	; (1a004550 <_vfprintf_r+0x2f0>)
1a0044c6:	9314      	str	r3, [sp, #80]	; 0x50
1a0044c8:	9b02      	ldr	r3, [sp, #8]
1a0044ca:	069f      	lsls	r7, r3, #26
1a0044cc:	d525      	bpl.n	1a00451a <_vfprintf_r+0x2ba>
1a0044ce:	9c08      	ldr	r4, [sp, #32]
1a0044d0:	3407      	adds	r4, #7
1a0044d2:	f024 0307 	bic.w	r3, r4, #7
1a0044d6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0044da:	9308      	str	r3, [sp, #32]
1a0044dc:	9a02      	ldr	r2, [sp, #8]
1a0044de:	07d1      	lsls	r1, r2, #31
1a0044e0:	d50a      	bpl.n	1a0044f8 <_vfprintf_r+0x298>
1a0044e2:	ea54 0305 	orrs.w	r3, r4, r5
1a0044e6:	d007      	beq.n	1a0044f8 <_vfprintf_r+0x298>
1a0044e8:	2330      	movs	r3, #48	; 0x30
1a0044ea:	f042 0202 	orr.w	r2, r2, #2
1a0044ee:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a0044f2:	9202      	str	r2, [sp, #8]
1a0044f4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0044f8:	9b02      	ldr	r3, [sp, #8]
1a0044fa:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a0044fe:	2302      	movs	r3, #2
1a004500:	e1d9      	b.n	1a0048b6 <_vfprintf_r+0x656>
1a004502:	f89a 8000 	ldrb.w	r8, [sl]
1a004506:	9b02      	ldr	r3, [sp, #8]
1a004508:	f043 0304 	orr.w	r3, r3, #4
1a00450c:	9302      	str	r3, [sp, #8]
1a00450e:	e72b      	b.n	1a004368 <_vfprintf_r+0x108>
1a004510:	4b10      	ldr	r3, [pc, #64]	; (1a004554 <_vfprintf_r+0x2f4>)
1a004512:	9314      	str	r3, [sp, #80]	; 0x50
1a004514:	9b02      	ldr	r3, [sp, #8]
1a004516:	069f      	lsls	r7, r3, #26
1a004518:	d4d9      	bmi.n	1a0044ce <_vfprintf_r+0x26e>
1a00451a:	9b08      	ldr	r3, [sp, #32]
1a00451c:	f853 4b04 	ldr.w	r4, [r3], #4
1a004520:	9308      	str	r3, [sp, #32]
1a004522:	9b02      	ldr	r3, [sp, #8]
1a004524:	06de      	lsls	r6, r3, #27
1a004526:	f100 864f 	bmi.w	1a0051c8 <_vfprintf_r+0xf68>
1a00452a:	9b02      	ldr	r3, [sp, #8]
1a00452c:	065d      	lsls	r5, r3, #25
1a00452e:	f140 8647 	bpl.w	1a0051c0 <_vfprintf_r+0xf60>
1a004532:	b2a4      	uxth	r4, r4
1a004534:	2500      	movs	r5, #0
1a004536:	e7d1      	b.n	1a0044dc <_vfprintf_r+0x27c>
1a004538:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a00453c:	f89a 8000 	ldrb.w	r8, [sl]
1a004540:	e712      	b.n	1a004368 <_vfprintf_r+0x108>
1a004542:	bf00      	nop
1a004544:	f3af 8000 	nop.w
	...
1a004550:	1a00874c 	.word	0x1a00874c
1a004554:	1a008738 	.word	0x1a008738
1a004558:	9e02      	ldr	r6, [sp, #8]
1a00455a:	06b0      	lsls	r0, r6, #26
1a00455c:	f140 870b 	bpl.w	1a005376 <_vfprintf_r+0x1116>
1a004560:	9c08      	ldr	r4, [sp, #32]
1a004562:	3407      	adds	r4, #7
1a004564:	f024 0307 	bic.w	r3, r4, #7
1a004568:	4619      	mov	r1, r3
1a00456a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a00456e:	9108      	str	r1, [sp, #32]
1a004570:	4614      	mov	r4, r2
1a004572:	461d      	mov	r5, r3
1a004574:	2a00      	cmp	r2, #0
1a004576:	f173 0300 	sbcs.w	r3, r3, #0
1a00457a:	db71      	blt.n	1a004660 <_vfprintf_r+0x400>
1a00457c:	f1b9 3fff 	cmp.w	r9, #4294967295
1a004580:	f000 82c5 	beq.w	1a004b0e <_vfprintf_r+0x8ae>
1a004584:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a004588:	9302      	str	r3, [sp, #8]
1a00458a:	ea54 0305 	orrs.w	r3, r4, r5
1a00458e:	f040 82bd 	bne.w	1a004b0c <_vfprintf_r+0x8ac>
1a004592:	f1b9 0f00 	cmp.w	r9, #0
1a004596:	f041 810e 	bne.w	1a0057b6 <_vfprintf_r+0x1556>
1a00459a:	f04f 0900 	mov.w	r9, #0
1a00459e:	464e      	mov	r6, r9
1a0045a0:	af54      	add	r7, sp, #336	; 0x150
1a0045a2:	e2bf      	b.n	1a004b24 <_vfprintf_r+0x8c4>
1a0045a4:	9b02      	ldr	r3, [sp, #8]
1a0045a6:	069d      	lsls	r5, r3, #26
1a0045a8:	f043 0610 	orr.w	r6, r3, #16
1a0045ac:	f100 828f 	bmi.w	1a004ace <_vfprintf_r+0x86e>
1a0045b0:	9b08      	ldr	r3, [sp, #32]
1a0045b2:	1d1a      	adds	r2, r3, #4
1a0045b4:	9b08      	ldr	r3, [sp, #32]
1a0045b6:	9208      	str	r2, [sp, #32]
1a0045b8:	681c      	ldr	r4, [r3, #0]
1a0045ba:	2500      	movs	r5, #0
1a0045bc:	2301      	movs	r3, #1
1a0045be:	e17a      	b.n	1a0048b6 <_vfprintf_r+0x656>
1a0045c0:	9c08      	ldr	r4, [sp, #32]
1a0045c2:	f854 7b04 	ldr.w	r7, [r4], #4
1a0045c6:	2500      	movs	r5, #0
1a0045c8:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a0045cc:	2f00      	cmp	r7, #0
1a0045ce:	f000 8737 	beq.w	1a005440 <_vfprintf_r+0x11e0>
1a0045d2:	f1b9 3fff 	cmp.w	r9, #4294967295
1a0045d6:	f000 87bc 	beq.w	1a005552 <_vfprintf_r+0x12f2>
1a0045da:	464a      	mov	r2, r9
1a0045dc:	4629      	mov	r1, r5
1a0045de:	4638      	mov	r0, r7
1a0045e0:	f002 fe56 	bl	1a007290 <memchr>
1a0045e4:	9009      	str	r0, [sp, #36]	; 0x24
1a0045e6:	2800      	cmp	r0, #0
1a0045e8:	f001 824a 	beq.w	1a005a80 <_vfprintf_r+0x1820>
1a0045ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0045ee:	46a9      	mov	r9, r5
1a0045f0:	1bde      	subs	r6, r3, r7
1a0045f2:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a0045f6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0045fa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0045fe:	9408      	str	r4, [sp, #32]
1a004600:	9303      	str	r3, [sp, #12]
1a004602:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a004606:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a00460a:	2a00      	cmp	r2, #0
1a00460c:	d06f      	beq.n	1a0046ee <_vfprintf_r+0x48e>
1a00460e:	9b03      	ldr	r3, [sp, #12]
1a004610:	3301      	adds	r3, #1
1a004612:	9303      	str	r3, [sp, #12]
1a004614:	e06b      	b.n	1a0046ee <_vfprintf_r+0x48e>
1a004616:	9b02      	ldr	r3, [sp, #8]
1a004618:	069c      	lsls	r4, r3, #26
1a00461a:	f043 0610 	orr.w	r6, r3, #16
1a00461e:	f100 825f 	bmi.w	1a004ae0 <_vfprintf_r+0x880>
1a004622:	9b08      	ldr	r3, [sp, #32]
1a004624:	1d1a      	adds	r2, r3, #4
1a004626:	9b08      	ldr	r3, [sp, #32]
1a004628:	9208      	str	r2, [sp, #32]
1a00462a:	681c      	ldr	r4, [r3, #0]
1a00462c:	2500      	movs	r5, #0
1a00462e:	e25e      	b.n	1a004aee <_vfprintf_r+0x88e>
1a004630:	9b02      	ldr	r3, [sp, #8]
1a004632:	f89a 8000 	ldrb.w	r8, [sl]
1a004636:	f043 0308 	orr.w	r3, r3, #8
1a00463a:	9302      	str	r3, [sp, #8]
1a00463c:	e694      	b.n	1a004368 <_vfprintf_r+0x108>
1a00463e:	9b02      	ldr	r3, [sp, #8]
1a004640:	069c      	lsls	r4, r3, #26
1a004642:	f043 0610 	orr.w	r6, r3, #16
1a004646:	d48b      	bmi.n	1a004560 <_vfprintf_r+0x300>
1a004648:	9b08      	ldr	r3, [sp, #32]
1a00464a:	1d1a      	adds	r2, r3, #4
1a00464c:	9b08      	ldr	r3, [sp, #32]
1a00464e:	9208      	str	r2, [sp, #32]
1a004650:	681c      	ldr	r4, [r3, #0]
1a004652:	17e5      	asrs	r5, r4, #31
1a004654:	4622      	mov	r2, r4
1a004656:	462b      	mov	r3, r5
1a004658:	2a00      	cmp	r2, #0
1a00465a:	f173 0300 	sbcs.w	r3, r3, #0
1a00465e:	da8d      	bge.n	1a00457c <_vfprintf_r+0x31c>
1a004660:	4264      	negs	r4, r4
1a004662:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a004666:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a00466a:	f1b9 3fff 	cmp.w	r9, #4294967295
1a00466e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004672:	f04f 0301 	mov.w	r3, #1
1a004676:	f040 8125 	bne.w	1a0048c4 <_vfprintf_r+0x664>
1a00467a:	2b01      	cmp	r3, #1
1a00467c:	f000 8247 	beq.w	1a004b0e <_vfprintf_r+0x8ae>
1a004680:	2b02      	cmp	r3, #2
1a004682:	f000 8479 	beq.w	1a004f78 <_vfprintf_r+0xd18>
1a004686:	a954      	add	r1, sp, #336	; 0x150
1a004688:	e000      	b.n	1a00468c <_vfprintf_r+0x42c>
1a00468a:	4639      	mov	r1, r7
1a00468c:	08e2      	lsrs	r2, r4, #3
1a00468e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a004692:	08e8      	lsrs	r0, r5, #3
1a004694:	f004 0307 	and.w	r3, r4, #7
1a004698:	4605      	mov	r5, r0
1a00469a:	4614      	mov	r4, r2
1a00469c:	3330      	adds	r3, #48	; 0x30
1a00469e:	ea54 0205 	orrs.w	r2, r4, r5
1a0046a2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0046a6:	f101 37ff 	add.w	r7, r1, #4294967295
1a0046aa:	d1ee      	bne.n	1a00468a <_vfprintf_r+0x42a>
1a0046ac:	07f2      	lsls	r2, r6, #31
1a0046ae:	f140 8288 	bpl.w	1a004bc2 <_vfprintf_r+0x962>
1a0046b2:	2b30      	cmp	r3, #48	; 0x30
1a0046b4:	f000 8285 	beq.w	1a004bc2 <_vfprintf_r+0x962>
1a0046b8:	2330      	movs	r3, #48	; 0x30
1a0046ba:	3902      	subs	r1, #2
1a0046bc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a0046c0:	ab54      	add	r3, sp, #336	; 0x150
1a0046c2:	9602      	str	r6, [sp, #8]
1a0046c4:	460f      	mov	r7, r1
1a0046c6:	1a5e      	subs	r6, r3, r1
1a0046c8:	e22c      	b.n	1a004b24 <_vfprintf_r+0x8c4>
1a0046ca:	9c08      	ldr	r4, [sp, #32]
1a0046cc:	2300      	movs	r3, #0
1a0046ce:	f854 2b04 	ldr.w	r2, [r4], #4
1a0046d2:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a0046d6:	2601      	movs	r6, #1
1a0046d8:	461a      	mov	r2, r3
1a0046da:	9603      	str	r6, [sp, #12]
1a0046dc:	9408      	str	r4, [sp, #32]
1a0046de:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a0046e2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0046e6:	9209      	str	r2, [sp, #36]	; 0x24
1a0046e8:	4691      	mov	r9, r2
1a0046ea:	920c      	str	r2, [sp, #48]	; 0x30
1a0046ec:	af3b      	add	r7, sp, #236	; 0xec
1a0046ee:	9b02      	ldr	r3, [sp, #8]
1a0046f0:	f013 0302 	ands.w	r3, r3, #2
1a0046f4:	930a      	str	r3, [sp, #40]	; 0x28
1a0046f6:	d002      	beq.n	1a0046fe <_vfprintf_r+0x49e>
1a0046f8:	9b03      	ldr	r3, [sp, #12]
1a0046fa:	3302      	adds	r3, #2
1a0046fc:	9303      	str	r3, [sp, #12]
1a0046fe:	9b02      	ldr	r3, [sp, #8]
1a004700:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004702:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a004706:	930b      	str	r3, [sp, #44]	; 0x2c
1a004708:	d104      	bne.n	1a004714 <_vfprintf_r+0x4b4>
1a00470a:	9b06      	ldr	r3, [sp, #24]
1a00470c:	9903      	ldr	r1, [sp, #12]
1a00470e:	1a5d      	subs	r5, r3, r1
1a004710:	2d00      	cmp	r5, #0
1a004712:	dc66      	bgt.n	1a0047e2 <_vfprintf_r+0x582>
1a004714:	b172      	cbz	r2, 1a004734 <_vfprintf_r+0x4d4>
1a004716:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004718:	3201      	adds	r2, #1
1a00471a:	3401      	adds	r4, #1
1a00471c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a004720:	2101      	movs	r1, #1
1a004722:	2a07      	cmp	r2, #7
1a004724:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004728:	e9cb 0100 	strd	r0, r1, [fp]
1a00472c:	f300 83b1 	bgt.w	1a004e92 <_vfprintf_r+0xc32>
1a004730:	f10b 0b08 	add.w	fp, fp, #8
1a004734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004736:	b16b      	cbz	r3, 1a004754 <_vfprintf_r+0x4f4>
1a004738:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00473a:	3301      	adds	r3, #1
1a00473c:	3402      	adds	r4, #2
1a00473e:	a921      	add	r1, sp, #132	; 0x84
1a004740:	2202      	movs	r2, #2
1a004742:	2b07      	cmp	r3, #7
1a004744:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004748:	e9cb 1200 	strd	r1, r2, [fp]
1a00474c:	f300 83ad 	bgt.w	1a004eaa <_vfprintf_r+0xc4a>
1a004750:	f10b 0b08 	add.w	fp, fp, #8
1a004754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004756:	2b80      	cmp	r3, #128	; 0x80
1a004758:	f000 8295 	beq.w	1a004c86 <_vfprintf_r+0xa26>
1a00475c:	eba9 0506 	sub.w	r5, r9, r6
1a004760:	2d00      	cmp	r5, #0
1a004762:	f300 82d3 	bgt.w	1a004d0c <_vfprintf_r+0xaac>
1a004766:	9b02      	ldr	r3, [sp, #8]
1a004768:	05db      	lsls	r3, r3, #23
1a00476a:	f100 822e 	bmi.w	1a004bca <_vfprintf_r+0x96a>
1a00476e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004770:	f8cb 7000 	str.w	r7, [fp]
1a004774:	3301      	adds	r3, #1
1a004776:	4434      	add	r4, r6
1a004778:	2b07      	cmp	r3, #7
1a00477a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00477c:	f8cb 6004 	str.w	r6, [fp, #4]
1a004780:	9329      	str	r3, [sp, #164]	; 0xa4
1a004782:	f300 8325 	bgt.w	1a004dd0 <_vfprintf_r+0xb70>
1a004786:	f10b 0b08 	add.w	fp, fp, #8
1a00478a:	9b02      	ldr	r3, [sp, #8]
1a00478c:	075d      	lsls	r5, r3, #29
1a00478e:	d505      	bpl.n	1a00479c <_vfprintf_r+0x53c>
1a004790:	9b06      	ldr	r3, [sp, #24]
1a004792:	9a03      	ldr	r2, [sp, #12]
1a004794:	1a9d      	subs	r5, r3, r2
1a004796:	2d00      	cmp	r5, #0
1a004798:	f300 83ae 	bgt.w	1a004ef8 <_vfprintf_r+0xc98>
1a00479c:	9b04      	ldr	r3, [sp, #16]
1a00479e:	9a06      	ldr	r2, [sp, #24]
1a0047a0:	9903      	ldr	r1, [sp, #12]
1a0047a2:	428a      	cmp	r2, r1
1a0047a4:	bfac      	ite	ge
1a0047a6:	189b      	addge	r3, r3, r2
1a0047a8:	185b      	addlt	r3, r3, r1
1a0047aa:	9304      	str	r3, [sp, #16]
1a0047ac:	2c00      	cmp	r4, #0
1a0047ae:	f040 82e7 	bne.w	1a004d80 <_vfprintf_r+0xb20>
1a0047b2:	2300      	movs	r3, #0
1a0047b4:	9329      	str	r3, [sp, #164]	; 0xa4
1a0047b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0047b8:	b11b      	cbz	r3, 1a0047c2 <_vfprintf_r+0x562>
1a0047ba:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0047bc:	9805      	ldr	r0, [sp, #20]
1a0047be:	f7fe ff2d 	bl	1a00361c <_free_r>
1a0047c2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0047c6:	4657      	mov	r7, sl
1a0047c8:	783b      	ldrb	r3, [r7, #0]
1a0047ca:	2b00      	cmp	r3, #0
1a0047cc:	f47f ad99 	bne.w	1a004302 <_vfprintf_r+0xa2>
1a0047d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a0047d2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0047d6:	2b00      	cmp	r3, #0
1a0047d8:	f040 86f5 	bne.w	1a0055c6 <_vfprintf_r+0x1366>
1a0047dc:	2300      	movs	r3, #0
1a0047de:	9329      	str	r3, [sp, #164]	; 0xa4
1a0047e0:	e375      	b.n	1a004ece <_vfprintf_r+0xc6e>
1a0047e2:	2d10      	cmp	r5, #16
1a0047e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0047e6:	dd29      	ble.n	1a00483c <_vfprintf_r+0x5dc>
1a0047e8:	4659      	mov	r1, fp
1a0047ea:	4620      	mov	r0, r4
1a0047ec:	961e      	str	r6, [sp, #120]	; 0x78
1a0047ee:	2310      	movs	r3, #16
1a0047f0:	9c05      	ldr	r4, [sp, #20]
1a0047f2:	9e07      	ldr	r6, [sp, #28]
1a0047f4:	46bb      	mov	fp, r7
1a0047f6:	e004      	b.n	1a004802 <_vfprintf_r+0x5a2>
1a0047f8:	3d10      	subs	r5, #16
1a0047fa:	2d10      	cmp	r5, #16
1a0047fc:	f101 0108 	add.w	r1, r1, #8
1a004800:	dd18      	ble.n	1a004834 <_vfprintf_r+0x5d4>
1a004802:	3201      	adds	r2, #1
1a004804:	4fbc      	ldr	r7, [pc, #752]	; (1a004af8 <_vfprintf_r+0x898>)
1a004806:	3010      	adds	r0, #16
1a004808:	2a07      	cmp	r2, #7
1a00480a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00480e:	e9c1 7300 	strd	r7, r3, [r1]
1a004812:	ddf1      	ble.n	1a0047f8 <_vfprintf_r+0x598>
1a004814:	aa28      	add	r2, sp, #160	; 0xa0
1a004816:	4631      	mov	r1, r6
1a004818:	4620      	mov	r0, r4
1a00481a:	f003 fb5d 	bl	1a007ed8 <__sprint_r>
1a00481e:	2800      	cmp	r0, #0
1a004820:	f040 834f 	bne.w	1a004ec2 <_vfprintf_r+0xc62>
1a004824:	3d10      	subs	r5, #16
1a004826:	2d10      	cmp	r5, #16
1a004828:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00482c:	a92b      	add	r1, sp, #172	; 0xac
1a00482e:	f04f 0310 	mov.w	r3, #16
1a004832:	dce6      	bgt.n	1a004802 <_vfprintf_r+0x5a2>
1a004834:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a004836:	465f      	mov	r7, fp
1a004838:	4604      	mov	r4, r0
1a00483a:	468b      	mov	fp, r1
1a00483c:	3201      	adds	r2, #1
1a00483e:	4bae      	ldr	r3, [pc, #696]	; (1a004af8 <_vfprintf_r+0x898>)
1a004840:	442c      	add	r4, r5
1a004842:	2a07      	cmp	r2, #7
1a004844:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004848:	e9cb 3500 	strd	r3, r5, [fp]
1a00484c:	f300 862a 	bgt.w	1a0054a4 <_vfprintf_r+0x1244>
1a004850:	f10b 0b08 	add.w	fp, fp, #8
1a004854:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004858:	e75c      	b.n	1a004714 <_vfprintf_r+0x4b4>
1a00485a:	f89a 8000 	ldrb.w	r8, [sl]
1a00485e:	9b02      	ldr	r3, [sp, #8]
1a004860:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a004864:	f000 85e3 	beq.w	1a00542e <_vfprintf_r+0x11ce>
1a004868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00486c:	9302      	str	r3, [sp, #8]
1a00486e:	e57b      	b.n	1a004368 <_vfprintf_r+0x108>
1a004870:	9b02      	ldr	r3, [sp, #8]
1a004872:	f89a 8000 	ldrb.w	r8, [sl]
1a004876:	f043 0301 	orr.w	r3, r3, #1
1a00487a:	9302      	str	r3, [sp, #8]
1a00487c:	e574      	b.n	1a004368 <_vfprintf_r+0x108>
1a00487e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a004882:	f89a 8000 	ldrb.w	r8, [sl]
1a004886:	2b00      	cmp	r3, #0
1a004888:	f47f ad6e 	bne.w	1a004368 <_vfprintf_r+0x108>
1a00488c:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a004890:	e56a      	b.n	1a004368 <_vfprintf_r+0x108>
1a004892:	9c08      	ldr	r4, [sp, #32]
1a004894:	f647 0230 	movw	r2, #30768	; 0x7830
1a004898:	f854 3b04 	ldr.w	r3, [r4], #4
1a00489c:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0048a0:	9a02      	ldr	r2, [sp, #8]
1a0048a2:	9408      	str	r4, [sp, #32]
1a0048a4:	461c      	mov	r4, r3
1a0048a6:	4b95      	ldr	r3, [pc, #596]	; (1a004afc <_vfprintf_r+0x89c>)
1a0048a8:	9314      	str	r3, [sp, #80]	; 0x50
1a0048aa:	f042 0602 	orr.w	r6, r2, #2
1a0048ae:	2500      	movs	r5, #0
1a0048b0:	2302      	movs	r3, #2
1a0048b2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a0048b6:	2200      	movs	r2, #0
1a0048b8:	f1b9 3fff 	cmp.w	r9, #4294967295
1a0048bc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0048c0:	f43f aedb 	beq.w	1a00467a <_vfprintf_r+0x41a>
1a0048c4:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a0048c8:	9202      	str	r2, [sp, #8]
1a0048ca:	ea54 0205 	orrs.w	r2, r4, r5
1a0048ce:	f040 82dd 	bne.w	1a004e8c <_vfprintf_r+0xc2c>
1a0048d2:	f1b9 0f00 	cmp.w	r9, #0
1a0048d6:	f040 8348 	bne.w	1a004f6a <_vfprintf_r+0xd0a>
1a0048da:	2b00      	cmp	r3, #0
1a0048dc:	f47f ae5d 	bne.w	1a00459a <_vfprintf_r+0x33a>
1a0048e0:	f016 0601 	ands.w	r6, r6, #1
1a0048e4:	f000 846a 	beq.w	1a0051bc <_vfprintf_r+0xf5c>
1a0048e8:	2330      	movs	r3, #48	; 0x30
1a0048ea:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a0048ee:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a0048f2:	e117      	b.n	1a004b24 <_vfprintf_r+0x8c4>
1a0048f4:	9e02      	ldr	r6, [sp, #8]
1a0048f6:	06b0      	lsls	r0, r6, #26
1a0048f8:	f100 80f2 	bmi.w	1a004ae0 <_vfprintf_r+0x880>
1a0048fc:	9b02      	ldr	r3, [sp, #8]
1a0048fe:	9a08      	ldr	r2, [sp, #32]
1a004900:	06d9      	lsls	r1, r3, #27
1a004902:	f852 4b04 	ldr.w	r4, [r2], #4
1a004906:	f101 8243 	bmi.w	1a005d90 <_vfprintf_r+0x1b30>
1a00490a:	9e02      	ldr	r6, [sp, #8]
1a00490c:	4633      	mov	r3, r6
1a00490e:	065b      	lsls	r3, r3, #25
1a004910:	f140 8635 	bpl.w	1a00557e <_vfprintf_r+0x131e>
1a004914:	9208      	str	r2, [sp, #32]
1a004916:	b2a4      	uxth	r4, r4
1a004918:	2500      	movs	r5, #0
1a00491a:	e0e8      	b.n	1a004aee <_vfprintf_r+0x88e>
1a00491c:	9902      	ldr	r1, [sp, #8]
1a00491e:	9a08      	ldr	r2, [sp, #32]
1a004920:	0689      	lsls	r1, r1, #26
1a004922:	f102 0304 	add.w	r3, r2, #4
1a004926:	f100 8452 	bmi.w	1a0051ce <_vfprintf_r+0xf6e>
1a00492a:	9a02      	ldr	r2, [sp, #8]
1a00492c:	06d7      	lsls	r7, r2, #27
1a00492e:	f100 85e1 	bmi.w	1a0054f4 <_vfprintf_r+0x1294>
1a004932:	9a02      	ldr	r2, [sp, #8]
1a004934:	0656      	lsls	r6, r2, #25
1a004936:	f100 8664 	bmi.w	1a005602 <_vfprintf_r+0x13a2>
1a00493a:	9a02      	ldr	r2, [sp, #8]
1a00493c:	0595      	lsls	r5, r2, #22
1a00493e:	f140 85d9 	bpl.w	1a0054f4 <_vfprintf_r+0x1294>
1a004942:	9a08      	ldr	r2, [sp, #32]
1a004944:	9308      	str	r3, [sp, #32]
1a004946:	6812      	ldr	r2, [r2, #0]
1a004948:	9b04      	ldr	r3, [sp, #16]
1a00494a:	7013      	strb	r3, [r2, #0]
1a00494c:	4657      	mov	r7, sl
1a00494e:	e73b      	b.n	1a0047c8 <_vfprintf_r+0x568>
1a004950:	f89a 8000 	ldrb.w	r8, [sl]
1a004954:	9b02      	ldr	r3, [sp, #8]
1a004956:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00495a:	f000 855f 	beq.w	1a00541c <_vfprintf_r+0x11bc>
1a00495e:	f043 0310 	orr.w	r3, r3, #16
1a004962:	9302      	str	r3, [sp, #8]
1a004964:	e500      	b.n	1a004368 <_vfprintf_r+0x108>
1a004966:	9b08      	ldr	r3, [sp, #32]
1a004968:	f89a 8000 	ldrb.w	r8, [sl]
1a00496c:	f853 2b04 	ldr.w	r2, [r3], #4
1a004970:	9206      	str	r2, [sp, #24]
1a004972:	2a00      	cmp	r2, #0
1a004974:	f2c0 8513 	blt.w	1a00539e <_vfprintf_r+0x113e>
1a004978:	9308      	str	r3, [sp, #32]
1a00497a:	e4f5      	b.n	1a004368 <_vfprintf_r+0x108>
1a00497c:	9d05      	ldr	r5, [sp, #20]
1a00497e:	4628      	mov	r0, r5
1a004980:	f002 fc04 	bl	1a00718c <_localeconv_r>
1a004984:	6843      	ldr	r3, [r0, #4]
1a004986:	9317      	str	r3, [sp, #92]	; 0x5c
1a004988:	4618      	mov	r0, r3
1a00498a:	f7ff fbf9 	bl	1a004180 <strlen>
1a00498e:	9019      	str	r0, [sp, #100]	; 0x64
1a004990:	4604      	mov	r4, r0
1a004992:	4628      	mov	r0, r5
1a004994:	f002 fbfa 	bl	1a00718c <_localeconv_r>
1a004998:	6883      	ldr	r3, [r0, #8]
1a00499a:	9318      	str	r3, [sp, #96]	; 0x60
1a00499c:	2120      	movs	r1, #32
1a00499e:	2c00      	cmp	r4, #0
1a0049a0:	f43f ad4a 	beq.w	1a004438 <_vfprintf_r+0x1d8>
1a0049a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a0049a6:	f89a 8000 	ldrb.w	r8, [sl]
1a0049aa:	2b00      	cmp	r3, #0
1a0049ac:	f43f acdc 	beq.w	1a004368 <_vfprintf_r+0x108>
1a0049b0:	781b      	ldrb	r3, [r3, #0]
1a0049b2:	2b00      	cmp	r3, #0
1a0049b4:	f43f acd8 	beq.w	1a004368 <_vfprintf_r+0x108>
1a0049b8:	9b02      	ldr	r3, [sp, #8]
1a0049ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0049be:	9302      	str	r3, [sp, #8]
1a0049c0:	e4d2      	b.n	1a004368 <_vfprintf_r+0x108>
1a0049c2:	9b02      	ldr	r3, [sp, #8]
1a0049c4:	f89a 8000 	ldrb.w	r8, [sl]
1a0049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0049cc:	9302      	str	r3, [sp, #8]
1a0049ce:	e4cb      	b.n	1a004368 <_vfprintf_r+0x108>
1a0049d0:	4652      	mov	r2, sl
1a0049d2:	f812 8b01 	ldrb.w	r8, [r2], #1
1a0049d6:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a0049da:	f001 81be 	beq.w	1a005d5a <_vfprintf_r+0x1afa>
1a0049de:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0049e2:	2b09      	cmp	r3, #9
1a0049e4:	4692      	mov	sl, r2
1a0049e6:	f04f 0900 	mov.w	r9, #0
1a0049ea:	f63f acbf 	bhi.w	1a00436c <_vfprintf_r+0x10c>
1a0049ee:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0049f2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0049f6:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0049fa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0049fe:	2b09      	cmp	r3, #9
1a004a00:	d9f5      	bls.n	1a0049ee <_vfprintf_r+0x78e>
1a004a02:	e4b3      	b.n	1a00436c <_vfprintf_r+0x10c>
1a004a04:	9c08      	ldr	r4, [sp, #32]
1a004a06:	3407      	adds	r4, #7
1a004a08:	f024 0307 	bic.w	r3, r4, #7
1a004a0c:	ecb3 7b02 	vldmia	r3!, {d7}
1a004a10:	ec55 4b17 	vmov	r4, r5, d7
1a004a14:	9308      	str	r3, [sp, #32]
1a004a16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a004a1a:	931b      	str	r3, [sp, #108]	; 0x6c
1a004a1c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a004a20:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004a24:	f04f 32ff 	mov.w	r2, #4294967295
1a004a28:	4b35      	ldr	r3, [pc, #212]	; (1a004b00 <_vfprintf_r+0x8a0>)
1a004a2a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a004a2e:	f003 fbab 	bl	1a008188 <__aeabi_dcmpun>
1a004a32:	2800      	cmp	r0, #0
1a004a34:	f040 83dc 	bne.w	1a0051f0 <_vfprintf_r+0xf90>
1a004a38:	f04f 32ff 	mov.w	r2, #4294967295
1a004a3c:	4b30      	ldr	r3, [pc, #192]	; (1a004b00 <_vfprintf_r+0x8a0>)
1a004a3e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004a42:	f7fe fa0b 	bl	1a002e5c <__aeabi_dcmple>
1a004a46:	2800      	cmp	r0, #0
1a004a48:	f040 83d2 	bne.w	1a0051f0 <_vfprintf_r+0xf90>
1a004a4c:	2200      	movs	r2, #0
1a004a4e:	2300      	movs	r3, #0
1a004a50:	4620      	mov	r0, r4
1a004a52:	4629      	mov	r1, r5
1a004a54:	f7fe f9f8 	bl	1a002e48 <__aeabi_dcmplt>
1a004a58:	2800      	cmp	r0, #0
1a004a5a:	f040 8780 	bne.w	1a00595e <_vfprintf_r+0x16fe>
1a004a5e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004a62:	4f28      	ldr	r7, [pc, #160]	; (1a004b04 <_vfprintf_r+0x8a4>)
1a004a64:	4b28      	ldr	r3, [pc, #160]	; (1a004b08 <_vfprintf_r+0x8a8>)
1a004a66:	9802      	ldr	r0, [sp, #8]
1a004a68:	2100      	movs	r1, #0
1a004a6a:	2603      	movs	r6, #3
1a004a6c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a004a70:	9603      	str	r6, [sp, #12]
1a004a72:	9109      	str	r1, [sp, #36]	; 0x24
1a004a74:	9002      	str	r0, [sp, #8]
1a004a76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a004a7a:	bfc8      	it	gt
1a004a7c:	461f      	movgt	r7, r3
1a004a7e:	4689      	mov	r9, r1
1a004a80:	910c      	str	r1, [sp, #48]	; 0x30
1a004a82:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a004a86:	e5c0      	b.n	1a00460a <_vfprintf_r+0x3aa>
1a004a88:	9e02      	ldr	r6, [sp, #8]
1a004a8a:	06b4      	lsls	r4, r6, #26
1a004a8c:	d41f      	bmi.n	1a004ace <_vfprintf_r+0x86e>
1a004a8e:	9b02      	ldr	r3, [sp, #8]
1a004a90:	9a08      	ldr	r2, [sp, #32]
1a004a92:	06d8      	lsls	r0, r3, #27
1a004a94:	f852 4b04 	ldr.w	r4, [r2], #4
1a004a98:	f101 8174 	bmi.w	1a005d84 <_vfprintf_r+0x1b24>
1a004a9c:	9e02      	ldr	r6, [sp, #8]
1a004a9e:	0671      	lsls	r1, r6, #25
1a004aa0:	f140 8577 	bpl.w	1a005592 <_vfprintf_r+0x1332>
1a004aa4:	9208      	str	r2, [sp, #32]
1a004aa6:	b2a4      	uxth	r4, r4
1a004aa8:	2500      	movs	r5, #0
1a004aaa:	2301      	movs	r3, #1
1a004aac:	e703      	b.n	1a0048b6 <_vfprintf_r+0x656>
1a004aae:	9805      	ldr	r0, [sp, #20]
1a004ab0:	f7fe fd2e 	bl	1a003510 <__sinit>
1a004ab4:	f7ff bbea 	b.w	1a00428c <_vfprintf_r+0x2c>
1a004ab8:	f1b8 0f00 	cmp.w	r8, #0
1a004abc:	f43f ae88 	beq.w	1a0047d0 <_vfprintf_r+0x570>
1a004ac0:	2300      	movs	r3, #0
1a004ac2:	2601      	movs	r6, #1
1a004ac4:	461a      	mov	r2, r3
1a004ac6:	9603      	str	r6, [sp, #12]
1a004ac8:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a004acc:	e607      	b.n	1a0046de <_vfprintf_r+0x47e>
1a004ace:	9c08      	ldr	r4, [sp, #32]
1a004ad0:	3407      	adds	r4, #7
1a004ad2:	f024 0307 	bic.w	r3, r4, #7
1a004ad6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a004ada:	9308      	str	r3, [sp, #32]
1a004adc:	2301      	movs	r3, #1
1a004ade:	e6ea      	b.n	1a0048b6 <_vfprintf_r+0x656>
1a004ae0:	9c08      	ldr	r4, [sp, #32]
1a004ae2:	3407      	adds	r4, #7
1a004ae4:	f024 0307 	bic.w	r3, r4, #7
1a004ae8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a004aec:	9308      	str	r3, [sp, #32]
1a004aee:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a004af2:	2300      	movs	r3, #0
1a004af4:	e6df      	b.n	1a0048b6 <_vfprintf_r+0x656>
1a004af6:	bf00      	nop
1a004af8:	1a00876c 	.word	0x1a00876c
1a004afc:	1a00874c 	.word	0x1a00874c
1a004b00:	7fefffff 	.word	0x7fefffff
1a004b04:	1a008728 	.word	0x1a008728
1a004b08:	1a00872c 	.word	0x1a00872c
1a004b0c:	9e02      	ldr	r6, [sp, #8]
1a004b0e:	2d00      	cmp	r5, #0
1a004b10:	bf08      	it	eq
1a004b12:	2c0a      	cmpeq	r4, #10
1a004b14:	d213      	bcs.n	1a004b3e <_vfprintf_r+0x8de>
1a004b16:	3430      	adds	r4, #48	; 0x30
1a004b18:	9602      	str	r6, [sp, #8]
1a004b1a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a004b1e:	2601      	movs	r6, #1
1a004b20:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a004b24:	2300      	movs	r3, #0
1a004b26:	454e      	cmp	r6, r9
1a004b28:	9309      	str	r3, [sp, #36]	; 0x24
1a004b2a:	930c      	str	r3, [sp, #48]	; 0x30
1a004b2c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a004b30:	4633      	mov	r3, r6
1a004b32:	bfb8      	it	lt
1a004b34:	464b      	movlt	r3, r9
1a004b36:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004b3a:	9303      	str	r3, [sp, #12]
1a004b3c:	e565      	b.n	1a00460a <_vfprintf_r+0x3aa>
1a004b3e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a004b42:	2200      	movs	r2, #0
1a004b44:	e9cd a802 	strd	sl, r8, [sp, #8]
1a004b48:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a004b4c:	af54      	add	r7, sp, #336	; 0x150
1a004b4e:	46cb      	mov	fp, r9
1a004b50:	4692      	mov	sl, r2
1a004b52:	46b1      	mov	r9, r6
1a004b54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004b58:	461e      	mov	r6, r3
1a004b5a:	e007      	b.n	1a004b6c <_vfprintf_r+0x90c>
1a004b5c:	f7fe f9ec 	bl	1a002f38 <__aeabi_uldivmod>
1a004b60:	2d00      	cmp	r5, #0
1a004b62:	bf08      	it	eq
1a004b64:	2c0a      	cmpeq	r4, #10
1a004b66:	d320      	bcc.n	1a004baa <_vfprintf_r+0x94a>
1a004b68:	4604      	mov	r4, r0
1a004b6a:	460d      	mov	r5, r1
1a004b6c:	220a      	movs	r2, #10
1a004b6e:	2300      	movs	r3, #0
1a004b70:	4620      	mov	r0, r4
1a004b72:	4629      	mov	r1, r5
1a004b74:	f7fe f9e0 	bl	1a002f38 <__aeabi_uldivmod>
1a004b78:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a004b7c:	f807 cc01 	strb.w	ip, [r7, #-1]
1a004b80:	4620      	mov	r0, r4
1a004b82:	4629      	mov	r1, r5
1a004b84:	220a      	movs	r2, #10
1a004b86:	2300      	movs	r3, #0
1a004b88:	f10a 0a01 	add.w	sl, sl, #1
1a004b8c:	3f01      	subs	r7, #1
1a004b8e:	2e00      	cmp	r6, #0
1a004b90:	d0e4      	beq.n	1a004b5c <_vfprintf_r+0x8fc>
1a004b92:	f898 c000 	ldrb.w	ip, [r8]
1a004b96:	45e2      	cmp	sl, ip
1a004b98:	d1e0      	bne.n	1a004b5c <_vfprintf_r+0x8fc>
1a004b9a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a004b9e:	d0dd      	beq.n	1a004b5c <_vfprintf_r+0x8fc>
1a004ba0:	429d      	cmp	r5, r3
1a004ba2:	bf08      	it	eq
1a004ba4:	4294      	cmpeq	r4, r2
1a004ba6:	f080 871e 	bcs.w	1a0059e6 <_vfprintf_r+0x1786>
1a004baa:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a004bae:	464e      	mov	r6, r9
1a004bb0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a004bb4:	46d9      	mov	r9, fp
1a004bb6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a004bba:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a004bbe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a004bc2:	9602      	str	r6, [sp, #8]
1a004bc4:	ab54      	add	r3, sp, #336	; 0x150
1a004bc6:	1bde      	subs	r6, r3, r7
1a004bc8:	e7ac      	b.n	1a004b24 <_vfprintf_r+0x8c4>
1a004bca:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a004bce:	f340 810a 	ble.w	1a004de6 <_vfprintf_r+0xb86>
1a004bd2:	2200      	movs	r2, #0
1a004bd4:	2300      	movs	r3, #0
1a004bd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004bda:	f7fe f92b 	bl	1a002e34 <__aeabi_dcmpeq>
1a004bde:	2800      	cmp	r0, #0
1a004be0:	f000 81de 	beq.w	1a004fa0 <_vfprintf_r+0xd40>
1a004be4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004be6:	4ac2      	ldr	r2, [pc, #776]	; (1a004ef0 <_vfprintf_r+0xc90>)
1a004be8:	f8cb 2000 	str.w	r2, [fp]
1a004bec:	3301      	adds	r3, #1
1a004bee:	3401      	adds	r4, #1
1a004bf0:	2201      	movs	r2, #1
1a004bf2:	2b07      	cmp	r3, #7
1a004bf4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004bf8:	f8cb 2004 	str.w	r2, [fp, #4]
1a004bfc:	f300 8463 	bgt.w	1a0054c6 <_vfprintf_r+0x1266>
1a004c00:	f10b 0b08 	add.w	fp, fp, #8
1a004c04:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004c08:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004c0a:	4293      	cmp	r3, r2
1a004c0c:	f280 82a5 	bge.w	1a00515a <_vfprintf_r+0xefa>
1a004c10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004c12:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004c14:	f8cb 2000 	str.w	r2, [fp]
1a004c18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a004c1a:	f8cb 2004 	str.w	r2, [fp, #4]
1a004c1e:	3301      	adds	r3, #1
1a004c20:	4414      	add	r4, r2
1a004c22:	2b07      	cmp	r3, #7
1a004c24:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004c28:	f300 83ec 	bgt.w	1a005404 <_vfprintf_r+0x11a4>
1a004c2c:	f10b 0b08 	add.w	fp, fp, #8
1a004c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004c32:	1e5d      	subs	r5, r3, #1
1a004c34:	2d00      	cmp	r5, #0
1a004c36:	f77f ada8 	ble.w	1a00478a <_vfprintf_r+0x52a>
1a004c3a:	2d10      	cmp	r5, #16
1a004c3c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004c3e:	4bad      	ldr	r3, [pc, #692]	; (1a004ef4 <_vfprintf_r+0xc94>)
1a004c40:	f340 844e 	ble.w	1a0054e0 <_vfprintf_r+0x1280>
1a004c44:	2610      	movs	r6, #16
1a004c46:	9f05      	ldr	r7, [sp, #20]
1a004c48:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004c4c:	4699      	mov	r9, r3
1a004c4e:	e005      	b.n	1a004c5c <_vfprintf_r+0x9fc>
1a004c50:	f10b 0b08 	add.w	fp, fp, #8
1a004c54:	3d10      	subs	r5, #16
1a004c56:	2d10      	cmp	r5, #16
1a004c58:	f340 8441 	ble.w	1a0054de <_vfprintf_r+0x127e>
1a004c5c:	3201      	adds	r2, #1
1a004c5e:	3410      	adds	r4, #16
1a004c60:	2a07      	cmp	r2, #7
1a004c62:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004c66:	e9cb 9600 	strd	r9, r6, [fp]
1a004c6a:	ddf1      	ble.n	1a004c50 <_vfprintf_r+0x9f0>
1a004c6c:	aa28      	add	r2, sp, #160	; 0xa0
1a004c6e:	4641      	mov	r1, r8
1a004c70:	4638      	mov	r0, r7
1a004c72:	f003 f931 	bl	1a007ed8 <__sprint_r>
1a004c76:	2800      	cmp	r0, #0
1a004c78:	f040 8423 	bne.w	1a0054c2 <_vfprintf_r+0x1262>
1a004c7c:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004c80:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004c84:	e7e6      	b.n	1a004c54 <_vfprintf_r+0x9f4>
1a004c86:	9b06      	ldr	r3, [sp, #24]
1a004c88:	9a03      	ldr	r2, [sp, #12]
1a004c8a:	1a9d      	subs	r5, r3, r2
1a004c8c:	2d00      	cmp	r5, #0
1a004c8e:	f77f ad65 	ble.w	1a00475c <_vfprintf_r+0x4fc>
1a004c92:	2d10      	cmp	r5, #16
1a004c94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004c96:	4b97      	ldr	r3, [pc, #604]	; (1a004ef4 <_vfprintf_r+0xc94>)
1a004c98:	dd28      	ble.n	1a004cec <_vfprintf_r+0xa8c>
1a004c9a:	960a      	str	r6, [sp, #40]	; 0x28
1a004c9c:	4659      	mov	r1, fp
1a004c9e:	4620      	mov	r0, r4
1a004ca0:	46bb      	mov	fp, r7
1a004ca2:	9c05      	ldr	r4, [sp, #20]
1a004ca4:	9e07      	ldr	r6, [sp, #28]
1a004ca6:	461f      	mov	r7, r3
1a004ca8:	e004      	b.n	1a004cb4 <_vfprintf_r+0xa54>
1a004caa:	3d10      	subs	r5, #16
1a004cac:	2d10      	cmp	r5, #16
1a004cae:	f101 0108 	add.w	r1, r1, #8
1a004cb2:	dd16      	ble.n	1a004ce2 <_vfprintf_r+0xa82>
1a004cb4:	3201      	adds	r2, #1
1a004cb6:	3010      	adds	r0, #16
1a004cb8:	2310      	movs	r3, #16
1a004cba:	2a07      	cmp	r2, #7
1a004cbc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a004cc0:	600f      	str	r7, [r1, #0]
1a004cc2:	604b      	str	r3, [r1, #4]
1a004cc4:	ddf1      	ble.n	1a004caa <_vfprintf_r+0xa4a>
1a004cc6:	aa28      	add	r2, sp, #160	; 0xa0
1a004cc8:	4631      	mov	r1, r6
1a004cca:	4620      	mov	r0, r4
1a004ccc:	f003 f904 	bl	1a007ed8 <__sprint_r>
1a004cd0:	2800      	cmp	r0, #0
1a004cd2:	f040 80f6 	bne.w	1a004ec2 <_vfprintf_r+0xc62>
1a004cd6:	3d10      	subs	r5, #16
1a004cd8:	2d10      	cmp	r5, #16
1a004cda:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a004cde:	a92b      	add	r1, sp, #172	; 0xac
1a004ce0:	dce8      	bgt.n	1a004cb4 <_vfprintf_r+0xa54>
1a004ce2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a004ce4:	463b      	mov	r3, r7
1a004ce6:	4604      	mov	r4, r0
1a004ce8:	465f      	mov	r7, fp
1a004cea:	468b      	mov	fp, r1
1a004cec:	3201      	adds	r2, #1
1a004cee:	442c      	add	r4, r5
1a004cf0:	2a07      	cmp	r2, #7
1a004cf2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004cf6:	e9cb 3500 	strd	r3, r5, [fp]
1a004cfa:	f300 8355 	bgt.w	1a0053a8 <_vfprintf_r+0x1148>
1a004cfe:	eba9 0506 	sub.w	r5, r9, r6
1a004d02:	2d00      	cmp	r5, #0
1a004d04:	f10b 0b08 	add.w	fp, fp, #8
1a004d08:	f77f ad2d 	ble.w	1a004766 <_vfprintf_r+0x506>
1a004d0c:	2d10      	cmp	r5, #16
1a004d0e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004d10:	4b78      	ldr	r3, [pc, #480]	; (1a004ef4 <_vfprintf_r+0xc94>)
1a004d12:	dd29      	ble.n	1a004d68 <_vfprintf_r+0xb08>
1a004d14:	960a      	str	r6, [sp, #40]	; 0x28
1a004d16:	4659      	mov	r1, fp
1a004d18:	4620      	mov	r0, r4
1a004d1a:	46bb      	mov	fp, r7
1a004d1c:	f04f 0910 	mov.w	r9, #16
1a004d20:	9c05      	ldr	r4, [sp, #20]
1a004d22:	9e07      	ldr	r6, [sp, #28]
1a004d24:	461f      	mov	r7, r3
1a004d26:	e004      	b.n	1a004d32 <_vfprintf_r+0xad2>
1a004d28:	3d10      	subs	r5, #16
1a004d2a:	2d10      	cmp	r5, #16
1a004d2c:	f101 0108 	add.w	r1, r1, #8
1a004d30:	dd15      	ble.n	1a004d5e <_vfprintf_r+0xafe>
1a004d32:	3201      	adds	r2, #1
1a004d34:	3010      	adds	r0, #16
1a004d36:	2a07      	cmp	r2, #7
1a004d38:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a004d3c:	e9c1 7900 	strd	r7, r9, [r1]
1a004d40:	ddf2      	ble.n	1a004d28 <_vfprintf_r+0xac8>
1a004d42:	aa28      	add	r2, sp, #160	; 0xa0
1a004d44:	4631      	mov	r1, r6
1a004d46:	4620      	mov	r0, r4
1a004d48:	f003 f8c6 	bl	1a007ed8 <__sprint_r>
1a004d4c:	2800      	cmp	r0, #0
1a004d4e:	f040 80b8 	bne.w	1a004ec2 <_vfprintf_r+0xc62>
1a004d52:	3d10      	subs	r5, #16
1a004d54:	2d10      	cmp	r5, #16
1a004d56:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a004d5a:	a92b      	add	r1, sp, #172	; 0xac
1a004d5c:	dce9      	bgt.n	1a004d32 <_vfprintf_r+0xad2>
1a004d5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a004d60:	463b      	mov	r3, r7
1a004d62:	4604      	mov	r4, r0
1a004d64:	465f      	mov	r7, fp
1a004d66:	468b      	mov	fp, r1
1a004d68:	3201      	adds	r2, #1
1a004d6a:	442c      	add	r4, r5
1a004d6c:	2a07      	cmp	r2, #7
1a004d6e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004d72:	e9cb 3500 	strd	r3, r5, [fp]
1a004d76:	f300 81da 	bgt.w	1a00512e <_vfprintf_r+0xece>
1a004d7a:	f10b 0b08 	add.w	fp, fp, #8
1a004d7e:	e4f2      	b.n	1a004766 <_vfprintf_r+0x506>
1a004d80:	aa28      	add	r2, sp, #160	; 0xa0
1a004d82:	9907      	ldr	r1, [sp, #28]
1a004d84:	9805      	ldr	r0, [sp, #20]
1a004d86:	f003 f8a7 	bl	1a007ed8 <__sprint_r>
1a004d8a:	2800      	cmp	r0, #0
1a004d8c:	f43f ad11 	beq.w	1a0047b2 <_vfprintf_r+0x552>
1a004d90:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004d94:	e096      	b.n	1a004ec4 <_vfprintf_r+0xc64>
1a004d96:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004d98:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004d9a:	f8cb 1000 	str.w	r1, [fp]
1a004d9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a004da0:	f8cb 1004 	str.w	r1, [fp, #4]
1a004da4:	3201      	adds	r2, #1
1a004da6:	440c      	add	r4, r1
1a004da8:	2a07      	cmp	r2, #7
1a004daa:	942a      	str	r4, [sp, #168]	; 0xa8
1a004dac:	9229      	str	r2, [sp, #164]	; 0xa4
1a004dae:	f300 84e1 	bgt.w	1a005774 <_vfprintf_r+0x1514>
1a004db2:	f10b 0b08 	add.w	fp, fp, #8
1a004db6:	2b00      	cmp	r3, #0
1a004db8:	f2c0 86a2 	blt.w	1a005b00 <_vfprintf_r+0x18a0>
1a004dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004dbe:	3201      	adds	r2, #1
1a004dc0:	441c      	add	r4, r3
1a004dc2:	2a07      	cmp	r2, #7
1a004dc4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004dc8:	e9cb 7300 	strd	r7, r3, [fp]
1a004dcc:	f77f acdb 	ble.w	1a004786 <_vfprintf_r+0x526>
1a004dd0:	aa28      	add	r2, sp, #160	; 0xa0
1a004dd2:	9907      	ldr	r1, [sp, #28]
1a004dd4:	9805      	ldr	r0, [sp, #20]
1a004dd6:	f003 f87f 	bl	1a007ed8 <__sprint_r>
1a004dda:	2800      	cmp	r0, #0
1a004ddc:	d1d8      	bne.n	1a004d90 <_vfprintf_r+0xb30>
1a004dde:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004de0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004de4:	e4d1      	b.n	1a00478a <_vfprintf_r+0x52a>
1a004de6:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004de8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004dea:	2a01      	cmp	r2, #1
1a004dec:	f104 0401 	add.w	r4, r4, #1
1a004df0:	f103 0501 	add.w	r5, r3, #1
1a004df4:	f10b 0608 	add.w	r6, fp, #8
1a004df8:	f340 8158 	ble.w	1a0050ac <_vfprintf_r+0xe4c>
1a004dfc:	2301      	movs	r3, #1
1a004dfe:	2d07      	cmp	r5, #7
1a004e00:	f8cb 7000 	str.w	r7, [fp]
1a004e04:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004e08:	f8cb 3004 	str.w	r3, [fp, #4]
1a004e0c:	f300 832a 	bgt.w	1a005464 <_vfprintf_r+0x1204>
1a004e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004e12:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004e14:	1c69      	adds	r1, r5, #1
1a004e16:	441c      	add	r4, r3
1a004e18:	2907      	cmp	r1, #7
1a004e1a:	910b      	str	r1, [sp, #44]	; 0x2c
1a004e1c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a004e20:	e9c6 2300 	strd	r2, r3, [r6]
1a004e24:	f300 832a 	bgt.w	1a00547c <_vfprintf_r+0x121c>
1a004e28:	3608      	adds	r6, #8
1a004e2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a004e2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a004e2e:	f102 0901 	add.w	r9, r2, #1
1a004e32:	2300      	movs	r3, #0
1a004e34:	2200      	movs	r2, #0
1a004e36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004e3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004e3e:	f106 0b08 	add.w	fp, r6, #8
1a004e42:	f105 38ff 	add.w	r8, r5, #4294967295
1a004e46:	f7fd fff5 	bl	1a002e34 <__aeabi_dcmpeq>
1a004e4a:	2800      	cmp	r0, #0
1a004e4c:	f040 8141 	bne.w	1a0050d2 <_vfprintf_r+0xe72>
1a004e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004e52:	f8c6 8004 	str.w	r8, [r6, #4]
1a004e56:	3701      	adds	r7, #1
1a004e58:	4444      	add	r4, r8
1a004e5a:	2b07      	cmp	r3, #7
1a004e5c:	6037      	str	r7, [r6, #0]
1a004e5e:	942a      	str	r4, [sp, #168]	; 0xa8
1a004e60:	9329      	str	r3, [sp, #164]	; 0xa4
1a004e62:	f300 82bf 	bgt.w	1a0053e4 <_vfprintf_r+0x1184>
1a004e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a004e68:	f106 0310 	add.w	r3, r6, #16
1a004e6c:	3202      	adds	r2, #2
1a004e6e:	465e      	mov	r6, fp
1a004e70:	920a      	str	r2, [sp, #40]	; 0x28
1a004e72:	469b      	mov	fp, r3
1a004e74:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004e76:	6072      	str	r2, [r6, #4]
1a004e78:	4414      	add	r4, r2
1a004e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004e7c:	942a      	str	r4, [sp, #168]	; 0xa8
1a004e7e:	ab24      	add	r3, sp, #144	; 0x90
1a004e80:	2a07      	cmp	r2, #7
1a004e82:	9229      	str	r2, [sp, #164]	; 0xa4
1a004e84:	6033      	str	r3, [r6, #0]
1a004e86:	f77f ac80 	ble.w	1a00478a <_vfprintf_r+0x52a>
1a004e8a:	e7a1      	b.n	1a004dd0 <_vfprintf_r+0xb70>
1a004e8c:	9e02      	ldr	r6, [sp, #8]
1a004e8e:	f7ff bbf4 	b.w	1a00467a <_vfprintf_r+0x41a>
1a004e92:	aa28      	add	r2, sp, #160	; 0xa0
1a004e94:	9907      	ldr	r1, [sp, #28]
1a004e96:	9805      	ldr	r0, [sp, #20]
1a004e98:	f003 f81e 	bl	1a007ed8 <__sprint_r>
1a004e9c:	2800      	cmp	r0, #0
1a004e9e:	f47f af77 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a004ea2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ea4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004ea8:	e444      	b.n	1a004734 <_vfprintf_r+0x4d4>
1a004eaa:	aa28      	add	r2, sp, #160	; 0xa0
1a004eac:	9907      	ldr	r1, [sp, #28]
1a004eae:	9805      	ldr	r0, [sp, #20]
1a004eb0:	f003 f812 	bl	1a007ed8 <__sprint_r>
1a004eb4:	2800      	cmp	r0, #0
1a004eb6:	f47f af6b 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a004eba:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ebc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004ec0:	e448      	b.n	1a004754 <_vfprintf_r+0x4f4>
1a004ec2:	46b1      	mov	r9, r6
1a004ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004ec6:	b111      	cbz	r1, 1a004ece <_vfprintf_r+0xc6e>
1a004ec8:	9805      	ldr	r0, [sp, #20]
1a004eca:	f7fe fba7 	bl	1a00361c <_free_r>
1a004ece:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a004ed2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004ed6:	07d4      	lsls	r4, r2, #31
1a004ed8:	d402      	bmi.n	1a004ee0 <_vfprintf_r+0xc80>
1a004eda:	0598      	lsls	r0, r3, #22
1a004edc:	f140 82db 	bpl.w	1a005496 <_vfprintf_r+0x1236>
1a004ee0:	0659      	lsls	r1, r3, #25
1a004ee2:	f100 8640 	bmi.w	1a005b66 <_vfprintf_r+0x1906>
1a004ee6:	9804      	ldr	r0, [sp, #16]
1a004ee8:	b055      	add	sp, #340	; 0x154
1a004eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004eee:	bf00      	nop
1a004ef0:	1a008768 	.word	0x1a008768
1a004ef4:	1a00877c 	.word	0x1a00877c
1a004ef8:	2d10      	cmp	r5, #16
1a004efa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004efc:	dd21      	ble.n	1a004f42 <_vfprintf_r+0xce2>
1a004efe:	2610      	movs	r6, #16
1a004f00:	9f05      	ldr	r7, [sp, #20]
1a004f02:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004f06:	e004      	b.n	1a004f12 <_vfprintf_r+0xcb2>
1a004f08:	3d10      	subs	r5, #16
1a004f0a:	2d10      	cmp	r5, #16
1a004f0c:	f10b 0b08 	add.w	fp, fp, #8
1a004f10:	dd17      	ble.n	1a004f42 <_vfprintf_r+0xce2>
1a004f12:	3301      	adds	r3, #1
1a004f14:	4ab3      	ldr	r2, [pc, #716]	; (1a0051e4 <_vfprintf_r+0xf84>)
1a004f16:	3410      	adds	r4, #16
1a004f18:	2b07      	cmp	r3, #7
1a004f1a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004f1e:	e9cb 2600 	strd	r2, r6, [fp]
1a004f22:	ddf1      	ble.n	1a004f08 <_vfprintf_r+0xca8>
1a004f24:	aa28      	add	r2, sp, #160	; 0xa0
1a004f26:	4641      	mov	r1, r8
1a004f28:	4638      	mov	r0, r7
1a004f2a:	f002 ffd5 	bl	1a007ed8 <__sprint_r>
1a004f2e:	2800      	cmp	r0, #0
1a004f30:	f040 82c7 	bne.w	1a0054c2 <_vfprintf_r+0x1262>
1a004f34:	3d10      	subs	r5, #16
1a004f36:	2d10      	cmp	r5, #16
1a004f38:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004f3c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004f40:	dce7      	bgt.n	1a004f12 <_vfprintf_r+0xcb2>
1a004f42:	3301      	adds	r3, #1
1a004f44:	4aa7      	ldr	r2, [pc, #668]	; (1a0051e4 <_vfprintf_r+0xf84>)
1a004f46:	442c      	add	r4, r5
1a004f48:	2b07      	cmp	r3, #7
1a004f4a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004f4e:	e9cb 2500 	strd	r2, r5, [fp]
1a004f52:	f77f ac23 	ble.w	1a00479c <_vfprintf_r+0x53c>
1a004f56:	aa28      	add	r2, sp, #160	; 0xa0
1a004f58:	9907      	ldr	r1, [sp, #28]
1a004f5a:	9805      	ldr	r0, [sp, #20]
1a004f5c:	f002 ffbc 	bl	1a007ed8 <__sprint_r>
1a004f60:	2800      	cmp	r0, #0
1a004f62:	f47f af15 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a004f66:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004f68:	e418      	b.n	1a00479c <_vfprintf_r+0x53c>
1a004f6a:	2b01      	cmp	r3, #1
1a004f6c:	f000 8423 	beq.w	1a0057b6 <_vfprintf_r+0x1556>
1a004f70:	2b02      	cmp	r3, #2
1a004f72:	9e02      	ldr	r6, [sp, #8]
1a004f74:	f47f ab87 	bne.w	1a004686 <_vfprintf_r+0x426>
1a004f78:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004f7a:	af54      	add	r7, sp, #336	; 0x150
1a004f7c:	0923      	lsrs	r3, r4, #4
1a004f7e:	f004 010f 	and.w	r1, r4, #15
1a004f82:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a004f86:	092a      	lsrs	r2, r5, #4
1a004f88:	461c      	mov	r4, r3
1a004f8a:	4615      	mov	r5, r2
1a004f8c:	5c43      	ldrb	r3, [r0, r1]
1a004f8e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a004f92:	ea54 0305 	orrs.w	r3, r4, r5
1a004f96:	d1f1      	bne.n	1a004f7c <_vfprintf_r+0xd1c>
1a004f98:	ab54      	add	r3, sp, #336	; 0x150
1a004f9a:	9602      	str	r6, [sp, #8]
1a004f9c:	1bde      	subs	r6, r3, r7
1a004f9e:	e5c1      	b.n	1a004b24 <_vfprintf_r+0x8c4>
1a004fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004fa2:	2b00      	cmp	r3, #0
1a004fa4:	f340 80df 	ble.w	1a005166 <_vfprintf_r+0xf06>
1a004fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004faa:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004fac:	4293      	cmp	r3, r2
1a004fae:	bfa8      	it	ge
1a004fb0:	4613      	movge	r3, r2
1a004fb2:	2b00      	cmp	r3, #0
1a004fb4:	461d      	mov	r5, r3
1a004fb6:	dd0d      	ble.n	1a004fd4 <_vfprintf_r+0xd74>
1a004fb8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004fba:	f8cb 7000 	str.w	r7, [fp]
1a004fbe:	3301      	adds	r3, #1
1a004fc0:	442c      	add	r4, r5
1a004fc2:	2b07      	cmp	r3, #7
1a004fc4:	942a      	str	r4, [sp, #168]	; 0xa8
1a004fc6:	f8cb 5004 	str.w	r5, [fp, #4]
1a004fca:	9329      	str	r3, [sp, #164]	; 0xa4
1a004fcc:	f300 84fe 	bgt.w	1a0059cc <_vfprintf_r+0x176c>
1a004fd0:	f10b 0b08 	add.w	fp, fp, #8
1a004fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004fd6:	2d00      	cmp	r5, #0
1a004fd8:	bfa8      	it	ge
1a004fda:	1b5b      	subge	r3, r3, r5
1a004fdc:	2b00      	cmp	r3, #0
1a004fde:	461d      	mov	r5, r3
1a004fe0:	f300 8290 	bgt.w	1a005504 <_vfprintf_r+0x12a4>
1a004fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004fe6:	443b      	add	r3, r7
1a004fe8:	4699      	mov	r9, r3
1a004fea:	9b02      	ldr	r3, [sp, #8]
1a004fec:	0558      	lsls	r0, r3, #21
1a004fee:	f100 8413 	bmi.w	1a005818 <_vfprintf_r+0x15b8>
1a004ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004ff6:	4293      	cmp	r3, r2
1a004ff8:	db03      	blt.n	1a005002 <_vfprintf_r+0xda2>
1a004ffa:	9a02      	ldr	r2, [sp, #8]
1a004ffc:	07d1      	lsls	r1, r2, #31
1a004ffe:	f140 82f7 	bpl.w	1a0055f0 <_vfprintf_r+0x1390>
1a005002:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005004:	9915      	ldr	r1, [sp, #84]	; 0x54
1a005006:	f8cb 1000 	str.w	r1, [fp]
1a00500a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00500c:	f8cb 1004 	str.w	r1, [fp, #4]
1a005010:	3201      	adds	r2, #1
1a005012:	440c      	add	r4, r1
1a005014:	2a07      	cmp	r2, #7
1a005016:	942a      	str	r4, [sp, #168]	; 0xa8
1a005018:	9229      	str	r2, [sp, #164]	; 0xa4
1a00501a:	f300 8523 	bgt.w	1a005a64 <_vfprintf_r+0x1804>
1a00501e:	f10b 0b08 	add.w	fp, fp, #8
1a005022:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005024:	18bd      	adds	r5, r7, r2
1a005026:	eba5 0509 	sub.w	r5, r5, r9
1a00502a:	1ad3      	subs	r3, r2, r3
1a00502c:	429d      	cmp	r5, r3
1a00502e:	bfa8      	it	ge
1a005030:	461d      	movge	r5, r3
1a005032:	2d00      	cmp	r5, #0
1a005034:	dd0d      	ble.n	1a005052 <_vfprintf_r+0xdf2>
1a005036:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005038:	f8cb 9000 	str.w	r9, [fp]
1a00503c:	3201      	adds	r2, #1
1a00503e:	442c      	add	r4, r5
1a005040:	2a07      	cmp	r2, #7
1a005042:	942a      	str	r4, [sp, #168]	; 0xa8
1a005044:	f8cb 5004 	str.w	r5, [fp, #4]
1a005048:	9229      	str	r2, [sp, #164]	; 0xa4
1a00504a:	f300 8546 	bgt.w	1a005ada <_vfprintf_r+0x187a>
1a00504e:	f10b 0b08 	add.w	fp, fp, #8
1a005052:	2d00      	cmp	r5, #0
1a005054:	bfac      	ite	ge
1a005056:	1b5d      	subge	r5, r3, r5
1a005058:	461d      	movlt	r5, r3
1a00505a:	2d00      	cmp	r5, #0
1a00505c:	f77f ab95 	ble.w	1a00478a <_vfprintf_r+0x52a>
1a005060:	2d10      	cmp	r5, #16
1a005062:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005064:	4b60      	ldr	r3, [pc, #384]	; (1a0051e8 <_vfprintf_r+0xf88>)
1a005066:	f340 823b 	ble.w	1a0054e0 <_vfprintf_r+0x1280>
1a00506a:	2610      	movs	r6, #16
1a00506c:	9f05      	ldr	r7, [sp, #20]
1a00506e:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a005072:	4699      	mov	r9, r3
1a005074:	e005      	b.n	1a005082 <_vfprintf_r+0xe22>
1a005076:	f10b 0b08 	add.w	fp, fp, #8
1a00507a:	3d10      	subs	r5, #16
1a00507c:	2d10      	cmp	r5, #16
1a00507e:	f340 822e 	ble.w	1a0054de <_vfprintf_r+0x127e>
1a005082:	3201      	adds	r2, #1
1a005084:	3410      	adds	r4, #16
1a005086:	2a07      	cmp	r2, #7
1a005088:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00508c:	e9cb 9600 	strd	r9, r6, [fp]
1a005090:	ddf1      	ble.n	1a005076 <_vfprintf_r+0xe16>
1a005092:	aa28      	add	r2, sp, #160	; 0xa0
1a005094:	4641      	mov	r1, r8
1a005096:	4638      	mov	r0, r7
1a005098:	f002 ff1e 	bl	1a007ed8 <__sprint_r>
1a00509c:	2800      	cmp	r0, #0
1a00509e:	f040 8210 	bne.w	1a0054c2 <_vfprintf_r+0x1262>
1a0050a2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0050a6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0050aa:	e7e6      	b.n	1a00507a <_vfprintf_r+0xe1a>
1a0050ac:	9a02      	ldr	r2, [sp, #8]
1a0050ae:	07d2      	lsls	r2, r2, #31
1a0050b0:	f53f aea4 	bmi.w	1a004dfc <_vfprintf_r+0xb9c>
1a0050b4:	2201      	movs	r2, #1
1a0050b6:	2d07      	cmp	r5, #7
1a0050b8:	f8cb 7000 	str.w	r7, [fp]
1a0050bc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a0050c0:	f8cb 2004 	str.w	r2, [fp, #4]
1a0050c4:	f300 818e 	bgt.w	1a0053e4 <_vfprintf_r+0x1184>
1a0050c8:	3302      	adds	r3, #2
1a0050ca:	930a      	str	r3, [sp, #40]	; 0x28
1a0050cc:	f10b 0b10 	add.w	fp, fp, #16
1a0050d0:	e6d0      	b.n	1a004e74 <_vfprintf_r+0xc14>
1a0050d2:	f1b8 0f00 	cmp.w	r8, #0
1a0050d6:	f77f aecd 	ble.w	1a004e74 <_vfprintf_r+0xc14>
1a0050da:	f1b8 0f10 	cmp.w	r8, #16
1a0050de:	4b42      	ldr	r3, [pc, #264]	; (1a0051e8 <_vfprintf_r+0xf88>)
1a0050e0:	f340 8635 	ble.w	1a005d4e <_vfprintf_r+0x1aee>
1a0050e4:	461a      	mov	r2, r3
1a0050e6:	464d      	mov	r5, r9
1a0050e8:	4623      	mov	r3, r4
1a0050ea:	2710      	movs	r7, #16
1a0050ec:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a0050f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a0050f4:	4614      	mov	r4, r2
1a0050f6:	e007      	b.n	1a005108 <_vfprintf_r+0xea8>
1a0050f8:	3608      	adds	r6, #8
1a0050fa:	f1a8 0810 	sub.w	r8, r8, #16
1a0050fe:	f1b8 0f10 	cmp.w	r8, #16
1a005102:	f340 815e 	ble.w	1a0053c2 <_vfprintf_r+0x1162>
1a005106:	3501      	adds	r5, #1
1a005108:	3310      	adds	r3, #16
1a00510a:	2d07      	cmp	r5, #7
1a00510c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a005110:	e9c6 4700 	strd	r4, r7, [r6]
1a005114:	ddf0      	ble.n	1a0050f8 <_vfprintf_r+0xe98>
1a005116:	aa28      	add	r2, sp, #160	; 0xa0
1a005118:	4659      	mov	r1, fp
1a00511a:	4648      	mov	r0, r9
1a00511c:	f002 fedc 	bl	1a007ed8 <__sprint_r>
1a005120:	2800      	cmp	r0, #0
1a005122:	f040 821d 	bne.w	1a005560 <_vfprintf_r+0x1300>
1a005126:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a00512a:	ae2b      	add	r6, sp, #172	; 0xac
1a00512c:	e7e5      	b.n	1a0050fa <_vfprintf_r+0xe9a>
1a00512e:	aa28      	add	r2, sp, #160	; 0xa0
1a005130:	9907      	ldr	r1, [sp, #28]
1a005132:	9805      	ldr	r0, [sp, #20]
1a005134:	f002 fed0 	bl	1a007ed8 <__sprint_r>
1a005138:	2800      	cmp	r0, #0
1a00513a:	f47f ae29 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a00513e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005140:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005144:	f7ff bb0f 	b.w	1a004766 <_vfprintf_r+0x506>
1a005148:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00514c:	f7fe fbae 	bl	1a0038ac <__retarget_lock_acquire_recursive>
1a005150:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a005154:	b293      	uxth	r3, r2
1a005156:	f7ff b8a3 	b.w	1a0042a0 <_vfprintf_r+0x40>
1a00515a:	9b02      	ldr	r3, [sp, #8]
1a00515c:	07dd      	lsls	r5, r3, #31
1a00515e:	f53f ad57 	bmi.w	1a004c10 <_vfprintf_r+0x9b0>
1a005162:	f7ff bb12 	b.w	1a00478a <_vfprintf_r+0x52a>
1a005166:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005168:	4920      	ldr	r1, [pc, #128]	; (1a0051ec <_vfprintf_r+0xf8c>)
1a00516a:	f8cb 1000 	str.w	r1, [fp]
1a00516e:	3201      	adds	r2, #1
1a005170:	3401      	adds	r4, #1
1a005172:	2101      	movs	r1, #1
1a005174:	2a07      	cmp	r2, #7
1a005176:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00517a:	f8cb 1004 	str.w	r1, [fp, #4]
1a00517e:	f300 8409 	bgt.w	1a005994 <_vfprintf_r+0x1734>
1a005182:	f10b 0b08 	add.w	fp, fp, #8
1a005186:	2b00      	cmp	r3, #0
1a005188:	f47f ae05 	bne.w	1a004d96 <_vfprintf_r+0xb36>
1a00518c:	9b02      	ldr	r3, [sp, #8]
1a00518e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005190:	f003 0301 	and.w	r3, r3, #1
1a005194:	4313      	orrs	r3, r2
1a005196:	f43f aaf8 	beq.w	1a00478a <_vfprintf_r+0x52a>
1a00519a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00519c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00519e:	f8cb 3000 	str.w	r3, [fp]
1a0051a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0051a4:	f8cb 3004 	str.w	r3, [fp, #4]
1a0051a8:	3201      	adds	r2, #1
1a0051aa:	441c      	add	r4, r3
1a0051ac:	2a07      	cmp	r2, #7
1a0051ae:	942a      	str	r4, [sp, #168]	; 0xa8
1a0051b0:	9229      	str	r2, [sp, #164]	; 0xa4
1a0051b2:	f300 82df 	bgt.w	1a005774 <_vfprintf_r+0x1514>
1a0051b6:	f10b 0b08 	add.w	fp, fp, #8
1a0051ba:	e5ff      	b.n	1a004dbc <_vfprintf_r+0xb5c>
1a0051bc:	af54      	add	r7, sp, #336	; 0x150
1a0051be:	e4b1      	b.n	1a004b24 <_vfprintf_r+0x8c4>
1a0051c0:	9b02      	ldr	r3, [sp, #8]
1a0051c2:	0598      	lsls	r0, r3, #22
1a0051c4:	f100 822d 	bmi.w	1a005622 <_vfprintf_r+0x13c2>
1a0051c8:	2500      	movs	r5, #0
1a0051ca:	f7ff b987 	b.w	1a0044dc <_vfprintf_r+0x27c>
1a0051ce:	9904      	ldr	r1, [sp, #16]
1a0051d0:	6812      	ldr	r2, [r2, #0]
1a0051d2:	9308      	str	r3, [sp, #32]
1a0051d4:	17cd      	asrs	r5, r1, #31
1a0051d6:	4608      	mov	r0, r1
1a0051d8:	4629      	mov	r1, r5
1a0051da:	e9c2 0100 	strd	r0, r1, [r2]
1a0051de:	4657      	mov	r7, sl
1a0051e0:	f7ff baf2 	b.w	1a0047c8 <_vfprintf_r+0x568>
1a0051e4:	1a00876c 	.word	0x1a00876c
1a0051e8:	1a00877c 	.word	0x1a00877c
1a0051ec:	1a008768 	.word	0x1a008768
1a0051f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0051f4:	4602      	mov	r2, r0
1a0051f6:	460b      	mov	r3, r1
1a0051f8:	f002 ffc6 	bl	1a008188 <__aeabi_dcmpun>
1a0051fc:	2800      	cmp	r0, #0
1a0051fe:	f040 853a 	bne.w	1a005c76 <_vfprintf_r+0x1a16>
1a005202:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a005206:	f000 84d0 	beq.w	1a005baa <_vfprintf_r+0x194a>
1a00520a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00520e:	f000 820c 	beq.w	1a00562a <_vfprintf_r+0x13ca>
1a005212:	f028 0320 	bic.w	r3, r8, #32
1a005216:	f1b9 3fff 	cmp.w	r9, #4294967295
1a00521a:	9303      	str	r3, [sp, #12]
1a00521c:	f000 8500 	beq.w	1a005c20 <_vfprintf_r+0x19c0>
1a005220:	2b47      	cmp	r3, #71	; 0x47
1a005222:	d104      	bne.n	1a00522e <_vfprintf_r+0xfce>
1a005224:	f1b9 0f00 	cmp.w	r9, #0
1a005228:	bf08      	it	eq
1a00522a:	f04f 0901 	moveq.w	r9, #1
1a00522e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a005232:	9902      	ldr	r1, [sp, #8]
1a005234:	2d00      	cmp	r5, #0
1a005236:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a00523a:	f2c0 8395 	blt.w	1a005968 <_vfprintf_r+0x1708>
1a00523e:	2300      	movs	r3, #0
1a005240:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a005244:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a005248:	931e      	str	r3, [sp, #120]	; 0x78
1a00524a:	9202      	str	r2, [sp, #8]
1a00524c:	9b03      	ldr	r3, [sp, #12]
1a00524e:	2b46      	cmp	r3, #70	; 0x46
1a005250:	f000 83df 	beq.w	1a005a12 <_vfprintf_r+0x17b2>
1a005254:	2b45      	cmp	r3, #69	; 0x45
1a005256:	f000 84d2 	beq.w	1a005bfe <_vfprintf_r+0x199e>
1a00525a:	aa26      	add	r2, sp, #152	; 0x98
1a00525c:	ab23      	add	r3, sp, #140	; 0x8c
1a00525e:	e9cd 3200 	strd	r3, r2, [sp]
1a005262:	2102      	movs	r1, #2
1a005264:	ab22      	add	r3, sp, #136	; 0x88
1a005266:	464a      	mov	r2, r9
1a005268:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00526c:	9805      	ldr	r0, [sp, #20]
1a00526e:	f000 fedf 	bl	1a006030 <_dtoa_r>
1a005272:	9b03      	ldr	r3, [sp, #12]
1a005274:	2b47      	cmp	r3, #71	; 0x47
1a005276:	4607      	mov	r7, r0
1a005278:	f040 858d 	bne.w	1a005d96 <_vfprintf_r+0x1b36>
1a00527c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00527e:	07db      	lsls	r3, r3, #31
1a005280:	f100 843b 	bmi.w	1a005afa <_vfprintf_r+0x189a>
1a005284:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a005286:	1bf3      	subs	r3, r6, r7
1a005288:	9312      	str	r3, [sp, #72]	; 0x48
1a00528a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00528c:	930e      	str	r3, [sp, #56]	; 0x38
1a00528e:	9b03      	ldr	r3, [sp, #12]
1a005290:	2b47      	cmp	r3, #71	; 0x47
1a005292:	f000 8293 	beq.w	1a0057bc <_vfprintf_r+0x155c>
1a005296:	9b03      	ldr	r3, [sp, #12]
1a005298:	2b46      	cmp	r3, #70	; 0x46
1a00529a:	f000 83fd 	beq.w	1a005a98 <_vfprintf_r+0x1838>
1a00529e:	9903      	ldr	r1, [sp, #12]
1a0052a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0052a2:	2941      	cmp	r1, #65	; 0x41
1a0052a4:	f103 32ff 	add.w	r2, r3, #4294967295
1a0052a8:	fa5f f388 	uxtb.w	r3, r8
1a0052ac:	bf03      	ittte	eq
1a0052ae:	330f      	addeq	r3, #15
1a0052b0:	b2db      	uxtbeq	r3, r3
1a0052b2:	2101      	moveq	r1, #1
1a0052b4:	2100      	movne	r1, #0
1a0052b6:	2a00      	cmp	r2, #0
1a0052b8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a0052bc:	bfb8      	it	lt
1a0052be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a0052c0:	9222      	str	r2, [sp, #136]	; 0x88
1a0052c2:	bfb6      	itet	lt
1a0052c4:	f1c3 0201 	rsblt	r2, r3, #1
1a0052c8:	232b      	movge	r3, #43	; 0x2b
1a0052ca:	232d      	movlt	r3, #45	; 0x2d
1a0052cc:	2a09      	cmp	r2, #9
1a0052ce:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a0052d2:	f340 84c1 	ble.w	1a005c58 <_vfprintf_r+0x19f8>
1a0052d6:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a0052da:	4620      	mov	r0, r4
1a0052dc:	4dbe      	ldr	r5, [pc, #760]	; (1a0055d8 <_vfprintf_r+0x1378>)
1a0052de:	e001      	b.n	1a0052e4 <_vfprintf_r+0x1084>
1a0052e0:	4608      	mov	r0, r1
1a0052e2:	461a      	mov	r2, r3
1a0052e4:	fb85 3102 	smull	r3, r1, r5, r2
1a0052e8:	17d3      	asrs	r3, r2, #31
1a0052ea:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a0052ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0052f2:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a0052f6:	3130      	adds	r1, #48	; 0x30
1a0052f8:	2a63      	cmp	r2, #99	; 0x63
1a0052fa:	f800 1c01 	strb.w	r1, [r0, #-1]
1a0052fe:	f100 31ff 	add.w	r1, r0, #4294967295
1a005302:	dced      	bgt.n	1a0052e0 <_vfprintf_r+0x1080>
1a005304:	3330      	adds	r3, #48	; 0x30
1a005306:	1e82      	subs	r2, r0, #2
1a005308:	b2db      	uxtb	r3, r3
1a00530a:	4294      	cmp	r4, r2
1a00530c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a005310:	f240 8544 	bls.w	1a005d9c <_vfprintf_r+0x1b3c>
1a005314:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a005318:	e001      	b.n	1a00531e <_vfprintf_r+0x10be>
1a00531a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00531e:	f802 3b01 	strb.w	r3, [r2], #1
1a005322:	42a1      	cmp	r1, r4
1a005324:	d1f9      	bne.n	1a00531a <_vfprintf_r+0x10ba>
1a005326:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a00532a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a00532e:	1a1b      	subs	r3, r3, r0
1a005330:	4413      	add	r3, r2
1a005332:	aa24      	add	r2, sp, #144	; 0x90
1a005334:	1a9b      	subs	r3, r3, r2
1a005336:	9316      	str	r3, [sp, #88]	; 0x58
1a005338:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00533a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00533c:	2b01      	cmp	r3, #1
1a00533e:	eb03 0602 	add.w	r6, r3, r2
1a005342:	f340 84ee 	ble.w	1a005d22 <_vfprintf_r+0x1ac2>
1a005346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005348:	441e      	add	r6, r3
1a00534a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00534c:	2200      	movs	r2, #0
1a00534e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a005356:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a00535a:	9302      	str	r3, [sp, #8]
1a00535c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005360:	920c      	str	r2, [sp, #48]	; 0x30
1a005362:	9303      	str	r3, [sp, #12]
1a005364:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a005366:	2b00      	cmp	r3, #0
1a005368:	f040 824f 	bne.w	1a00580a <_vfprintf_r+0x15aa>
1a00536c:	4699      	mov	r9, r3
1a00536e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005372:	f7ff b94a 	b.w	1a00460a <_vfprintf_r+0x3aa>
1a005376:	9b08      	ldr	r3, [sp, #32]
1a005378:	1d1a      	adds	r2, r3, #4
1a00537a:	9b02      	ldr	r3, [sp, #8]
1a00537c:	06d9      	lsls	r1, r3, #27
1a00537e:	f100 8504 	bmi.w	1a005d8a <_vfprintf_r+0x1b2a>
1a005382:	9e02      	ldr	r6, [sp, #8]
1a005384:	4633      	mov	r3, r6
1a005386:	065b      	lsls	r3, r3, #25
1a005388:	f140 80ec 	bpl.w	1a005564 <_vfprintf_r+0x1304>
1a00538c:	9b08      	ldr	r3, [sp, #32]
1a00538e:	9208      	str	r2, [sp, #32]
1a005390:	f9b3 4000 	ldrsh.w	r4, [r3]
1a005394:	17e5      	asrs	r5, r4, #31
1a005396:	4622      	mov	r2, r4
1a005398:	462b      	mov	r3, r5
1a00539a:	f7ff b8eb 	b.w	1a004574 <_vfprintf_r+0x314>
1a00539e:	4252      	negs	r2, r2
1a0053a0:	9206      	str	r2, [sp, #24]
1a0053a2:	9308      	str	r3, [sp, #32]
1a0053a4:	f7ff b8af 	b.w	1a004506 <_vfprintf_r+0x2a6>
1a0053a8:	aa28      	add	r2, sp, #160	; 0xa0
1a0053aa:	9907      	ldr	r1, [sp, #28]
1a0053ac:	9805      	ldr	r0, [sp, #20]
1a0053ae:	f002 fd93 	bl	1a007ed8 <__sprint_r>
1a0053b2:	2800      	cmp	r0, #0
1a0053b4:	f47f acec 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a0053b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0053ba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0053be:	f7ff b9cd 	b.w	1a00475c <_vfprintf_r+0x4fc>
1a0053c2:	4622      	mov	r2, r4
1a0053c4:	461c      	mov	r4, r3
1a0053c6:	4613      	mov	r3, r2
1a0053c8:	462a      	mov	r2, r5
1a0053ca:	3201      	adds	r2, #1
1a0053cc:	920a      	str	r2, [sp, #40]	; 0x28
1a0053ce:	f106 0208 	add.w	r2, r6, #8
1a0053d2:	e9c6 3800 	strd	r3, r8, [r6]
1a0053d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0053d8:	9329      	str	r3, [sp, #164]	; 0xa4
1a0053da:	4444      	add	r4, r8
1a0053dc:	2b07      	cmp	r3, #7
1a0053de:	942a      	str	r4, [sp, #168]	; 0xa8
1a0053e0:	f340 8100 	ble.w	1a0055e4 <_vfprintf_r+0x1384>
1a0053e4:	aa28      	add	r2, sp, #160	; 0xa0
1a0053e6:	9907      	ldr	r1, [sp, #28]
1a0053e8:	9805      	ldr	r0, [sp, #20]
1a0053ea:	f002 fd75 	bl	1a007ed8 <__sprint_r>
1a0053ee:	2800      	cmp	r0, #0
1a0053f0:	f47f acce 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a0053f4:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a0053f8:	3301      	adds	r3, #1
1a0053fa:	930a      	str	r3, [sp, #40]	; 0x28
1a0053fc:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a005400:	ae2b      	add	r6, sp, #172	; 0xac
1a005402:	e537      	b.n	1a004e74 <_vfprintf_r+0xc14>
1a005404:	aa28      	add	r2, sp, #160	; 0xa0
1a005406:	9907      	ldr	r1, [sp, #28]
1a005408:	9805      	ldr	r0, [sp, #20]
1a00540a:	f002 fd65 	bl	1a007ed8 <__sprint_r>
1a00540e:	2800      	cmp	r0, #0
1a005410:	f47f acbe 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a005414:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005416:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00541a:	e409      	b.n	1a004c30 <_vfprintf_r+0x9d0>
1a00541c:	f043 0320 	orr.w	r3, r3, #32
1a005420:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005424:	9302      	str	r3, [sp, #8]
1a005426:	f10a 0a01 	add.w	sl, sl, #1
1a00542a:	f7fe bf9d 	b.w	1a004368 <_vfprintf_r+0x108>
1a00542e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a005432:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005436:	9302      	str	r3, [sp, #8]
1a005438:	f10a 0a01 	add.w	sl, sl, #1
1a00543c:	f7fe bf94 	b.w	1a004368 <_vfprintf_r+0x108>
1a005440:	464e      	mov	r6, r9
1a005442:	2e06      	cmp	r6, #6
1a005444:	bf28      	it	cs
1a005446:	2606      	movcs	r6, #6
1a005448:	46b9      	mov	r9, r7
1a00544a:	970c      	str	r7, [sp, #48]	; 0x30
1a00544c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a005450:	9709      	str	r7, [sp, #36]	; 0x24
1a005452:	463a      	mov	r2, r7
1a005454:	9603      	str	r6, [sp, #12]
1a005456:	9408      	str	r4, [sp, #32]
1a005458:	4f60      	ldr	r7, [pc, #384]	; (1a0055dc <_vfprintf_r+0x137c>)
1a00545a:	f7ff b8d6 	b.w	1a00460a <_vfprintf_r+0x3aa>
1a00545e:	463c      	mov	r4, r7
1a005460:	f7fe bf75 	b.w	1a00434e <_vfprintf_r+0xee>
1a005464:	aa28      	add	r2, sp, #160	; 0xa0
1a005466:	9907      	ldr	r1, [sp, #28]
1a005468:	9805      	ldr	r0, [sp, #20]
1a00546a:	f002 fd35 	bl	1a007ed8 <__sprint_r>
1a00546e:	2800      	cmp	r0, #0
1a005470:	f47f ac8e 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a005474:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a005478:	ae2b      	add	r6, sp, #172	; 0xac
1a00547a:	e4c9      	b.n	1a004e10 <_vfprintf_r+0xbb0>
1a00547c:	aa28      	add	r2, sp, #160	; 0xa0
1a00547e:	9907      	ldr	r1, [sp, #28]
1a005480:	9805      	ldr	r0, [sp, #20]
1a005482:	f002 fd29 	bl	1a007ed8 <__sprint_r>
1a005486:	2800      	cmp	r0, #0
1a005488:	f47f ac82 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a00548c:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a005490:	ae2b      	add	r6, sp, #172	; 0xac
1a005492:	930b      	str	r3, [sp, #44]	; 0x2c
1a005494:	e4c9      	b.n	1a004e2a <_vfprintf_r+0xbca>
1a005496:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00549a:	f7fe fa09 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a00549e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0054a2:	e51d      	b.n	1a004ee0 <_vfprintf_r+0xc80>
1a0054a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0054a6:	9907      	ldr	r1, [sp, #28]
1a0054a8:	9805      	ldr	r0, [sp, #20]
1a0054aa:	f002 fd15 	bl	1a007ed8 <__sprint_r>
1a0054ae:	2800      	cmp	r0, #0
1a0054b0:	f47f ac6e 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a0054b4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0054b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0054ba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0054be:	f7ff b929 	b.w	1a004714 <_vfprintf_r+0x4b4>
1a0054c2:	46c1      	mov	r9, r8
1a0054c4:	e4fe      	b.n	1a004ec4 <_vfprintf_r+0xc64>
1a0054c6:	aa28      	add	r2, sp, #160	; 0xa0
1a0054c8:	9907      	ldr	r1, [sp, #28]
1a0054ca:	9805      	ldr	r0, [sp, #20]
1a0054cc:	f002 fd04 	bl	1a007ed8 <__sprint_r>
1a0054d0:	2800      	cmp	r0, #0
1a0054d2:	f47f ac5d 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a0054d6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0054da:	f7ff bb93 	b.w	1a004c04 <_vfprintf_r+0x9a4>
1a0054de:	464b      	mov	r3, r9
1a0054e0:	3201      	adds	r2, #1
1a0054e2:	442c      	add	r4, r5
1a0054e4:	2a07      	cmp	r2, #7
1a0054e6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0054ea:	e9cb 3500 	strd	r3, r5, [fp]
1a0054ee:	f77f a94a 	ble.w	1a004786 <_vfprintf_r+0x526>
1a0054f2:	e46d      	b.n	1a004dd0 <_vfprintf_r+0xb70>
1a0054f4:	9a08      	ldr	r2, [sp, #32]
1a0054f6:	6812      	ldr	r2, [r2, #0]
1a0054f8:	9308      	str	r3, [sp, #32]
1a0054fa:	9b04      	ldr	r3, [sp, #16]
1a0054fc:	6013      	str	r3, [r2, #0]
1a0054fe:	4657      	mov	r7, sl
1a005500:	f7ff b962 	b.w	1a0047c8 <_vfprintf_r+0x568>
1a005504:	2d10      	cmp	r5, #16
1a005506:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005508:	4b35      	ldr	r3, [pc, #212]	; (1a0055e0 <_vfprintf_r+0x1380>)
1a00550a:	dd50      	ble.n	1a0055ae <_vfprintf_r+0x134e>
1a00550c:	4619      	mov	r1, r3
1a00550e:	2610      	movs	r6, #16
1a005510:	4623      	mov	r3, r4
1a005512:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005516:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00551a:	460c      	mov	r4, r1
1a00551c:	e004      	b.n	1a005528 <_vfprintf_r+0x12c8>
1a00551e:	f10b 0b08 	add.w	fp, fp, #8
1a005522:	3d10      	subs	r5, #16
1a005524:	2d10      	cmp	r5, #16
1a005526:	dd3f      	ble.n	1a0055a8 <_vfprintf_r+0x1348>
1a005528:	3201      	adds	r2, #1
1a00552a:	3310      	adds	r3, #16
1a00552c:	2a07      	cmp	r2, #7
1a00552e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a005532:	e9cb 4600 	strd	r4, r6, [fp]
1a005536:	ddf2      	ble.n	1a00551e <_vfprintf_r+0x12be>
1a005538:	aa28      	add	r2, sp, #160	; 0xa0
1a00553a:	4649      	mov	r1, r9
1a00553c:	4640      	mov	r0, r8
1a00553e:	f002 fccb 	bl	1a007ed8 <__sprint_r>
1a005542:	2800      	cmp	r0, #0
1a005544:	f47f acbe 	bne.w	1a004ec4 <_vfprintf_r+0xc64>
1a005548:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00554c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005550:	e7e7      	b.n	1a005522 <_vfprintf_r+0x12c2>
1a005552:	4638      	mov	r0, r7
1a005554:	f7fe fe14 	bl	1a004180 <strlen>
1a005558:	46a9      	mov	r9, r5
1a00555a:	4606      	mov	r6, r0
1a00555c:	f7ff b849 	b.w	1a0045f2 <_vfprintf_r+0x392>
1a005560:	46d9      	mov	r9, fp
1a005562:	e4af      	b.n	1a004ec4 <_vfprintf_r+0xc64>
1a005564:	9e02      	ldr	r6, [sp, #8]
1a005566:	9b08      	ldr	r3, [sp, #32]
1a005568:	f416 7f00 	tst.w	r6, #512	; 0x200
1a00556c:	d051      	beq.n	1a005612 <_vfprintf_r+0x13b2>
1a00556e:	f993 4000 	ldrsb.w	r4, [r3]
1a005572:	9208      	str	r2, [sp, #32]
1a005574:	17e5      	asrs	r5, r4, #31
1a005576:	4622      	mov	r2, r4
1a005578:	462b      	mov	r3, r5
1a00557a:	f7fe bffb 	b.w	1a004574 <_vfprintf_r+0x314>
1a00557e:	9e02      	ldr	r6, [sp, #8]
1a005580:	05b7      	lsls	r7, r6, #22
1a005582:	bf47      	ittee	mi
1a005584:	9208      	strmi	r2, [sp, #32]
1a005586:	b2e4      	uxtbmi	r4, r4
1a005588:	9e02      	ldrpl	r6, [sp, #8]
1a00558a:	9208      	strpl	r2, [sp, #32]
1a00558c:	2500      	movs	r5, #0
1a00558e:	f7ff baae 	b.w	1a004aee <_vfprintf_r+0x88e>
1a005592:	9e02      	ldr	r6, [sp, #8]
1a005594:	9208      	str	r2, [sp, #32]
1a005596:	4633      	mov	r3, r6
1a005598:	059b      	lsls	r3, r3, #22
1a00559a:	bf4c      	ite	mi
1a00559c:	b2e4      	uxtbmi	r4, r4
1a00559e:	9e02      	ldrpl	r6, [sp, #8]
1a0055a0:	2500      	movs	r5, #0
1a0055a2:	2301      	movs	r3, #1
1a0055a4:	f7ff b987 	b.w	1a0048b6 <_vfprintf_r+0x656>
1a0055a8:	4621      	mov	r1, r4
1a0055aa:	461c      	mov	r4, r3
1a0055ac:	460b      	mov	r3, r1
1a0055ae:	3201      	adds	r2, #1
1a0055b0:	442c      	add	r4, r5
1a0055b2:	2a07      	cmp	r2, #7
1a0055b4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0055b8:	e9cb 3500 	strd	r3, r5, [fp]
1a0055bc:	f300 80ef 	bgt.w	1a00579e <_vfprintf_r+0x153e>
1a0055c0:	f10b 0b08 	add.w	fp, fp, #8
1a0055c4:	e50e      	b.n	1a004fe4 <_vfprintf_r+0xd84>
1a0055c6:	9805      	ldr	r0, [sp, #20]
1a0055c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0055ca:	4649      	mov	r1, r9
1a0055cc:	f002 fc84 	bl	1a007ed8 <__sprint_r>
1a0055d0:	2800      	cmp	r0, #0
1a0055d2:	f43f a903 	beq.w	1a0047dc <_vfprintf_r+0x57c>
1a0055d6:	e47a      	b.n	1a004ece <_vfprintf_r+0xc6e>
1a0055d8:	66666667 	.word	0x66666667
1a0055dc:	1a008760 	.word	0x1a008760
1a0055e0:	1a00877c 	.word	0x1a00877c
1a0055e4:	3301      	adds	r3, #1
1a0055e6:	930a      	str	r3, [sp, #40]	; 0x28
1a0055e8:	f102 0b08 	add.w	fp, r2, #8
1a0055ec:	4616      	mov	r6, r2
1a0055ee:	e441      	b.n	1a004e74 <_vfprintf_r+0xc14>
1a0055f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0055f2:	18bd      	adds	r5, r7, r2
1a0055f4:	eba5 0509 	sub.w	r5, r5, r9
1a0055f8:	1ad3      	subs	r3, r2, r3
1a0055fa:	429d      	cmp	r5, r3
1a0055fc:	bfa8      	it	ge
1a0055fe:	461d      	movge	r5, r3
1a005600:	e527      	b.n	1a005052 <_vfprintf_r+0xdf2>
1a005602:	9a08      	ldr	r2, [sp, #32]
1a005604:	9308      	str	r3, [sp, #32]
1a005606:	6812      	ldr	r2, [r2, #0]
1a005608:	9b04      	ldr	r3, [sp, #16]
1a00560a:	8013      	strh	r3, [r2, #0]
1a00560c:	4657      	mov	r7, sl
1a00560e:	f7ff b8db 	b.w	1a0047c8 <_vfprintf_r+0x568>
1a005612:	681c      	ldr	r4, [r3, #0]
1a005614:	9208      	str	r2, [sp, #32]
1a005616:	17e5      	asrs	r5, r4, #31
1a005618:	9e02      	ldr	r6, [sp, #8]
1a00561a:	4622      	mov	r2, r4
1a00561c:	462b      	mov	r3, r5
1a00561e:	f7fe bfa9 	b.w	1a004574 <_vfprintf_r+0x314>
1a005622:	b2e4      	uxtb	r4, r4
1a005624:	2500      	movs	r5, #0
1a005626:	f7fe bf59 	b.w	1a0044dc <_vfprintf_r+0x27c>
1a00562a:	2330      	movs	r3, #48	; 0x30
1a00562c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005630:	2358      	movs	r3, #88	; 0x58
1a005632:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a005636:	9b02      	ldr	r3, [sp, #8]
1a005638:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00563c:	f043 0302 	orr.w	r3, r3, #2
1a005640:	930a      	str	r3, [sp, #40]	; 0x28
1a005642:	f300 82b7 	bgt.w	1a005bb4 <_vfprintf_r+0x1954>
1a005646:	2300      	movs	r3, #0
1a005648:	9309      	str	r3, [sp, #36]	; 0x24
1a00564a:	af3b      	add	r7, sp, #236	; 0xec
1a00564c:	9a02      	ldr	r2, [sp, #8]
1a00564e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005650:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a005654:	9202      	str	r2, [sp, #8]
1a005656:	2b00      	cmp	r3, #0
1a005658:	f028 0220 	bic.w	r2, r8, #32
1a00565c:	9203      	str	r2, [sp, #12]
1a00565e:	f2c0 8188 	blt.w	1a005972 <_vfprintf_r+0x1712>
1a005662:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005666:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a00566a:	2300      	movs	r3, #0
1a00566c:	931e      	str	r3, [sp, #120]	; 0x78
1a00566e:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a005672:	f000 82d9 	beq.w	1a005c28 <_vfprintf_r+0x19c8>
1a005676:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00567a:	f47f ade7 	bne.w	1a00524c <_vfprintf_r+0xfec>
1a00567e:	a822      	add	r0, sp, #136	; 0x88
1a005680:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005684:	f002 fb7c 	bl	1a007d80 <frexp>
1a005688:	2200      	movs	r2, #0
1a00568a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00568e:	ec51 0b10 	vmov	r0, r1, d0
1a005692:	f7fd f967 	bl	1a002964 <__aeabi_dmul>
1a005696:	2200      	movs	r2, #0
1a005698:	2300      	movs	r3, #0
1a00569a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00569e:	f7fd fbc9 	bl	1a002e34 <__aeabi_dcmpeq>
1a0056a2:	b108      	cbz	r0, 1a0056a8 <_vfprintf_r+0x1448>
1a0056a4:	2301      	movs	r3, #1
1a0056a6:	9322      	str	r3, [sp, #136]	; 0x88
1a0056a8:	4bb6      	ldr	r3, [pc, #728]	; (1a005984 <_vfprintf_r+0x1724>)
1a0056aa:	930b      	str	r3, [sp, #44]	; 0x2c
1a0056ac:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a0056b0:	f109 35ff 	add.w	r5, r9, #4294967295
1a0056b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a0056b8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a0056bc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a0056c0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0056c4:	970c      	str	r7, [sp, #48]	; 0x30
1a0056c6:	46ba      	mov	sl, r7
1a0056c8:	e003      	b.n	1a0056d2 <_vfprintf_r+0x1472>
1a0056ca:	f7fd fbb3 	bl	1a002e34 <__aeabi_dcmpeq>
1a0056ce:	bb20      	cbnz	r0, 1a00571a <_vfprintf_r+0x14ba>
1a0056d0:	46b2      	mov	sl, r6
1a0056d2:	2200      	movs	r2, #0
1a0056d4:	4bac      	ldr	r3, [pc, #688]	; (1a005988 <_vfprintf_r+0x1728>)
1a0056d6:	4640      	mov	r0, r8
1a0056d8:	4649      	mov	r1, r9
1a0056da:	f7fd f943 	bl	1a002964 <__aeabi_dmul>
1a0056de:	4689      	mov	r9, r1
1a0056e0:	4680      	mov	r8, r0
1a0056e2:	f002 fd67 	bl	1a0081b4 <__aeabi_d2iz>
1a0056e6:	4607      	mov	r7, r0
1a0056e8:	f7fd f8d2 	bl	1a002890 <__aeabi_i2d>
1a0056ec:	4602      	mov	r2, r0
1a0056ee:	460b      	mov	r3, r1
1a0056f0:	4640      	mov	r0, r8
1a0056f2:	4649      	mov	r1, r9
1a0056f4:	f7fc ff7e 	bl	1a0025f4 <__aeabi_dsub>
1a0056f8:	4656      	mov	r6, sl
1a0056fa:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a0056fe:	f806 4b01 	strb.w	r4, [r6], #1
1a005702:	f1b5 3fff 	cmp.w	r5, #4294967295
1a005706:	462c      	mov	r4, r5
1a005708:	4680      	mov	r8, r0
1a00570a:	4689      	mov	r9, r1
1a00570c:	f04f 0200 	mov.w	r2, #0
1a005710:	f04f 0300 	mov.w	r3, #0
1a005714:	f105 35ff 	add.w	r5, r5, #4294967295
1a005718:	d1d7      	bne.n	1a0056ca <_vfprintf_r+0x146a>
1a00571a:	4640      	mov	r0, r8
1a00571c:	4649      	mov	r1, r9
1a00571e:	2200      	movs	r2, #0
1a005720:	4b9a      	ldr	r3, [pc, #616]	; (1a00598c <_vfprintf_r+0x172c>)
1a005722:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a005726:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a00572a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a00572e:	463d      	mov	r5, r7
1a005730:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a005734:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a005736:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00573a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00573e:	f7fd fba1 	bl	1a002e84 <__aeabi_dcmpgt>
1a005742:	2800      	cmp	r0, #0
1a005744:	f040 8214 	bne.w	1a005b70 <_vfprintf_r+0x1910>
1a005748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00574c:	2200      	movs	r2, #0
1a00574e:	4b8f      	ldr	r3, [pc, #572]	; (1a00598c <_vfprintf_r+0x172c>)
1a005750:	f7fd fb70 	bl	1a002e34 <__aeabi_dcmpeq>
1a005754:	b118      	cbz	r0, 1a00575e <_vfprintf_r+0x14fe>
1a005756:	462b      	mov	r3, r5
1a005758:	07db      	lsls	r3, r3, #31
1a00575a:	f100 8209 	bmi.w	1a005b70 <_vfprintf_r+0x1910>
1a00575e:	2c00      	cmp	r4, #0
1a005760:	f6ff ad91 	blt.w	1a005286 <_vfprintf_r+0x1026>
1a005764:	1c63      	adds	r3, r4, #1
1a005766:	4433      	add	r3, r6
1a005768:	2230      	movs	r2, #48	; 0x30
1a00576a:	f806 2b01 	strb.w	r2, [r6], #1
1a00576e:	429e      	cmp	r6, r3
1a005770:	d1fb      	bne.n	1a00576a <_vfprintf_r+0x150a>
1a005772:	e588      	b.n	1a005286 <_vfprintf_r+0x1026>
1a005774:	aa28      	add	r2, sp, #160	; 0xa0
1a005776:	9907      	ldr	r1, [sp, #28]
1a005778:	9805      	ldr	r0, [sp, #20]
1a00577a:	f002 fbad 	bl	1a007ed8 <__sprint_r>
1a00577e:	2800      	cmp	r0, #0
1a005780:	f47f ab06 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a005784:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005786:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00578a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00578e:	f7ff bb12 	b.w	1a004db6 <_vfprintf_r+0xb56>
1a005792:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a005796:	f7fe f88b 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a00579a:	f7fe be6a 	b.w	1a004472 <_vfprintf_r+0x212>
1a00579e:	aa28      	add	r2, sp, #160	; 0xa0
1a0057a0:	9907      	ldr	r1, [sp, #28]
1a0057a2:	9805      	ldr	r0, [sp, #20]
1a0057a4:	f002 fb98 	bl	1a007ed8 <__sprint_r>
1a0057a8:	2800      	cmp	r0, #0
1a0057aa:	f47f aaf1 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a0057ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0057b0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0057b4:	e416      	b.n	1a004fe4 <_vfprintf_r+0xd84>
1a0057b6:	9e02      	ldr	r6, [sp, #8]
1a0057b8:	f7ff b9ad 	b.w	1a004b16 <_vfprintf_r+0x8b6>
1a0057bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0057be:	1cde      	adds	r6, r3, #3
1a0057c0:	db01      	blt.n	1a0057c6 <_vfprintf_r+0x1566>
1a0057c2:	4599      	cmp	r9, r3
1a0057c4:	da05      	bge.n	1a0057d2 <_vfprintf_r+0x1572>
1a0057c6:	f1a8 0802 	sub.w	r8, r8, #2
1a0057ca:	f028 0320 	bic.w	r3, r8, #32
1a0057ce:	9303      	str	r3, [sp, #12]
1a0057d0:	e565      	b.n	1a00529e <_vfprintf_r+0x103e>
1a0057d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0057d4:	4619      	mov	r1, r3
1a0057d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0057d8:	4299      	cmp	r1, r3
1a0057da:	f300 8174 	bgt.w	1a005ac6 <_vfprintf_r+0x1866>
1a0057de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0057e0:	07d4      	lsls	r4, r2, #31
1a0057e2:	f140 8254 	bpl.w	1a005c8e <_vfprintf_r+0x1a2e>
1a0057e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0057e8:	189e      	adds	r6, r3, r2
1a0057ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0057ec:	0558      	lsls	r0, r3, #21
1a0057ee:	d503      	bpl.n	1a0057f8 <_vfprintf_r+0x1598>
1a0057f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0057f2:	2b00      	cmp	r3, #0
1a0057f4:	f300 824d 	bgt.w	1a005c92 <_vfprintf_r+0x1a32>
1a0057f8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0057fc:	9303      	str	r3, [sp, #12]
1a0057fe:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005802:	2300      	movs	r3, #0
1a005804:	930c      	str	r3, [sp, #48]	; 0x30
1a005806:	930f      	str	r3, [sp, #60]	; 0x3c
1a005808:	e5ac      	b.n	1a005364 <_vfprintf_r+0x1104>
1a00580a:	222d      	movs	r2, #45	; 0x2d
1a00580c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005810:	f04f 0900 	mov.w	r9, #0
1a005814:	f7fe befb 	b.w	1a00460e <_vfprintf_r+0x3ae>
1a005818:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00581a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00581e:	18fb      	adds	r3, r7, r3
1a005820:	930a      	str	r3, [sp, #40]	; 0x28
1a005822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005824:	970e      	str	r7, [sp, #56]	; 0x38
1a005826:	465a      	mov	r2, fp
1a005828:	464f      	mov	r7, r9
1a00582a:	4e59      	ldr	r6, [pc, #356]	; (1a005990 <_vfprintf_r+0x1730>)
1a00582c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a005830:	f8dd a014 	ldr.w	sl, [sp, #20]
1a005834:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a005838:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a00583c:	4621      	mov	r1, r4
1a00583e:	2b00      	cmp	r3, #0
1a005840:	d032      	beq.n	1a0058a8 <_vfprintf_r+0x1648>
1a005842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005844:	2b00      	cmp	r3, #0
1a005846:	d16e      	bne.n	1a005926 <_vfprintf_r+0x16c6>
1a005848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00584a:	3b01      	subs	r3, #1
1a00584c:	f108 38ff 	add.w	r8, r8, #4294967295
1a005850:	930f      	str	r3, [sp, #60]	; 0x3c
1a005852:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005854:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a005856:	6010      	str	r0, [r2, #0]
1a005858:	3301      	adds	r3, #1
1a00585a:	4449      	add	r1, r9
1a00585c:	2b07      	cmp	r3, #7
1a00585e:	912a      	str	r1, [sp, #168]	; 0xa8
1a005860:	f8c2 9004 	str.w	r9, [r2, #4]
1a005864:	9329      	str	r3, [sp, #164]	; 0xa4
1a005866:	dc62      	bgt.n	1a00592e <_vfprintf_r+0x16ce>
1a005868:	3208      	adds	r2, #8
1a00586a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00586c:	f898 3000 	ldrb.w	r3, [r8]
1a005870:	1bc5      	subs	r5, r0, r7
1a005872:	429d      	cmp	r5, r3
1a005874:	bfa8      	it	ge
1a005876:	461d      	movge	r5, r3
1a005878:	2d00      	cmp	r5, #0
1a00587a:	dd0b      	ble.n	1a005894 <_vfprintf_r+0x1634>
1a00587c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00587e:	6017      	str	r7, [r2, #0]
1a005880:	3301      	adds	r3, #1
1a005882:	4429      	add	r1, r5
1a005884:	2b07      	cmp	r3, #7
1a005886:	912a      	str	r1, [sp, #168]	; 0xa8
1a005888:	6055      	str	r5, [r2, #4]
1a00588a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00588c:	dc5a      	bgt.n	1a005944 <_vfprintf_r+0x16e4>
1a00588e:	f898 3000 	ldrb.w	r3, [r8]
1a005892:	3208      	adds	r2, #8
1a005894:	2d00      	cmp	r5, #0
1a005896:	bfac      	ite	ge
1a005898:	1b5d      	subge	r5, r3, r5
1a00589a:	461d      	movlt	r5, r3
1a00589c:	2d00      	cmp	r5, #0
1a00589e:	dc15      	bgt.n	1a0058cc <_vfprintf_r+0x166c>
1a0058a0:	441f      	add	r7, r3
1a0058a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0058a4:	2b00      	cmp	r3, #0
1a0058a6:	d1cc      	bne.n	1a005842 <_vfprintf_r+0x15e2>
1a0058a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0058aa:	2b00      	cmp	r3, #0
1a0058ac:	d13b      	bne.n	1a005926 <_vfprintf_r+0x16c6>
1a0058ae:	46b9      	mov	r9, r7
1a0058b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0058b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a0058b4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a0058b8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0058bc:	18fb      	adds	r3, r7, r3
1a0058be:	4599      	cmp	r9, r3
1a0058c0:	4693      	mov	fp, r2
1a0058c2:	460c      	mov	r4, r1
1a0058c4:	bf28      	it	cs
1a0058c6:	4699      	movcs	r9, r3
1a0058c8:	f7ff bb93 	b.w	1a004ff2 <_vfprintf_r+0xd92>
1a0058cc:	2d10      	cmp	r5, #16
1a0058ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a0058d0:	dd1c      	ble.n	1a00590c <_vfprintf_r+0x16ac>
1a0058d2:	2410      	movs	r4, #16
1a0058d4:	e004      	b.n	1a0058e0 <_vfprintf_r+0x1680>
1a0058d6:	3d10      	subs	r5, #16
1a0058d8:	2d10      	cmp	r5, #16
1a0058da:	f102 0208 	add.w	r2, r2, #8
1a0058de:	dd15      	ble.n	1a00590c <_vfprintf_r+0x16ac>
1a0058e0:	3001      	adds	r0, #1
1a0058e2:	3110      	adds	r1, #16
1a0058e4:	2807      	cmp	r0, #7
1a0058e6:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0058ea:	e9c2 6400 	strd	r6, r4, [r2]
1a0058ee:	ddf2      	ble.n	1a0058d6 <_vfprintf_r+0x1676>
1a0058f0:	aa28      	add	r2, sp, #160	; 0xa0
1a0058f2:	4659      	mov	r1, fp
1a0058f4:	4650      	mov	r0, sl
1a0058f6:	f002 faef 	bl	1a007ed8 <__sprint_r>
1a0058fa:	2800      	cmp	r0, #0
1a0058fc:	f47f ae30 	bne.w	1a005560 <_vfprintf_r+0x1300>
1a005900:	3d10      	subs	r5, #16
1a005902:	2d10      	cmp	r5, #16
1a005904:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a005908:	aa2b      	add	r2, sp, #172	; 0xac
1a00590a:	dce9      	bgt.n	1a0058e0 <_vfprintf_r+0x1680>
1a00590c:	3001      	adds	r0, #1
1a00590e:	4429      	add	r1, r5
1a005910:	2807      	cmp	r0, #7
1a005912:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a005916:	e9c2 6500 	strd	r6, r5, [r2]
1a00591a:	dc49      	bgt.n	1a0059b0 <_vfprintf_r+0x1750>
1a00591c:	f898 3000 	ldrb.w	r3, [r8]
1a005920:	3208      	adds	r2, #8
1a005922:	441f      	add	r7, r3
1a005924:	e7bd      	b.n	1a0058a2 <_vfprintf_r+0x1642>
1a005926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005928:	3b01      	subs	r3, #1
1a00592a:	930c      	str	r3, [sp, #48]	; 0x30
1a00592c:	e791      	b.n	1a005852 <_vfprintf_r+0x15f2>
1a00592e:	aa28      	add	r2, sp, #160	; 0xa0
1a005930:	4659      	mov	r1, fp
1a005932:	4650      	mov	r0, sl
1a005934:	f002 fad0 	bl	1a007ed8 <__sprint_r>
1a005938:	2800      	cmp	r0, #0
1a00593a:	f47f ae11 	bne.w	1a005560 <_vfprintf_r+0x1300>
1a00593e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a005940:	aa2b      	add	r2, sp, #172	; 0xac
1a005942:	e792      	b.n	1a00586a <_vfprintf_r+0x160a>
1a005944:	aa28      	add	r2, sp, #160	; 0xa0
1a005946:	4659      	mov	r1, fp
1a005948:	4650      	mov	r0, sl
1a00594a:	f002 fac5 	bl	1a007ed8 <__sprint_r>
1a00594e:	2800      	cmp	r0, #0
1a005950:	f47f ae06 	bne.w	1a005560 <_vfprintf_r+0x1300>
1a005954:	f898 3000 	ldrb.w	r3, [r8]
1a005958:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00595a:	aa2b      	add	r2, sp, #172	; 0xac
1a00595c:	e79a      	b.n	1a005894 <_vfprintf_r+0x1634>
1a00595e:	222d      	movs	r2, #45	; 0x2d
1a005960:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005964:	f7ff b87d 	b.w	1a004a62 <_vfprintf_r+0x802>
1a005968:	9b02      	ldr	r3, [sp, #8]
1a00596a:	930a      	str	r3, [sp, #40]	; 0x28
1a00596c:	2300      	movs	r3, #0
1a00596e:	9309      	str	r3, [sp, #36]	; 0x24
1a005970:	9202      	str	r2, [sp, #8]
1a005972:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a005976:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a00597a:	931d      	str	r3, [sp, #116]	; 0x74
1a00597c:	232d      	movs	r3, #45	; 0x2d
1a00597e:	911c      	str	r1, [sp, #112]	; 0x70
1a005980:	931e      	str	r3, [sp, #120]	; 0x78
1a005982:	e674      	b.n	1a00566e <_vfprintf_r+0x140e>
1a005984:	1a008738 	.word	0x1a008738
1a005988:	40300000 	.word	0x40300000
1a00598c:	3fe00000 	.word	0x3fe00000
1a005990:	1a00877c 	.word	0x1a00877c
1a005994:	aa28      	add	r2, sp, #160	; 0xa0
1a005996:	9907      	ldr	r1, [sp, #28]
1a005998:	9805      	ldr	r0, [sp, #20]
1a00599a:	f002 fa9d 	bl	1a007ed8 <__sprint_r>
1a00599e:	2800      	cmp	r0, #0
1a0059a0:	f47f a9f6 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a0059a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0059a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0059a8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0059ac:	f7ff bbeb 	b.w	1a005186 <_vfprintf_r+0xf26>
1a0059b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0059b2:	4659      	mov	r1, fp
1a0059b4:	4650      	mov	r0, sl
1a0059b6:	f002 fa8f 	bl	1a007ed8 <__sprint_r>
1a0059ba:	2800      	cmp	r0, #0
1a0059bc:	f47f add0 	bne.w	1a005560 <_vfprintf_r+0x1300>
1a0059c0:	f898 3000 	ldrb.w	r3, [r8]
1a0059c4:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0059c6:	aa2b      	add	r2, sp, #172	; 0xac
1a0059c8:	441f      	add	r7, r3
1a0059ca:	e76a      	b.n	1a0058a2 <_vfprintf_r+0x1642>
1a0059cc:	aa28      	add	r2, sp, #160	; 0xa0
1a0059ce:	9907      	ldr	r1, [sp, #28]
1a0059d0:	9805      	ldr	r0, [sp, #20]
1a0059d2:	f002 fa81 	bl	1a007ed8 <__sprint_r>
1a0059d6:	2800      	cmp	r0, #0
1a0059d8:	f47f a9da 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a0059dc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0059de:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0059e2:	f7ff baf7 	b.w	1a004fd4 <_vfprintf_r+0xd74>
1a0059e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0059e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0059ea:	1aff      	subs	r7, r7, r3
1a0059ec:	461a      	mov	r2, r3
1a0059ee:	4638      	mov	r0, r7
1a0059f0:	f002 f9fc 	bl	1a007dec <strncpy>
1a0059f4:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0059f8:	b10b      	cbz	r3, 1a0059fe <_vfprintf_r+0x179e>
1a0059fa:	f108 0801 	add.w	r8, r8, #1
1a0059fe:	220a      	movs	r2, #10
1a005a00:	2300      	movs	r3, #0
1a005a02:	4620      	mov	r0, r4
1a005a04:	4629      	mov	r1, r5
1a005a06:	f04f 0a00 	mov.w	sl, #0
1a005a0a:	f7fd fa95 	bl	1a002f38 <__aeabi_uldivmod>
1a005a0e:	f7ff b8ab 	b.w	1a004b68 <_vfprintf_r+0x908>
1a005a12:	aa26      	add	r2, sp, #152	; 0x98
1a005a14:	ab23      	add	r3, sp, #140	; 0x8c
1a005a16:	e9cd 3200 	strd	r3, r2, [sp]
1a005a1a:	2103      	movs	r1, #3
1a005a1c:	ab22      	add	r3, sp, #136	; 0x88
1a005a1e:	464a      	mov	r2, r9
1a005a20:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005a24:	9805      	ldr	r0, [sp, #20]
1a005a26:	f000 fb03 	bl	1a006030 <_dtoa_r>
1a005a2a:	7803      	ldrb	r3, [r0, #0]
1a005a2c:	2b30      	cmp	r3, #48	; 0x30
1a005a2e:	4607      	mov	r7, r0
1a005a30:	f000 8161 	beq.w	1a005cf6 <_vfprintf_r+0x1a96>
1a005a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005a36:	444b      	add	r3, r9
1a005a38:	18fc      	adds	r4, r7, r3
1a005a3a:	2200      	movs	r2, #0
1a005a3c:	2300      	movs	r3, #0
1a005a3e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a005a42:	f7fd f9f7 	bl	1a002e34 <__aeabi_dcmpeq>
1a005a46:	b108      	cbz	r0, 1a005a4c <_vfprintf_r+0x17ec>
1a005a48:	4626      	mov	r6, r4
1a005a4a:	e41c      	b.n	1a005286 <_vfprintf_r+0x1026>
1a005a4c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a005a4e:	42a6      	cmp	r6, r4
1a005a50:	f4bf ac19 	bcs.w	1a005286 <_vfprintf_r+0x1026>
1a005a54:	2230      	movs	r2, #48	; 0x30
1a005a56:	1c73      	adds	r3, r6, #1
1a005a58:	9326      	str	r3, [sp, #152]	; 0x98
1a005a5a:	7032      	strb	r2, [r6, #0]
1a005a5c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a005a5e:	42b4      	cmp	r4, r6
1a005a60:	d8f9      	bhi.n	1a005a56 <_vfprintf_r+0x17f6>
1a005a62:	e410      	b.n	1a005286 <_vfprintf_r+0x1026>
1a005a64:	aa28      	add	r2, sp, #160	; 0xa0
1a005a66:	9907      	ldr	r1, [sp, #28]
1a005a68:	9805      	ldr	r0, [sp, #20]
1a005a6a:	f002 fa35 	bl	1a007ed8 <__sprint_r>
1a005a6e:	2800      	cmp	r0, #0
1a005a70:	f47f a98e 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a005a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005a76:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005a78:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005a7c:	f7ff bad1 	b.w	1a005022 <_vfprintf_r+0xdc2>
1a005a80:	464e      	mov	r6, r9
1a005a82:	f8cd 900c 	str.w	r9, [sp, #12]
1a005a86:	9408      	str	r4, [sp, #32]
1a005a88:	4681      	mov	r9, r0
1a005a8a:	900c      	str	r0, [sp, #48]	; 0x30
1a005a8c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a005a90:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005a94:	f7fe bdb9 	b.w	1a00460a <_vfprintf_r+0x3aa>
1a005a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a005a9c:	f003 0301 	and.w	r3, r3, #1
1a005aa0:	2a00      	cmp	r2, #0
1a005aa2:	ea43 0309 	orr.w	r3, r3, r9
1a005aa6:	f340 8142 	ble.w	1a005d2e <_vfprintf_r+0x1ace>
1a005aaa:	2b00      	cmp	r3, #0
1a005aac:	f040 8119 	bne.w	1a005ce2 <_vfprintf_r+0x1a82>
1a005ab0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a005ab2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005ab8:	055a      	lsls	r2, r3, #21
1a005aba:	f100 80ec 	bmi.w	1a005c96 <_vfprintf_r+0x1a36>
1a005abe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005ac2:	9303      	str	r3, [sp, #12]
1a005ac4:	e69d      	b.n	1a005802 <_vfprintf_r+0x15a2>
1a005ac6:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a005aca:	189e      	adds	r6, r3, r2
1a005acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ace:	2b00      	cmp	r3, #0
1a005ad0:	f340 811e 	ble.w	1a005d10 <_vfprintf_r+0x1ab0>
1a005ad4:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005ad8:	e7ed      	b.n	1a005ab6 <_vfprintf_r+0x1856>
1a005ada:	aa28      	add	r2, sp, #160	; 0xa0
1a005adc:	9907      	ldr	r1, [sp, #28]
1a005ade:	9805      	ldr	r0, [sp, #20]
1a005ae0:	f002 f9fa 	bl	1a007ed8 <__sprint_r>
1a005ae4:	2800      	cmp	r0, #0
1a005ae6:	f47f a953 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a005aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005aee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005af0:	1ad3      	subs	r3, r2, r3
1a005af2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005af6:	f7ff baac 	b.w	1a005052 <_vfprintf_r+0xdf2>
1a005afa:	eb07 0409 	add.w	r4, r7, r9
1a005afe:	e79c      	b.n	1a005a3a <_vfprintf_r+0x17da>
1a005b00:	425d      	negs	r5, r3
1a005b02:	3310      	adds	r3, #16
1a005b04:	4ba7      	ldr	r3, [pc, #668]	; (1a005da4 <_vfprintf_r+0x1b44>)
1a005b06:	da63      	bge.n	1a005bd0 <_vfprintf_r+0x1970>
1a005b08:	4619      	mov	r1, r3
1a005b0a:	2610      	movs	r6, #16
1a005b0c:	4623      	mov	r3, r4
1a005b0e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005b12:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005b16:	460c      	mov	r4, r1
1a005b18:	e004      	b.n	1a005b24 <_vfprintf_r+0x18c4>
1a005b1a:	f10b 0b08 	add.w	fp, fp, #8
1a005b1e:	3d10      	subs	r5, #16
1a005b20:	2d10      	cmp	r5, #16
1a005b22:	dd52      	ble.n	1a005bca <_vfprintf_r+0x196a>
1a005b24:	3201      	adds	r2, #1
1a005b26:	3310      	adds	r3, #16
1a005b28:	2a07      	cmp	r2, #7
1a005b2a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a005b2e:	e9cb 4600 	strd	r4, r6, [fp]
1a005b32:	ddf2      	ble.n	1a005b1a <_vfprintf_r+0x18ba>
1a005b34:	aa28      	add	r2, sp, #160	; 0xa0
1a005b36:	4649      	mov	r1, r9
1a005b38:	4640      	mov	r0, r8
1a005b3a:	f002 f9cd 	bl	1a007ed8 <__sprint_r>
1a005b3e:	2800      	cmp	r0, #0
1a005b40:	f47f a9c0 	bne.w	1a004ec4 <_vfprintf_r+0xc64>
1a005b44:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a005b48:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005b4c:	e7e7      	b.n	1a005b1e <_vfprintf_r+0x18be>
1a005b4e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a005b52:	07db      	lsls	r3, r3, #31
1a005b54:	d407      	bmi.n	1a005b66 <_vfprintf_r+0x1906>
1a005b56:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a005b5a:	059f      	lsls	r7, r3, #22
1a005b5c:	d403      	bmi.n	1a005b66 <_vfprintf_r+0x1906>
1a005b5e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a005b62:	f7fd fea5 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a005b66:	f04f 33ff 	mov.w	r3, #4294967295
1a005b6a:	9304      	str	r3, [sp, #16]
1a005b6c:	f7ff b9bb 	b.w	1a004ee6 <_vfprintf_r+0xc86>
1a005b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005b72:	9326      	str	r3, [sp, #152]	; 0x98
1a005b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005b76:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a005b7a:	7bd9      	ldrb	r1, [r3, #15]
1a005b7c:	428a      	cmp	r2, r1
1a005b7e:	4633      	mov	r3, r6
1a005b80:	d109      	bne.n	1a005b96 <_vfprintf_r+0x1936>
1a005b82:	2030      	movs	r0, #48	; 0x30
1a005b84:	f803 0c01 	strb.w	r0, [r3, #-1]
1a005b88:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a005b8a:	1e5a      	subs	r2, r3, #1
1a005b8c:	9226      	str	r2, [sp, #152]	; 0x98
1a005b8e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a005b92:	4291      	cmp	r1, r2
1a005b94:	d0f6      	beq.n	1a005b84 <_vfprintf_r+0x1924>
1a005b96:	2a39      	cmp	r2, #57	; 0x39
1a005b98:	bf0b      	itete	eq
1a005b9a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a005b9c:	3201      	addne	r2, #1
1a005b9e:	7a92      	ldrbeq	r2, [r2, #10]
1a005ba0:	b2d2      	uxtbne	r2, r2
1a005ba2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a005ba6:	f7ff bb6e 	b.w	1a005286 <_vfprintf_r+0x1026>
1a005baa:	2330      	movs	r3, #48	; 0x30
1a005bac:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005bb0:	2378      	movs	r3, #120	; 0x78
1a005bb2:	e53e      	b.n	1a005632 <_vfprintf_r+0x13d2>
1a005bb4:	f109 0101 	add.w	r1, r9, #1
1a005bb8:	9805      	ldr	r0, [sp, #20]
1a005bba:	f7fd fe7b 	bl	1a0038b4 <_malloc_r>
1a005bbe:	4607      	mov	r7, r0
1a005bc0:	2800      	cmp	r0, #0
1a005bc2:	f000 80d5 	beq.w	1a005d70 <_vfprintf_r+0x1b10>
1a005bc6:	9009      	str	r0, [sp, #36]	; 0x24
1a005bc8:	e540      	b.n	1a00564c <_vfprintf_r+0x13ec>
1a005bca:	4621      	mov	r1, r4
1a005bcc:	461c      	mov	r4, r3
1a005bce:	460b      	mov	r3, r1
1a005bd0:	3201      	adds	r2, #1
1a005bd2:	442c      	add	r4, r5
1a005bd4:	2a07      	cmp	r2, #7
1a005bd6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a005bda:	e9cb 3500 	strd	r3, r5, [fp]
1a005bde:	f77f aaea 	ble.w	1a0051b6 <_vfprintf_r+0xf56>
1a005be2:	aa28      	add	r2, sp, #160	; 0xa0
1a005be4:	9907      	ldr	r1, [sp, #28]
1a005be6:	9805      	ldr	r0, [sp, #20]
1a005be8:	f002 f976 	bl	1a007ed8 <__sprint_r>
1a005bec:	2800      	cmp	r0, #0
1a005bee:	f47f a8cf 	bne.w	1a004d90 <_vfprintf_r+0xb30>
1a005bf2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a005bf6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005bfa:	f7ff b8df 	b.w	1a004dbc <_vfprintf_r+0xb5c>
1a005bfe:	f109 0401 	add.w	r4, r9, #1
1a005c02:	a926      	add	r1, sp, #152	; 0x98
1a005c04:	ab23      	add	r3, sp, #140	; 0x8c
1a005c06:	e9cd 3100 	strd	r3, r1, [sp]
1a005c0a:	4622      	mov	r2, r4
1a005c0c:	ab22      	add	r3, sp, #136	; 0x88
1a005c0e:	2102      	movs	r1, #2
1a005c10:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005c14:	9805      	ldr	r0, [sp, #20]
1a005c16:	f000 fa0b 	bl	1a006030 <_dtoa_r>
1a005c1a:	4607      	mov	r7, r0
1a005c1c:	443c      	add	r4, r7
1a005c1e:	e70c      	b.n	1a005a3a <_vfprintf_r+0x17da>
1a005c20:	f04f 0906 	mov.w	r9, #6
1a005c24:	f7ff bb03 	b.w	1a00522e <_vfprintf_r+0xfce>
1a005c28:	a822      	add	r0, sp, #136	; 0x88
1a005c2a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005c2e:	f002 f8a7 	bl	1a007d80 <frexp>
1a005c32:	2200      	movs	r2, #0
1a005c34:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a005c38:	ec51 0b10 	vmov	r0, r1, d0
1a005c3c:	f7fc fe92 	bl	1a002964 <__aeabi_dmul>
1a005c40:	2200      	movs	r2, #0
1a005c42:	2300      	movs	r3, #0
1a005c44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a005c48:	f7fd f8f4 	bl	1a002e34 <__aeabi_dcmpeq>
1a005c4c:	b108      	cbz	r0, 1a005c52 <_vfprintf_r+0x19f2>
1a005c4e:	2301      	movs	r3, #1
1a005c50:	9322      	str	r3, [sp, #136]	; 0x88
1a005c52:	4b55      	ldr	r3, [pc, #340]	; (1a005da8 <_vfprintf_r+0x1b48>)
1a005c54:	930b      	str	r3, [sp, #44]	; 0x2c
1a005c56:	e529      	b.n	1a0056ac <_vfprintf_r+0x144c>
1a005c58:	2900      	cmp	r1, #0
1a005c5a:	d17b      	bne.n	1a005d54 <_vfprintf_r+0x1af4>
1a005c5c:	2330      	movs	r3, #48	; 0x30
1a005c5e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a005c62:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a005c66:	3230      	adds	r2, #48	; 0x30
1a005c68:	f803 2b01 	strb.w	r2, [r3], #1
1a005c6c:	aa24      	add	r2, sp, #144	; 0x90
1a005c6e:	1a9b      	subs	r3, r3, r2
1a005c70:	9316      	str	r3, [sp, #88]	; 0x58
1a005c72:	f7ff bb61 	b.w	1a005338 <_vfprintf_r+0x10d8>
1a005c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005c78:	4f4c      	ldr	r7, [pc, #304]	; (1a005dac <_vfprintf_r+0x1b4c>)
1a005c7a:	2b00      	cmp	r3, #0
1a005c7c:	bfb6      	itet	lt
1a005c7e:	222d      	movlt	r2, #45	; 0x2d
1a005c80:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a005c84:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a005c88:	4b49      	ldr	r3, [pc, #292]	; (1a005db0 <_vfprintf_r+0x1b50>)
1a005c8a:	f7fe beec 	b.w	1a004a66 <_vfprintf_r+0x806>
1a005c8e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a005c90:	e5ab      	b.n	1a0057ea <_vfprintf_r+0x158a>
1a005c92:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005c96:	9818      	ldr	r0, [sp, #96]	; 0x60
1a005c98:	2200      	movs	r2, #0
1a005c9a:	920c      	str	r2, [sp, #48]	; 0x30
1a005c9c:	920f      	str	r2, [sp, #60]	; 0x3c
1a005c9e:	7803      	ldrb	r3, [r0, #0]
1a005ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a005ca2:	2bff      	cmp	r3, #255	; 0xff
1a005ca4:	d00c      	beq.n	1a005cc0 <_vfprintf_r+0x1a60>
1a005ca6:	4293      	cmp	r3, r2
1a005ca8:	da0a      	bge.n	1a005cc0 <_vfprintf_r+0x1a60>
1a005caa:	7841      	ldrb	r1, [r0, #1]
1a005cac:	1ad2      	subs	r2, r2, r3
1a005cae:	b1a1      	cbz	r1, 1a005cda <_vfprintf_r+0x1a7a>
1a005cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005cb2:	3301      	adds	r3, #1
1a005cb4:	930f      	str	r3, [sp, #60]	; 0x3c
1a005cb6:	460b      	mov	r3, r1
1a005cb8:	2bff      	cmp	r3, #255	; 0xff
1a005cba:	f100 0001 	add.w	r0, r0, #1
1a005cbe:	d1f2      	bne.n	1a005ca6 <_vfprintf_r+0x1a46>
1a005cc0:	920e      	str	r2, [sp, #56]	; 0x38
1a005cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005cc6:	9018      	str	r0, [sp, #96]	; 0x60
1a005cc8:	4413      	add	r3, r2
1a005cca:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a005ccc:	fb02 6603 	mla	r6, r2, r3, r6
1a005cd0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005cd4:	9303      	str	r3, [sp, #12]
1a005cd6:	f7ff bb45 	b.w	1a005364 <_vfprintf_r+0x1104>
1a005cda:	990c      	ldr	r1, [sp, #48]	; 0x30
1a005cdc:	3101      	adds	r1, #1
1a005cde:	910c      	str	r1, [sp, #48]	; 0x30
1a005ce0:	e7df      	b.n	1a005ca2 <_vfprintf_r+0x1a42>
1a005ce2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005ce4:	18d6      	adds	r6, r2, r3
1a005ce6:	444e      	add	r6, r9
1a005ce8:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005cec:	e6e3      	b.n	1a005ab6 <_vfprintf_r+0x1856>
1a005cee:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005cf2:	f7ff b8ec 	b.w	1a004ece <_vfprintf_r+0xc6e>
1a005cf6:	2200      	movs	r2, #0
1a005cf8:	2300      	movs	r3, #0
1a005cfa:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a005cfe:	f7fd f899 	bl	1a002e34 <__aeabi_dcmpeq>
1a005d02:	2800      	cmp	r0, #0
1a005d04:	f47f ae96 	bne.w	1a005a34 <_vfprintf_r+0x17d4>
1a005d08:	f1c9 0301 	rsb	r3, r9, #1
1a005d0c:	9322      	str	r3, [sp, #136]	; 0x88
1a005d0e:	e692      	b.n	1a005a36 <_vfprintf_r+0x17d6>
1a005d10:	f1c3 0301 	rsb	r3, r3, #1
1a005d14:	441e      	add	r6, r3
1a005d16:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005d1a:	9303      	str	r3, [sp, #12]
1a005d1c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005d20:	e56f      	b.n	1a005802 <_vfprintf_r+0x15a2>
1a005d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005d24:	07dd      	lsls	r5, r3, #31
1a005d26:	f57f ab10 	bpl.w	1a00534a <_vfprintf_r+0x10ea>
1a005d2a:	f7ff bb0c 	b.w	1a005346 <_vfprintf_r+0x10e6>
1a005d2e:	b92b      	cbnz	r3, 1a005d3c <_vfprintf_r+0x1adc>
1a005d30:	2301      	movs	r3, #1
1a005d32:	9303      	str	r3, [sp, #12]
1a005d34:	461e      	mov	r6, r3
1a005d36:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005d3a:	e562      	b.n	1a005802 <_vfprintf_r+0x15a2>
1a005d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005d3e:	1c5e      	adds	r6, r3, #1
1a005d40:	444e      	add	r6, r9
1a005d42:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005d46:	9303      	str	r3, [sp, #12]
1a005d48:	f04f 0866 	mov.w	r8, #102	; 0x66
1a005d4c:	e559      	b.n	1a005802 <_vfprintf_r+0x15a2>
1a005d4e:	465a      	mov	r2, fp
1a005d50:	f7ff bb3f 	b.w	1a0053d2 <_vfprintf_r+0x1172>
1a005d54:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a005d58:	e785      	b.n	1a005c66 <_vfprintf_r+0x1a06>
1a005d5a:	9b08      	ldr	r3, [sp, #32]
1a005d5c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005d60:	f853 0b04 	ldr.w	r0, [r3], #4
1a005d64:	9308      	str	r3, [sp, #32]
1a005d66:	4692      	mov	sl, r2
1a005d68:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a005d6c:	f7fe bafc 	b.w	1a004368 <_vfprintf_r+0x108>
1a005d70:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005d74:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a005d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005d7c:	f8a9 300c 	strh.w	r3, [r9, #12]
1a005d80:	f7ff b8a5 	b.w	1a004ece <_vfprintf_r+0xc6e>
1a005d84:	461e      	mov	r6, r3
1a005d86:	f7fe bc15 	b.w	1a0045b4 <_vfprintf_r+0x354>
1a005d8a:	461e      	mov	r6, r3
1a005d8c:	f7fe bc5e 	b.w	1a00464c <_vfprintf_r+0x3ec>
1a005d90:	461e      	mov	r6, r3
1a005d92:	f7fe bc48 	b.w	1a004626 <_vfprintf_r+0x3c6>
1a005d96:	464c      	mov	r4, r9
1a005d98:	443c      	add	r4, r7
1a005d9a:	e64e      	b.n	1a005a3a <_vfprintf_r+0x17da>
1a005d9c:	2302      	movs	r3, #2
1a005d9e:	9316      	str	r3, [sp, #88]	; 0x58
1a005da0:	f7ff baca 	b.w	1a005338 <_vfprintf_r+0x10d8>
1a005da4:	1a00877c 	.word	0x1a00877c
1a005da8:	1a00874c 	.word	0x1a00874c
1a005dac:	1a008730 	.word	0x1a008730
1a005db0:	1a008734 	.word	0x1a008734

1a005db4 <__sbprintf>:
1a005db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005db8:	460c      	mov	r4, r1
1a005dba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a005dbe:	8989      	ldrh	r1, [r1, #12]
1a005dc0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a005dc2:	89e5      	ldrh	r5, [r4, #14]
1a005dc4:	9619      	str	r6, [sp, #100]	; 0x64
1a005dc6:	f021 0102 	bic.w	r1, r1, #2
1a005dca:	4606      	mov	r6, r0
1a005dcc:	69e0      	ldr	r0, [r4, #28]
1a005dce:	f8ad 100c 	strh.w	r1, [sp, #12]
1a005dd2:	4617      	mov	r7, r2
1a005dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a005dd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a005dda:	f8ad 500e 	strh.w	r5, [sp, #14]
1a005dde:	4698      	mov	r8, r3
1a005de0:	ad1a      	add	r5, sp, #104	; 0x68
1a005de2:	2300      	movs	r3, #0
1a005de4:	9007      	str	r0, [sp, #28]
1a005de6:	a816      	add	r0, sp, #88	; 0x58
1a005de8:	9209      	str	r2, [sp, #36]	; 0x24
1a005dea:	9306      	str	r3, [sp, #24]
1a005dec:	9500      	str	r5, [sp, #0]
1a005dee:	9504      	str	r5, [sp, #16]
1a005df0:	9102      	str	r1, [sp, #8]
1a005df2:	9105      	str	r1, [sp, #20]
1a005df4:	f7fd fd56 	bl	1a0038a4 <__retarget_lock_init_recursive>
1a005df8:	4643      	mov	r3, r8
1a005dfa:	463a      	mov	r2, r7
1a005dfc:	4669      	mov	r1, sp
1a005dfe:	4630      	mov	r0, r6
1a005e00:	f7fe fa2e 	bl	1a004260 <_vfprintf_r>
1a005e04:	1e05      	subs	r5, r0, #0
1a005e06:	db07      	blt.n	1a005e18 <__sbprintf+0x64>
1a005e08:	4630      	mov	r0, r6
1a005e0a:	4669      	mov	r1, sp
1a005e0c:	f7fd fb24 	bl	1a003458 <_fflush_r>
1a005e10:	2800      	cmp	r0, #0
1a005e12:	bf18      	it	ne
1a005e14:	f04f 35ff 	movne.w	r5, #4294967295
1a005e18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a005e1c:	065b      	lsls	r3, r3, #25
1a005e1e:	d503      	bpl.n	1a005e28 <__sbprintf+0x74>
1a005e20:	89a3      	ldrh	r3, [r4, #12]
1a005e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005e26:	81a3      	strh	r3, [r4, #12]
1a005e28:	9816      	ldr	r0, [sp, #88]	; 0x58
1a005e2a:	f7fd fd3d 	bl	1a0038a8 <__retarget_lock_close_recursive>
1a005e2e:	4628      	mov	r0, r5
1a005e30:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a005e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a005e38 <__swsetup_r>:
1a005e38:	b538      	push	{r3, r4, r5, lr}
1a005e3a:	4b32      	ldr	r3, [pc, #200]	; (1a005f04 <__swsetup_r+0xcc>)
1a005e3c:	681b      	ldr	r3, [r3, #0]
1a005e3e:	4605      	mov	r5, r0
1a005e40:	460c      	mov	r4, r1
1a005e42:	b10b      	cbz	r3, 1a005e48 <__swsetup_r+0x10>
1a005e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a005e46:	b312      	cbz	r2, 1a005e8e <__swsetup_r+0x56>
1a005e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005e4c:	b293      	uxth	r3, r2
1a005e4e:	0718      	lsls	r0, r3, #28
1a005e50:	d525      	bpl.n	1a005e9e <__swsetup_r+0x66>
1a005e52:	6920      	ldr	r0, [r4, #16]
1a005e54:	2800      	cmp	r0, #0
1a005e56:	d02d      	beq.n	1a005eb4 <__swsetup_r+0x7c>
1a005e58:	f013 0201 	ands.w	r2, r3, #1
1a005e5c:	d007      	beq.n	1a005e6e <__swsetup_r+0x36>
1a005e5e:	6963      	ldr	r3, [r4, #20]
1a005e60:	2200      	movs	r2, #0
1a005e62:	425b      	negs	r3, r3
1a005e64:	61a3      	str	r3, [r4, #24]
1a005e66:	60a2      	str	r2, [r4, #8]
1a005e68:	b138      	cbz	r0, 1a005e7a <__swsetup_r+0x42>
1a005e6a:	2000      	movs	r0, #0
1a005e6c:	bd38      	pop	{r3, r4, r5, pc}
1a005e6e:	0799      	lsls	r1, r3, #30
1a005e70:	bf58      	it	pl
1a005e72:	6962      	ldrpl	r2, [r4, #20]
1a005e74:	60a2      	str	r2, [r4, #8]
1a005e76:	2800      	cmp	r0, #0
1a005e78:	d1f7      	bne.n	1a005e6a <__swsetup_r+0x32>
1a005e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005e7e:	061a      	lsls	r2, r3, #24
1a005e80:	d5f4      	bpl.n	1a005e6c <__swsetup_r+0x34>
1a005e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005e86:	81a3      	strh	r3, [r4, #12]
1a005e88:	f04f 30ff 	mov.w	r0, #4294967295
1a005e8c:	bd38      	pop	{r3, r4, r5, pc}
1a005e8e:	4618      	mov	r0, r3
1a005e90:	f7fd fb3e 	bl	1a003510 <__sinit>
1a005e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005e98:	b293      	uxth	r3, r2
1a005e9a:	0718      	lsls	r0, r3, #28
1a005e9c:	d4d9      	bmi.n	1a005e52 <__swsetup_r+0x1a>
1a005e9e:	06d9      	lsls	r1, r3, #27
1a005ea0:	d528      	bpl.n	1a005ef4 <__swsetup_r+0xbc>
1a005ea2:	0758      	lsls	r0, r3, #29
1a005ea4:	d412      	bmi.n	1a005ecc <__swsetup_r+0x94>
1a005ea6:	6920      	ldr	r0, [r4, #16]
1a005ea8:	f042 0308 	orr.w	r3, r2, #8
1a005eac:	81a3      	strh	r3, [r4, #12]
1a005eae:	b29b      	uxth	r3, r3
1a005eb0:	2800      	cmp	r0, #0
1a005eb2:	d1d1      	bne.n	1a005e58 <__swsetup_r+0x20>
1a005eb4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a005eb8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a005ebc:	d0cc      	beq.n	1a005e58 <__swsetup_r+0x20>
1a005ebe:	4628      	mov	r0, r5
1a005ec0:	4621      	mov	r1, r4
1a005ec2:	f001 f995 	bl	1a0071f0 <__smakebuf_r>
1a005ec6:	89a3      	ldrh	r3, [r4, #12]
1a005ec8:	6920      	ldr	r0, [r4, #16]
1a005eca:	e7c5      	b.n	1a005e58 <__swsetup_r+0x20>
1a005ecc:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005ece:	b151      	cbz	r1, 1a005ee6 <__swsetup_r+0xae>
1a005ed0:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005ed4:	4299      	cmp	r1, r3
1a005ed6:	d004      	beq.n	1a005ee2 <__swsetup_r+0xaa>
1a005ed8:	4628      	mov	r0, r5
1a005eda:	f7fd fb9f 	bl	1a00361c <_free_r>
1a005ede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005ee2:	2300      	movs	r3, #0
1a005ee4:	6323      	str	r3, [r4, #48]	; 0x30
1a005ee6:	2300      	movs	r3, #0
1a005ee8:	6920      	ldr	r0, [r4, #16]
1a005eea:	6063      	str	r3, [r4, #4]
1a005eec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a005ef0:	6020      	str	r0, [r4, #0]
1a005ef2:	e7d9      	b.n	1a005ea8 <__swsetup_r+0x70>
1a005ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a005ef8:	2309      	movs	r3, #9
1a005efa:	602b      	str	r3, [r5, #0]
1a005efc:	f04f 30ff 	mov.w	r0, #4294967295
1a005f00:	81a2      	strh	r2, [r4, #12]
1a005f02:	bd38      	pop	{r3, r4, r5, pc}
1a005f04:	10000048 	.word	0x10000048

1a005f08 <quorem>:
1a005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005f0c:	6903      	ldr	r3, [r0, #16]
1a005f0e:	690f      	ldr	r7, [r1, #16]
1a005f10:	42bb      	cmp	r3, r7
1a005f12:	b083      	sub	sp, #12
1a005f14:	f2c0 8086 	blt.w	1a006024 <quorem+0x11c>
1a005f18:	3f01      	subs	r7, #1
1a005f1a:	f101 0614 	add.w	r6, r1, #20
1a005f1e:	f100 0a14 	add.w	sl, r0, #20
1a005f22:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a005f26:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a005f2a:	00bc      	lsls	r4, r7, #2
1a005f2c:	3301      	adds	r3, #1
1a005f2e:	9400      	str	r4, [sp, #0]
1a005f30:	eb06 0904 	add.w	r9, r6, r4
1a005f34:	429a      	cmp	r2, r3
1a005f36:	4454      	add	r4, sl
1a005f38:	fbb2 f8f3 	udiv	r8, r2, r3
1a005f3c:	9401      	str	r4, [sp, #4]
1a005f3e:	d33a      	bcc.n	1a005fb6 <quorem+0xae>
1a005f40:	2500      	movs	r5, #0
1a005f42:	462a      	mov	r2, r5
1a005f44:	46b6      	mov	lr, r6
1a005f46:	46d4      	mov	ip, sl
1a005f48:	f85e 4b04 	ldr.w	r4, [lr], #4
1a005f4c:	f8dc 3000 	ldr.w	r3, [ip]
1a005f50:	fa1f fb84 	uxth.w	fp, r4
1a005f54:	fb08 550b 	mla	r5, r8, fp, r5
1a005f58:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a005f5c:	0c24      	lsrs	r4, r4, #16
1a005f5e:	fb08 b404 	mla	r4, r8, r4, fp
1a005f62:	b2ad      	uxth	r5, r5
1a005f64:	1b55      	subs	r5, r2, r5
1a005f66:	b2a2      	uxth	r2, r4
1a005f68:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a005f6c:	fa15 f383 	uxtah	r3, r5, r3
1a005f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a005f74:	b29b      	uxth	r3, r3
1a005f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a005f7a:	45f1      	cmp	r9, lr
1a005f7c:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a005f80:	f84c 3b04 	str.w	r3, [ip], #4
1a005f84:	ea4f 4222 	mov.w	r2, r2, asr #16
1a005f88:	d2de      	bcs.n	1a005f48 <quorem+0x40>
1a005f8a:	9b00      	ldr	r3, [sp, #0]
1a005f8c:	f85a 3003 	ldr.w	r3, [sl, r3]
1a005f90:	b98b      	cbnz	r3, 1a005fb6 <quorem+0xae>
1a005f92:	9a01      	ldr	r2, [sp, #4]
1a005f94:	1f13      	subs	r3, r2, #4
1a005f96:	459a      	cmp	sl, r3
1a005f98:	d20c      	bcs.n	1a005fb4 <quorem+0xac>
1a005f9a:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a005f9e:	b94b      	cbnz	r3, 1a005fb4 <quorem+0xac>
1a005fa0:	f1a2 0308 	sub.w	r3, r2, #8
1a005fa4:	e002      	b.n	1a005fac <quorem+0xa4>
1a005fa6:	681a      	ldr	r2, [r3, #0]
1a005fa8:	3b04      	subs	r3, #4
1a005faa:	b91a      	cbnz	r2, 1a005fb4 <quorem+0xac>
1a005fac:	459a      	cmp	sl, r3
1a005fae:	f107 37ff 	add.w	r7, r7, #4294967295
1a005fb2:	d3f8      	bcc.n	1a005fa6 <quorem+0x9e>
1a005fb4:	6107      	str	r7, [r0, #16]
1a005fb6:	4604      	mov	r4, r0
1a005fb8:	f001 fc34 	bl	1a007824 <__mcmp>
1a005fbc:	2800      	cmp	r0, #0
1a005fbe:	db2d      	blt.n	1a00601c <quorem+0x114>
1a005fc0:	f108 0801 	add.w	r8, r8, #1
1a005fc4:	4650      	mov	r0, sl
1a005fc6:	2300      	movs	r3, #0
1a005fc8:	f856 1b04 	ldr.w	r1, [r6], #4
1a005fcc:	6805      	ldr	r5, [r0, #0]
1a005fce:	b28a      	uxth	r2, r1
1a005fd0:	1a9a      	subs	r2, r3, r2
1a005fd2:	0c0b      	lsrs	r3, r1, #16
1a005fd4:	fa12 f285 	uxtah	r2, r2, r5
1a005fd8:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a005fdc:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a005fe0:	b292      	uxth	r2, r2
1a005fe2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a005fe6:	45b1      	cmp	r9, r6
1a005fe8:	f840 2b04 	str.w	r2, [r0], #4
1a005fec:	ea4f 4323 	mov.w	r3, r3, asr #16
1a005ff0:	d2ea      	bcs.n	1a005fc8 <quorem+0xc0>
1a005ff2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a005ff6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a005ffa:	b97a      	cbnz	r2, 1a00601c <quorem+0x114>
1a005ffc:	1f1a      	subs	r2, r3, #4
1a005ffe:	4592      	cmp	sl, r2
1a006000:	d20b      	bcs.n	1a00601a <quorem+0x112>
1a006002:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a006006:	b942      	cbnz	r2, 1a00601a <quorem+0x112>
1a006008:	3b08      	subs	r3, #8
1a00600a:	e002      	b.n	1a006012 <quorem+0x10a>
1a00600c:	681a      	ldr	r2, [r3, #0]
1a00600e:	3b04      	subs	r3, #4
1a006010:	b91a      	cbnz	r2, 1a00601a <quorem+0x112>
1a006012:	459a      	cmp	sl, r3
1a006014:	f107 37ff 	add.w	r7, r7, #4294967295
1a006018:	d3f8      	bcc.n	1a00600c <quorem+0x104>
1a00601a:	6127      	str	r7, [r4, #16]
1a00601c:	4640      	mov	r0, r8
1a00601e:	b003      	add	sp, #12
1a006020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006024:	2000      	movs	r0, #0
1a006026:	b003      	add	sp, #12
1a006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00602c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a006030 <_dtoa_r>:
1a006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006034:	ec57 6b10 	vmov	r6, r7, d0
1a006038:	b097      	sub	sp, #92	; 0x5c
1a00603a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a00603c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a00603e:	9102      	str	r1, [sp, #8]
1a006040:	4682      	mov	sl, r0
1a006042:	920a      	str	r2, [sp, #40]	; 0x28
1a006044:	9307      	str	r3, [sp, #28]
1a006046:	e9cd 6700 	strd	r6, r7, [sp]
1a00604a:	b155      	cbz	r5, 1a006062 <_dtoa_r+0x32>
1a00604c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a00604e:	606a      	str	r2, [r5, #4]
1a006050:	2301      	movs	r3, #1
1a006052:	4093      	lsls	r3, r2
1a006054:	60ab      	str	r3, [r5, #8]
1a006056:	4629      	mov	r1, r5
1a006058:	f001 f9f8 	bl	1a00744c <_Bfree>
1a00605c:	2300      	movs	r3, #0
1a00605e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a006062:	1e3e      	subs	r6, r7, #0
1a006064:	bfb4      	ite	lt
1a006066:	2301      	movlt	r3, #1
1a006068:	2300      	movge	r3, #0
1a00606a:	6023      	str	r3, [r4, #0]
1a00606c:	4b76      	ldr	r3, [pc, #472]	; (1a006248 <_dtoa_r+0x218>)
1a00606e:	bfbc      	itt	lt
1a006070:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a006074:	9601      	strlt	r6, [sp, #4]
1a006076:	43b3      	bics	r3, r6
1a006078:	f000 80ae 	beq.w	1a0061d8 <_dtoa_r+0x1a8>
1a00607c:	ed9d 7b00 	vldr	d7, [sp]
1a006080:	2200      	movs	r2, #0
1a006082:	2300      	movs	r3, #0
1a006084:	ec51 0b17 	vmov	r0, r1, d7
1a006088:	ed8d 7b04 	vstr	d7, [sp, #16]
1a00608c:	f7fc fed2 	bl	1a002e34 <__aeabi_dcmpeq>
1a006090:	4605      	mov	r5, r0
1a006092:	b178      	cbz	r0, 1a0060b4 <_dtoa_r+0x84>
1a006094:	9a07      	ldr	r2, [sp, #28]
1a006096:	2301      	movs	r3, #1
1a006098:	6013      	str	r3, [r2, #0]
1a00609a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00609c:	2b00      	cmp	r3, #0
1a00609e:	f000 8313 	beq.w	1a0066c8 <_dtoa_r+0x698>
1a0060a2:	4b6a      	ldr	r3, [pc, #424]	; (1a00624c <_dtoa_r+0x21c>)
1a0060a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0060a6:	6013      	str	r3, [r2, #0]
1a0060a8:	3b01      	subs	r3, #1
1a0060aa:	9303      	str	r3, [sp, #12]
1a0060ac:	9803      	ldr	r0, [sp, #12]
1a0060ae:	b017      	add	sp, #92	; 0x5c
1a0060b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0060b4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a0060b8:	aa14      	add	r2, sp, #80	; 0x50
1a0060ba:	a915      	add	r1, sp, #84	; 0x54
1a0060bc:	ec48 7b10 	vmov	d0, r7, r8
1a0060c0:	4650      	mov	r0, sl
1a0060c2:	f001 fc47 	bl	1a007954 <__d2b>
1a0060c6:	0d34      	lsrs	r4, r6, #20
1a0060c8:	4683      	mov	fp, r0
1a0060ca:	f040 809b 	bne.w	1a006204 <_dtoa_r+0x1d4>
1a0060ce:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a0060d2:	442c      	add	r4, r5
1a0060d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a0060d8:	2b20      	cmp	r3, #32
1a0060da:	f340 83bb 	ble.w	1a006854 <_dtoa_r+0x824>
1a0060de:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a0060e2:	409e      	lsls	r6, r3
1a0060e4:	9b00      	ldr	r3, [sp, #0]
1a0060e6:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a0060ea:	fa23 f000 	lsr.w	r0, r3, r0
1a0060ee:	4330      	orrs	r0, r6
1a0060f0:	f7fc fbbe 	bl	1a002870 <__aeabi_ui2d>
1a0060f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a0060f8:	2101      	movs	r1, #1
1a0060fa:	4602      	mov	r2, r0
1a0060fc:	3c01      	subs	r4, #1
1a0060fe:	910e      	str	r1, [sp, #56]	; 0x38
1a006100:	4610      	mov	r0, r2
1a006102:	4619      	mov	r1, r3
1a006104:	2200      	movs	r2, #0
1a006106:	4b52      	ldr	r3, [pc, #328]	; (1a006250 <_dtoa_r+0x220>)
1a006108:	f7fc fa74 	bl	1a0025f4 <__aeabi_dsub>
1a00610c:	a348      	add	r3, pc, #288	; (adr r3, 1a006230 <_dtoa_r+0x200>)
1a00610e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006112:	f7fc fc27 	bl	1a002964 <__aeabi_dmul>
1a006116:	a348      	add	r3, pc, #288	; (adr r3, 1a006238 <_dtoa_r+0x208>)
1a006118:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00611c:	f7fc fa6c 	bl	1a0025f8 <__adddf3>
1a006120:	4606      	mov	r6, r0
1a006122:	4620      	mov	r0, r4
1a006124:	460f      	mov	r7, r1
1a006126:	f7fc fbb3 	bl	1a002890 <__aeabi_i2d>
1a00612a:	a345      	add	r3, pc, #276	; (adr r3, 1a006240 <_dtoa_r+0x210>)
1a00612c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006130:	f7fc fc18 	bl	1a002964 <__aeabi_dmul>
1a006134:	4602      	mov	r2, r0
1a006136:	460b      	mov	r3, r1
1a006138:	4630      	mov	r0, r6
1a00613a:	4639      	mov	r1, r7
1a00613c:	f7fc fa5c 	bl	1a0025f8 <__adddf3>
1a006140:	4606      	mov	r6, r0
1a006142:	460f      	mov	r7, r1
1a006144:	f002 f836 	bl	1a0081b4 <__aeabi_d2iz>
1a006148:	2200      	movs	r2, #0
1a00614a:	4681      	mov	r9, r0
1a00614c:	2300      	movs	r3, #0
1a00614e:	4630      	mov	r0, r6
1a006150:	4639      	mov	r1, r7
1a006152:	f7fc fe79 	bl	1a002e48 <__aeabi_dcmplt>
1a006156:	2800      	cmp	r0, #0
1a006158:	f040 82a9 	bne.w	1a0066ae <_dtoa_r+0x67e>
1a00615c:	1b2c      	subs	r4, r5, r4
1a00615e:	f1b9 0f16 	cmp.w	r9, #22
1a006162:	f104 38ff 	add.w	r8, r4, #4294967295
1a006166:	f200 8296 	bhi.w	1a006696 <_dtoa_r+0x666>
1a00616a:	4b3a      	ldr	r3, [pc, #232]	; (1a006254 <_dtoa_r+0x224>)
1a00616c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a006170:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a006178:	f7fc fe66 	bl	1a002e48 <__aeabi_dcmplt>
1a00617c:	2800      	cmp	r0, #0
1a00617e:	d06f      	beq.n	1a006260 <_dtoa_r+0x230>
1a006180:	2300      	movs	r3, #0
1a006182:	f1b8 0f00 	cmp.w	r8, #0
1a006186:	f109 39ff 	add.w	r9, r9, #4294967295
1a00618a:	930d      	str	r3, [sp, #52]	; 0x34
1a00618c:	f2c0 8289 	blt.w	1a0066a2 <_dtoa_r+0x672>
1a006190:	2300      	movs	r3, #0
1a006192:	9308      	str	r3, [sp, #32]
1a006194:	f1b9 0f00 	cmp.w	r9, #0
1a006198:	da68      	bge.n	1a00626c <_dtoa_r+0x23c>
1a00619a:	9b08      	ldr	r3, [sp, #32]
1a00619c:	f8cd 9018 	str.w	r9, [sp, #24]
1a0061a0:	eba3 0309 	sub.w	r3, r3, r9
1a0061a4:	9308      	str	r3, [sp, #32]
1a0061a6:	f1c9 0300 	rsb	r3, r9, #0
1a0061aa:	930c      	str	r3, [sp, #48]	; 0x30
1a0061ac:	9b02      	ldr	r3, [sp, #8]
1a0061ae:	2b09      	cmp	r3, #9
1a0061b0:	f04f 0900 	mov.w	r9, #0
1a0061b4:	d862      	bhi.n	1a00627c <_dtoa_r+0x24c>
1a0061b6:	2b05      	cmp	r3, #5
1a0061b8:	f340 834a 	ble.w	1a006850 <_dtoa_r+0x820>
1a0061bc:	3b04      	subs	r3, #4
1a0061be:	9302      	str	r3, [sp, #8]
1a0061c0:	2400      	movs	r4, #0
1a0061c2:	9b02      	ldr	r3, [sp, #8]
1a0061c4:	3b02      	subs	r3, #2
1a0061c6:	2b03      	cmp	r3, #3
1a0061c8:	f200 8641 	bhi.w	1a006e4e <_dtoa_r+0xe1e>
1a0061cc:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0061d0:	04630466 	.word	0x04630466
1a0061d4:	0456043b 	.word	0x0456043b
1a0061d8:	9a07      	ldr	r2, [sp, #28]
1a0061da:	f242 730f 	movw	r3, #9999	; 0x270f
1a0061de:	6013      	str	r3, [r2, #0]
1a0061e0:	9b00      	ldr	r3, [sp, #0]
1a0061e2:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a0061e6:	4333      	orrs	r3, r6
1a0061e8:	d118      	bne.n	1a00621c <_dtoa_r+0x1ec>
1a0061ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0061ec:	2b00      	cmp	r3, #0
1a0061ee:	f000 8625 	beq.w	1a006e3c <_dtoa_r+0xe0c>
1a0061f2:	4b19      	ldr	r3, [pc, #100]	; (1a006258 <_dtoa_r+0x228>)
1a0061f4:	9303      	str	r3, [sp, #12]
1a0061f6:	3308      	adds	r3, #8
1a0061f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0061fa:	9803      	ldr	r0, [sp, #12]
1a0061fc:	6013      	str	r3, [r2, #0]
1a0061fe:	b017      	add	sp, #92	; 0x5c
1a006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006204:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a006208:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a00620c:	950e      	str	r5, [sp, #56]	; 0x38
1a00620e:	463a      	mov	r2, r7
1a006210:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a006214:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a006218:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a00621a:	e771      	b.n	1a006100 <_dtoa_r+0xd0>
1a00621c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00621e:	2b00      	cmp	r3, #0
1a006220:	f040 8400 	bne.w	1a006a24 <_dtoa_r+0x9f4>
1a006224:	4b0d      	ldr	r3, [pc, #52]	; (1a00625c <_dtoa_r+0x22c>)
1a006226:	9303      	str	r3, [sp, #12]
1a006228:	e740      	b.n	1a0060ac <_dtoa_r+0x7c>
1a00622a:	bf00      	nop
1a00622c:	f3af 8000 	nop.w
1a006230:	636f4361 	.word	0x636f4361
1a006234:	3fd287a7 	.word	0x3fd287a7
1a006238:	8b60c8b3 	.word	0x8b60c8b3
1a00623c:	3fc68a28 	.word	0x3fc68a28
1a006240:	509f79fb 	.word	0x509f79fb
1a006244:	3fd34413 	.word	0x3fd34413
1a006248:	7ff00000 	.word	0x7ff00000
1a00624c:	1a008769 	.word	0x1a008769
1a006250:	3ff80000 	.word	0x3ff80000
1a006254:	1a0087c8 	.word	0x1a0087c8
1a006258:	1a008790 	.word	0x1a008790
1a00625c:	1a00878c 	.word	0x1a00878c
1a006260:	f1b8 0f00 	cmp.w	r8, #0
1a006264:	f2c0 84b6 	blt.w	1a006bd4 <_dtoa_r+0xba4>
1a006268:	900d      	str	r0, [sp, #52]	; 0x34
1a00626a:	9008      	str	r0, [sp, #32]
1a00626c:	2300      	movs	r3, #0
1a00626e:	930c      	str	r3, [sp, #48]	; 0x30
1a006270:	9b02      	ldr	r3, [sp, #8]
1a006272:	f8cd 9018 	str.w	r9, [sp, #24]
1a006276:	2b09      	cmp	r3, #9
1a006278:	44c8      	add	r8, r9
1a00627a:	d99c      	bls.n	1a0061b6 <_dtoa_r+0x186>
1a00627c:	2300      	movs	r3, #0
1a00627e:	2401      	movs	r4, #1
1a006280:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a006284:	f04f 35ff 	mov.w	r5, #4294967295
1a006288:	9302      	str	r3, [sp, #8]
1a00628a:	9509      	str	r5, [sp, #36]	; 0x24
1a00628c:	2100      	movs	r1, #0
1a00628e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a006292:	950f      	str	r5, [sp, #60]	; 0x3c
1a006294:	4650      	mov	r0, sl
1a006296:	f001 f8b3 	bl	1a007400 <_Balloc>
1a00629a:	2d0e      	cmp	r5, #14
1a00629c:	9003      	str	r0, [sp, #12]
1a00629e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a0062a2:	f200 810a 	bhi.w	1a0064ba <_dtoa_r+0x48a>
1a0062a6:	2c00      	cmp	r4, #0
1a0062a8:	f000 8107 	beq.w	1a0064ba <_dtoa_r+0x48a>
1a0062ac:	9906      	ldr	r1, [sp, #24]
1a0062ae:	2900      	cmp	r1, #0
1a0062b0:	f340 8466 	ble.w	1a006b80 <_dtoa_r+0xb50>
1a0062b4:	4bb1      	ldr	r3, [pc, #708]	; (1a00657c <_dtoa_r+0x54c>)
1a0062b6:	f001 020f 	and.w	r2, r1, #15
1a0062ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0062be:	ed93 7b00 	vldr	d7, [r3]
1a0062c2:	110c      	asrs	r4, r1, #4
1a0062c4:	06e3      	lsls	r3, r4, #27
1a0062c6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0062ca:	f140 8406 	bpl.w	1a006ada <_dtoa_r+0xaaa>
1a0062ce:	4bac      	ldr	r3, [pc, #688]	; (1a006580 <_dtoa_r+0x550>)
1a0062d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0062d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a0062d8:	f7fc fc6e 	bl	1a002bb8 <__aeabi_ddiv>
1a0062dc:	e9cd 0100 	strd	r0, r1, [sp]
1a0062e0:	f004 040f 	and.w	r4, r4, #15
1a0062e4:	2603      	movs	r6, #3
1a0062e6:	b17c      	cbz	r4, 1a006308 <_dtoa_r+0x2d8>
1a0062e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0062ec:	4da4      	ldr	r5, [pc, #656]	; (1a006580 <_dtoa_r+0x550>)
1a0062ee:	07e7      	lsls	r7, r4, #31
1a0062f0:	d504      	bpl.n	1a0062fc <_dtoa_r+0x2cc>
1a0062f2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0062f6:	f7fc fb35 	bl	1a002964 <__aeabi_dmul>
1a0062fa:	3601      	adds	r6, #1
1a0062fc:	1064      	asrs	r4, r4, #1
1a0062fe:	f105 0508 	add.w	r5, r5, #8
1a006302:	d1f4      	bne.n	1a0062ee <_dtoa_r+0x2be>
1a006304:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a006308:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00630c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a006310:	f7fc fc52 	bl	1a002bb8 <__aeabi_ddiv>
1a006314:	e9cd 0100 	strd	r0, r1, [sp]
1a006318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00631a:	b153      	cbz	r3, 1a006332 <_dtoa_r+0x302>
1a00631c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a006320:	2200      	movs	r2, #0
1a006322:	4b98      	ldr	r3, [pc, #608]	; (1a006584 <_dtoa_r+0x554>)
1a006324:	4620      	mov	r0, r4
1a006326:	4629      	mov	r1, r5
1a006328:	f7fc fd8e 	bl	1a002e48 <__aeabi_dcmplt>
1a00632c:	2800      	cmp	r0, #0
1a00632e:	f040 8521 	bne.w	1a006d74 <_dtoa_r+0xd44>
1a006332:	4630      	mov	r0, r6
1a006334:	f7fc faac 	bl	1a002890 <__aeabi_i2d>
1a006338:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00633c:	f7fc fb12 	bl	1a002964 <__aeabi_dmul>
1a006340:	4b91      	ldr	r3, [pc, #580]	; (1a006588 <_dtoa_r+0x558>)
1a006342:	2200      	movs	r2, #0
1a006344:	f7fc f958 	bl	1a0025f8 <__adddf3>
1a006348:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00634a:	4604      	mov	r4, r0
1a00634c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006350:	2b00      	cmp	r3, #0
1a006352:	f000 83f9 	beq.w	1a006b48 <_dtoa_r+0xb18>
1a006356:	9b06      	ldr	r3, [sp, #24]
1a006358:	9312      	str	r3, [sp, #72]	; 0x48
1a00635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00635c:	9310      	str	r3, [sp, #64]	; 0x40
1a00635e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a006362:	4639      	mov	r1, r7
1a006364:	4630      	mov	r0, r6
1a006366:	f001 ff25 	bl	1a0081b4 <__aeabi_d2iz>
1a00636a:	9000      	str	r0, [sp, #0]
1a00636c:	f7fc fa90 	bl	1a002890 <__aeabi_i2d>
1a006370:	4602      	mov	r2, r0
1a006372:	460b      	mov	r3, r1
1a006374:	4630      	mov	r0, r6
1a006376:	4639      	mov	r1, r7
1a006378:	f7fc f93c 	bl	1a0025f4 <__aeabi_dsub>
1a00637c:	4b7f      	ldr	r3, [pc, #508]	; (1a00657c <_dtoa_r+0x54c>)
1a00637e:	9a00      	ldr	r2, [sp, #0]
1a006380:	460f      	mov	r7, r1
1a006382:	9910      	ldr	r1, [sp, #64]	; 0x40
1a006384:	4606      	mov	r6, r0
1a006386:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a00638a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a00638c:	9903      	ldr	r1, [sp, #12]
1a00638e:	3230      	adds	r2, #48	; 0x30
1a006390:	e9cd 4500 	strd	r4, r5, [sp]
1a006394:	b2d5      	uxtb	r5, r2
1a006396:	1c4c      	adds	r4, r1, #1
1a006398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a00639c:	2800      	cmp	r0, #0
1a00639e:	f000 848d 	beq.w	1a006cbc <_dtoa_r+0xc8c>
1a0063a2:	2000      	movs	r0, #0
1a0063a4:	4979      	ldr	r1, [pc, #484]	; (1a00658c <_dtoa_r+0x55c>)
1a0063a6:	f7fc fc07 	bl	1a002bb8 <__aeabi_ddiv>
1a0063aa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0063ae:	f7fc f921 	bl	1a0025f4 <__aeabi_dsub>
1a0063b2:	9b03      	ldr	r3, [sp, #12]
1a0063b4:	4632      	mov	r2, r6
1a0063b6:	701d      	strb	r5, [r3, #0]
1a0063b8:	463b      	mov	r3, r7
1a0063ba:	e9cd 0100 	strd	r0, r1, [sp]
1a0063be:	f7fc fd61 	bl	1a002e84 <__aeabi_dcmpgt>
1a0063c2:	2800      	cmp	r0, #0
1a0063c4:	f040 84ca 	bne.w	1a006d5c <_dtoa_r+0xd2c>
1a0063c8:	4632      	mov	r2, r6
1a0063ca:	463b      	mov	r3, r7
1a0063cc:	2000      	movs	r0, #0
1a0063ce:	496d      	ldr	r1, [pc, #436]	; (1a006584 <_dtoa_r+0x554>)
1a0063d0:	f7fc f910 	bl	1a0025f4 <__aeabi_dsub>
1a0063d4:	4602      	mov	r2, r0
1a0063d6:	460b      	mov	r3, r1
1a0063d8:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0063dc:	f7fc fd52 	bl	1a002e84 <__aeabi_dcmpgt>
1a0063e0:	2800      	cmp	r0, #0
1a0063e2:	f040 8526 	bne.w	1a006e32 <_dtoa_r+0xe02>
1a0063e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0063e8:	2b01      	cmp	r3, #1
1a0063ea:	d062      	beq.n	1a0064b2 <_dtoa_r+0x482>
1a0063ec:	9a03      	ldr	r2, [sp, #12]
1a0063ee:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0063f2:	4413      	add	r3, r2
1a0063f4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a0063f8:	e9dd 8900 	ldrd	r8, r9, [sp]
1a0063fc:	f8cd b000 	str.w	fp, [sp]
1a006400:	46d3      	mov	fp, sl
1a006402:	469a      	mov	sl, r3
1a006404:	e00c      	b.n	1a006420 <_dtoa_r+0x3f0>
1a006406:	2000      	movs	r0, #0
1a006408:	495e      	ldr	r1, [pc, #376]	; (1a006584 <_dtoa_r+0x554>)
1a00640a:	f7fc f8f3 	bl	1a0025f4 <__aeabi_dsub>
1a00640e:	4642      	mov	r2, r8
1a006410:	464b      	mov	r3, r9
1a006412:	f7fc fd19 	bl	1a002e48 <__aeabi_dcmplt>
1a006416:	2800      	cmp	r0, #0
1a006418:	f040 84eb 	bne.w	1a006df2 <_dtoa_r+0xdc2>
1a00641c:	45a2      	cmp	sl, r4
1a00641e:	d041      	beq.n	1a0064a4 <_dtoa_r+0x474>
1a006420:	4640      	mov	r0, r8
1a006422:	4649      	mov	r1, r9
1a006424:	2200      	movs	r2, #0
1a006426:	4b5a      	ldr	r3, [pc, #360]	; (1a006590 <_dtoa_r+0x560>)
1a006428:	f7fc fa9c 	bl	1a002964 <__aeabi_dmul>
1a00642c:	2200      	movs	r2, #0
1a00642e:	4b58      	ldr	r3, [pc, #352]	; (1a006590 <_dtoa_r+0x560>)
1a006430:	4680      	mov	r8, r0
1a006432:	4689      	mov	r9, r1
1a006434:	4630      	mov	r0, r6
1a006436:	4639      	mov	r1, r7
1a006438:	f7fc fa94 	bl	1a002964 <__aeabi_dmul>
1a00643c:	460f      	mov	r7, r1
1a00643e:	4606      	mov	r6, r0
1a006440:	f001 feb8 	bl	1a0081b4 <__aeabi_d2iz>
1a006444:	4605      	mov	r5, r0
1a006446:	f7fc fa23 	bl	1a002890 <__aeabi_i2d>
1a00644a:	4602      	mov	r2, r0
1a00644c:	460b      	mov	r3, r1
1a00644e:	4630      	mov	r0, r6
1a006450:	4639      	mov	r1, r7
1a006452:	f7fc f8cf 	bl	1a0025f4 <__aeabi_dsub>
1a006456:	3530      	adds	r5, #48	; 0x30
1a006458:	b2ed      	uxtb	r5, r5
1a00645a:	4642      	mov	r2, r8
1a00645c:	464b      	mov	r3, r9
1a00645e:	f804 5b01 	strb.w	r5, [r4], #1
1a006462:	4606      	mov	r6, r0
1a006464:	460f      	mov	r7, r1
1a006466:	f7fc fcef 	bl	1a002e48 <__aeabi_dcmplt>
1a00646a:	4632      	mov	r2, r6
1a00646c:	463b      	mov	r3, r7
1a00646e:	2800      	cmp	r0, #0
1a006470:	d0c9      	beq.n	1a006406 <_dtoa_r+0x3d6>
1a006472:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006474:	46da      	mov	sl, fp
1a006476:	3301      	adds	r3, #1
1a006478:	f8dd b000 	ldr.w	fp, [sp]
1a00647c:	9306      	str	r3, [sp, #24]
1a00647e:	4659      	mov	r1, fp
1a006480:	4650      	mov	r0, sl
1a006482:	f000 ffe3 	bl	1a00744c <_Bfree>
1a006486:	2300      	movs	r3, #0
1a006488:	7023      	strb	r3, [r4, #0]
1a00648a:	9b07      	ldr	r3, [sp, #28]
1a00648c:	461a      	mov	r2, r3
1a00648e:	9b06      	ldr	r3, [sp, #24]
1a006490:	6013      	str	r3, [r2, #0]
1a006492:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a006494:	2b00      	cmp	r3, #0
1a006496:	f43f ae09 	beq.w	1a0060ac <_dtoa_r+0x7c>
1a00649a:	9803      	ldr	r0, [sp, #12]
1a00649c:	601c      	str	r4, [r3, #0]
1a00649e:	b017      	add	sp, #92	; 0x5c
1a0064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0064a4:	46da      	mov	sl, fp
1a0064a6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a0064aa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a0064ae:	f8dd b000 	ldr.w	fp, [sp]
1a0064b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a0064b6:	e9cd 3400 	strd	r3, r4, [sp]
1a0064ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0064bc:	2b00      	cmp	r3, #0
1a0064be:	f2c0 80c9 	blt.w	1a006654 <_dtoa_r+0x624>
1a0064c2:	9a06      	ldr	r2, [sp, #24]
1a0064c4:	2a0e      	cmp	r2, #14
1a0064c6:	f300 80c5 	bgt.w	1a006654 <_dtoa_r+0x624>
1a0064ca:	4b2c      	ldr	r3, [pc, #176]	; (1a00657c <_dtoa_r+0x54c>)
1a0064cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0064d0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a0064d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0064d6:	2b00      	cmp	r3, #0
1a0064d8:	da17      	bge.n	1a00650a <_dtoa_r+0x4da>
1a0064da:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a0064dc:	2f00      	cmp	r7, #0
1a0064de:	dc14      	bgt.n	1a00650a <_dtoa_r+0x4da>
1a0064e0:	f040 834b 	bne.w	1a006b7a <_dtoa_r+0xb4a>
1a0064e4:	2200      	movs	r2, #0
1a0064e6:	4b2b      	ldr	r3, [pc, #172]	; (1a006594 <_dtoa_r+0x564>)
1a0064e8:	4640      	mov	r0, r8
1a0064ea:	4649      	mov	r1, r9
1a0064ec:	f7fc fa3a 	bl	1a002964 <__aeabi_dmul>
1a0064f0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0064f4:	f7fc fcbc 	bl	1a002e70 <__aeabi_dcmpge>
1a0064f8:	2800      	cmp	r0, #0
1a0064fa:	f000 83be 	beq.w	1a006c7a <_dtoa_r+0xc4a>
1a0064fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a006500:	463d      	mov	r5, r7
1a006502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006504:	9c03      	ldr	r4, [sp, #12]
1a006506:	43db      	mvns	r3, r3
1a006508:	e260      	b.n	1a0069cc <_dtoa_r+0x99c>
1a00650a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00650e:	4642      	mov	r2, r8
1a006510:	464b      	mov	r3, r9
1a006512:	4620      	mov	r0, r4
1a006514:	4629      	mov	r1, r5
1a006516:	f7fc fb4f 	bl	1a002bb8 <__aeabi_ddiv>
1a00651a:	f001 fe4b 	bl	1a0081b4 <__aeabi_d2iz>
1a00651e:	9000      	str	r0, [sp, #0]
1a006520:	f7fc f9b6 	bl	1a002890 <__aeabi_i2d>
1a006524:	4642      	mov	r2, r8
1a006526:	464b      	mov	r3, r9
1a006528:	f7fc fa1c 	bl	1a002964 <__aeabi_dmul>
1a00652c:	4602      	mov	r2, r0
1a00652e:	460b      	mov	r3, r1
1a006530:	4620      	mov	r0, r4
1a006532:	4629      	mov	r1, r5
1a006534:	f7fc f85e 	bl	1a0025f4 <__aeabi_dsub>
1a006538:	9b00      	ldr	r3, [sp, #0]
1a00653a:	9c03      	ldr	r4, [sp, #12]
1a00653c:	9a06      	ldr	r2, [sp, #24]
1a00653e:	3330      	adds	r3, #48	; 0x30
1a006540:	f804 3b01 	strb.w	r3, [r4], #1
1a006544:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006546:	3201      	adds	r2, #1
1a006548:	2b01      	cmp	r3, #1
1a00654a:	4606      	mov	r6, r0
1a00654c:	460f      	mov	r7, r1
1a00654e:	9206      	str	r2, [sp, #24]
1a006550:	d054      	beq.n	1a0065fc <_dtoa_r+0x5cc>
1a006552:	2200      	movs	r2, #0
1a006554:	4b0e      	ldr	r3, [pc, #56]	; (1a006590 <_dtoa_r+0x560>)
1a006556:	f7fc fa05 	bl	1a002964 <__aeabi_dmul>
1a00655a:	2200      	movs	r2, #0
1a00655c:	2300      	movs	r3, #0
1a00655e:	4606      	mov	r6, r0
1a006560:	460f      	mov	r7, r1
1a006562:	f7fc fc67 	bl	1a002e34 <__aeabi_dcmpeq>
1a006566:	2800      	cmp	r0, #0
1a006568:	d189      	bne.n	1a00647e <_dtoa_r+0x44e>
1a00656a:	f8cd b000 	str.w	fp, [sp]
1a00656e:	2501      	movs	r5, #1
1a006570:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a006574:	f8cd a008 	str.w	sl, [sp, #8]
1a006578:	e019      	b.n	1a0065ae <_dtoa_r+0x57e>
1a00657a:	bf00      	nop
1a00657c:	1a0087c8 	.word	0x1a0087c8
1a006580:	1a0087a0 	.word	0x1a0087a0
1a006584:	3ff00000 	.word	0x3ff00000
1a006588:	401c0000 	.word	0x401c0000
1a00658c:	3fe00000 	.word	0x3fe00000
1a006590:	40240000 	.word	0x40240000
1a006594:	40140000 	.word	0x40140000
1a006598:	f7fc f9e4 	bl	1a002964 <__aeabi_dmul>
1a00659c:	2200      	movs	r2, #0
1a00659e:	2300      	movs	r3, #0
1a0065a0:	4606      	mov	r6, r0
1a0065a2:	460f      	mov	r7, r1
1a0065a4:	f7fc fc46 	bl	1a002e34 <__aeabi_dcmpeq>
1a0065a8:	2800      	cmp	r0, #0
1a0065aa:	f040 835c 	bne.w	1a006c66 <_dtoa_r+0xc36>
1a0065ae:	4642      	mov	r2, r8
1a0065b0:	464b      	mov	r3, r9
1a0065b2:	4630      	mov	r0, r6
1a0065b4:	4639      	mov	r1, r7
1a0065b6:	f7fc faff 	bl	1a002bb8 <__aeabi_ddiv>
1a0065ba:	f001 fdfb 	bl	1a0081b4 <__aeabi_d2iz>
1a0065be:	4682      	mov	sl, r0
1a0065c0:	f7fc f966 	bl	1a002890 <__aeabi_i2d>
1a0065c4:	4642      	mov	r2, r8
1a0065c6:	464b      	mov	r3, r9
1a0065c8:	f7fc f9cc 	bl	1a002964 <__aeabi_dmul>
1a0065cc:	4602      	mov	r2, r0
1a0065ce:	460b      	mov	r3, r1
1a0065d0:	4630      	mov	r0, r6
1a0065d2:	4639      	mov	r1, r7
1a0065d4:	f7fc f80e 	bl	1a0025f4 <__aeabi_dsub>
1a0065d8:	3501      	adds	r5, #1
1a0065da:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a0065de:	45ab      	cmp	fp, r5
1a0065e0:	4606      	mov	r6, r0
1a0065e2:	460f      	mov	r7, r1
1a0065e4:	f04f 0200 	mov.w	r2, #0
1a0065e8:	4ba7      	ldr	r3, [pc, #668]	; (1a006888 <_dtoa_r+0x858>)
1a0065ea:	f804 cb01 	strb.w	ip, [r4], #1
1a0065ee:	d1d3      	bne.n	1a006598 <_dtoa_r+0x568>
1a0065f0:	f8dd b000 	ldr.w	fp, [sp]
1a0065f4:	f8cd a000 	str.w	sl, [sp]
1a0065f8:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0065fc:	4632      	mov	r2, r6
1a0065fe:	463b      	mov	r3, r7
1a006600:	4630      	mov	r0, r6
1a006602:	4639      	mov	r1, r7
1a006604:	f7fb fff8 	bl	1a0025f8 <__adddf3>
1a006608:	4642      	mov	r2, r8
1a00660a:	464b      	mov	r3, r9
1a00660c:	4606      	mov	r6, r0
1a00660e:	460f      	mov	r7, r1
1a006610:	f7fc fc38 	bl	1a002e84 <__aeabi_dcmpgt>
1a006614:	b960      	cbnz	r0, 1a006630 <_dtoa_r+0x600>
1a006616:	4642      	mov	r2, r8
1a006618:	464b      	mov	r3, r9
1a00661a:	4630      	mov	r0, r6
1a00661c:	4639      	mov	r1, r7
1a00661e:	f7fc fc09 	bl	1a002e34 <__aeabi_dcmpeq>
1a006622:	2800      	cmp	r0, #0
1a006624:	f43f af2b 	beq.w	1a00647e <_dtoa_r+0x44e>
1a006628:	9b00      	ldr	r3, [sp, #0]
1a00662a:	07db      	lsls	r3, r3, #31
1a00662c:	f57f af27 	bpl.w	1a00647e <_dtoa_r+0x44e>
1a006630:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006634:	9a03      	ldr	r2, [sp, #12]
1a006636:	1e63      	subs	r3, r4, #1
1a006638:	e004      	b.n	1a006644 <_dtoa_r+0x614>
1a00663a:	429a      	cmp	r2, r3
1a00663c:	f000 83c0 	beq.w	1a006dc0 <_dtoa_r+0xd90>
1a006640:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a006644:	2d39      	cmp	r5, #57	; 0x39
1a006646:	f103 0401 	add.w	r4, r3, #1
1a00664a:	d0f6      	beq.n	1a00663a <_dtoa_r+0x60a>
1a00664c:	1c6a      	adds	r2, r5, #1
1a00664e:	b2d2      	uxtb	r2, r2
1a006650:	701a      	strb	r2, [r3, #0]
1a006652:	e714      	b.n	1a00647e <_dtoa_r+0x44e>
1a006654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a006656:	2a00      	cmp	r2, #0
1a006658:	d03c      	beq.n	1a0066d4 <_dtoa_r+0x6a4>
1a00665a:	9a02      	ldr	r2, [sp, #8]
1a00665c:	2a01      	cmp	r2, #1
1a00665e:	f340 8258 	ble.w	1a006b12 <_dtoa_r+0xae2>
1a006662:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006664:	1e5e      	subs	r6, r3, #1
1a006666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006668:	42b3      	cmp	r3, r6
1a00666a:	f280 8234 	bge.w	1a006ad6 <_dtoa_r+0xaa6>
1a00666e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006670:	960c      	str	r6, [sp, #48]	; 0x30
1a006672:	1af3      	subs	r3, r6, r3
1a006674:	4499      	add	r9, r3
1a006676:	2600      	movs	r6, #0
1a006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00667a:	2b00      	cmp	r3, #0
1a00667c:	f2c0 82f8 	blt.w	1a006c70 <_dtoa_r+0xc40>
1a006680:	9a08      	ldr	r2, [sp, #32]
1a006682:	4614      	mov	r4, r2
1a006684:	441a      	add	r2, r3
1a006686:	4498      	add	r8, r3
1a006688:	9208      	str	r2, [sp, #32]
1a00668a:	2101      	movs	r1, #1
1a00668c:	4650      	mov	r0, sl
1a00668e:	f000 ff7d 	bl	1a00758c <__i2b>
1a006692:	4605      	mov	r5, r0
1a006694:	e021      	b.n	1a0066da <_dtoa_r+0x6aa>
1a006696:	2301      	movs	r3, #1
1a006698:	f1b8 0f00 	cmp.w	r8, #0
1a00669c:	930d      	str	r3, [sp, #52]	; 0x34
1a00669e:	f6bf ad77 	bge.w	1a006190 <_dtoa_r+0x160>
1a0066a2:	f1c4 0301 	rsb	r3, r4, #1
1a0066a6:	9308      	str	r3, [sp, #32]
1a0066a8:	f04f 0800 	mov.w	r8, #0
1a0066ac:	e572      	b.n	1a006194 <_dtoa_r+0x164>
1a0066ae:	4648      	mov	r0, r9
1a0066b0:	f7fc f8ee 	bl	1a002890 <__aeabi_i2d>
1a0066b4:	4632      	mov	r2, r6
1a0066b6:	463b      	mov	r3, r7
1a0066b8:	f7fc fbbc 	bl	1a002e34 <__aeabi_dcmpeq>
1a0066bc:	2800      	cmp	r0, #0
1a0066be:	f47f ad4d 	bne.w	1a00615c <_dtoa_r+0x12c>
1a0066c2:	f109 39ff 	add.w	r9, r9, #4294967295
1a0066c6:	e549      	b.n	1a00615c <_dtoa_r+0x12c>
1a0066c8:	4b70      	ldr	r3, [pc, #448]	; (1a00688c <_dtoa_r+0x85c>)
1a0066ca:	9303      	str	r3, [sp, #12]
1a0066cc:	9803      	ldr	r0, [sp, #12]
1a0066ce:	b017      	add	sp, #92	; 0x5c
1a0066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0066d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a0066d6:	9c08      	ldr	r4, [sp, #32]
1a0066d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0066da:	2c00      	cmp	r4, #0
1a0066dc:	dd0c      	ble.n	1a0066f8 <_dtoa_r+0x6c8>
1a0066de:	f1b8 0f00 	cmp.w	r8, #0
1a0066e2:	dd09      	ble.n	1a0066f8 <_dtoa_r+0x6c8>
1a0066e4:	4544      	cmp	r4, r8
1a0066e6:	9a08      	ldr	r2, [sp, #32]
1a0066e8:	4623      	mov	r3, r4
1a0066ea:	bfa8      	it	ge
1a0066ec:	4643      	movge	r3, r8
1a0066ee:	1ad2      	subs	r2, r2, r3
1a0066f0:	9208      	str	r2, [sp, #32]
1a0066f2:	1ae4      	subs	r4, r4, r3
1a0066f4:	eba8 0803 	sub.w	r8, r8, r3
1a0066f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0066fa:	b1d3      	cbz	r3, 1a006732 <_dtoa_r+0x702>
1a0066fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0066fe:	2b00      	cmp	r3, #0
1a006700:	f000 8189 	beq.w	1a006a16 <_dtoa_r+0x9e6>
1a006704:	2e00      	cmp	r6, #0
1a006706:	dd10      	ble.n	1a00672a <_dtoa_r+0x6fa>
1a006708:	4629      	mov	r1, r5
1a00670a:	4632      	mov	r2, r6
1a00670c:	4650      	mov	r0, sl
1a00670e:	f000 ffdf 	bl	1a0076d0 <__pow5mult>
1a006712:	465a      	mov	r2, fp
1a006714:	4601      	mov	r1, r0
1a006716:	4605      	mov	r5, r0
1a006718:	4650      	mov	r0, sl
1a00671a:	f000 ff41 	bl	1a0075a0 <__multiply>
1a00671e:	4659      	mov	r1, fp
1a006720:	4607      	mov	r7, r0
1a006722:	4650      	mov	r0, sl
1a006724:	f000 fe92 	bl	1a00744c <_Bfree>
1a006728:	46bb      	mov	fp, r7
1a00672a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00672c:	1b9a      	subs	r2, r3, r6
1a00672e:	f040 8173 	bne.w	1a006a18 <_dtoa_r+0x9e8>
1a006732:	2101      	movs	r1, #1
1a006734:	4650      	mov	r0, sl
1a006736:	f000 ff29 	bl	1a00758c <__i2b>
1a00673a:	f1b9 0f00 	cmp.w	r9, #0
1a00673e:	4607      	mov	r7, r0
1a006740:	f300 808e 	bgt.w	1a006860 <_dtoa_r+0x830>
1a006744:	9b02      	ldr	r3, [sp, #8]
1a006746:	2b01      	cmp	r3, #1
1a006748:	f340 8171 	ble.w	1a006a2e <_dtoa_r+0x9fe>
1a00674c:	2600      	movs	r6, #0
1a00674e:	2001      	movs	r0, #1
1a006750:	f1b9 0f00 	cmp.w	r9, #0
1a006754:	f040 808f 	bne.w	1a006876 <_dtoa_r+0x846>
1a006758:	4440      	add	r0, r8
1a00675a:	f010 001f 	ands.w	r0, r0, #31
1a00675e:	d075      	beq.n	1a00684c <_dtoa_r+0x81c>
1a006760:	f1c0 0320 	rsb	r3, r0, #32
1a006764:	2b04      	cmp	r3, #4
1a006766:	f340 836d 	ble.w	1a006e44 <_dtoa_r+0xe14>
1a00676a:	f1c0 001c 	rsb	r0, r0, #28
1a00676e:	9b08      	ldr	r3, [sp, #32]
1a006770:	4403      	add	r3, r0
1a006772:	9308      	str	r3, [sp, #32]
1a006774:	4404      	add	r4, r0
1a006776:	4480      	add	r8, r0
1a006778:	9b08      	ldr	r3, [sp, #32]
1a00677a:	2b00      	cmp	r3, #0
1a00677c:	dd05      	ble.n	1a00678a <_dtoa_r+0x75a>
1a00677e:	4659      	mov	r1, fp
1a006780:	461a      	mov	r2, r3
1a006782:	4650      	mov	r0, sl
1a006784:	f000 fff4 	bl	1a007770 <__lshift>
1a006788:	4683      	mov	fp, r0
1a00678a:	f1b8 0f00 	cmp.w	r8, #0
1a00678e:	dd05      	ble.n	1a00679c <_dtoa_r+0x76c>
1a006790:	4639      	mov	r1, r7
1a006792:	4642      	mov	r2, r8
1a006794:	4650      	mov	r0, sl
1a006796:	f000 ffeb 	bl	1a007770 <__lshift>
1a00679a:	4607      	mov	r7, r0
1a00679c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00679e:	2b00      	cmp	r3, #0
1a0067a0:	f040 811e 	bne.w	1a0069e0 <_dtoa_r+0x9b0>
1a0067a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0067a6:	2b00      	cmp	r3, #0
1a0067a8:	f340 80f5 	ble.w	1a006996 <_dtoa_r+0x966>
1a0067ac:	9b06      	ldr	r3, [sp, #24]
1a0067ae:	3301      	adds	r3, #1
1a0067b0:	9306      	str	r3, [sp, #24]
1a0067b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0067b4:	2b00      	cmp	r3, #0
1a0067b6:	d177      	bne.n	1a0068a8 <_dtoa_r+0x878>
1a0067b8:	9c03      	ldr	r4, [sp, #12]
1a0067ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0067be:	2601      	movs	r6, #1
1a0067c0:	e003      	b.n	1a0067ca <_dtoa_r+0x79a>
1a0067c2:	f000 fe4d 	bl	1a007460 <__multadd>
1a0067c6:	3601      	adds	r6, #1
1a0067c8:	4683      	mov	fp, r0
1a0067ca:	4639      	mov	r1, r7
1a0067cc:	4658      	mov	r0, fp
1a0067ce:	f7ff fb9b 	bl	1a005f08 <quorem>
1a0067d2:	4546      	cmp	r6, r8
1a0067d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0067d8:	f804 9b01 	strb.w	r9, [r4], #1
1a0067dc:	f04f 0300 	mov.w	r3, #0
1a0067e0:	f04f 020a 	mov.w	r2, #10
1a0067e4:	4659      	mov	r1, fp
1a0067e6:	4650      	mov	r0, sl
1a0067e8:	dbeb      	blt.n	1a0067c2 <_dtoa_r+0x792>
1a0067ea:	2300      	movs	r3, #0
1a0067ec:	9300      	str	r3, [sp, #0]
1a0067ee:	4659      	mov	r1, fp
1a0067f0:	2201      	movs	r2, #1
1a0067f2:	4650      	mov	r0, sl
1a0067f4:	f000 ffbc 	bl	1a007770 <__lshift>
1a0067f8:	4639      	mov	r1, r7
1a0067fa:	4683      	mov	fp, r0
1a0067fc:	f001 f812 	bl	1a007824 <__mcmp>
1a006800:	2800      	cmp	r0, #0
1a006802:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a006806:	f340 816f 	ble.w	1a006ae8 <_dtoa_r+0xab8>
1a00680a:	1e63      	subs	r3, r4, #1
1a00680c:	9903      	ldr	r1, [sp, #12]
1a00680e:	e004      	b.n	1a00681a <_dtoa_r+0x7ea>
1a006810:	4299      	cmp	r1, r3
1a006812:	f000 8177 	beq.w	1a006b04 <_dtoa_r+0xad4>
1a006816:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00681a:	2a39      	cmp	r2, #57	; 0x39
1a00681c:	f103 0401 	add.w	r4, r3, #1
1a006820:	d0f6      	beq.n	1a006810 <_dtoa_r+0x7e0>
1a006822:	3201      	adds	r2, #1
1a006824:	701a      	strb	r2, [r3, #0]
1a006826:	4639      	mov	r1, r7
1a006828:	4650      	mov	r0, sl
1a00682a:	f000 fe0f 	bl	1a00744c <_Bfree>
1a00682e:	2d00      	cmp	r5, #0
1a006830:	f43f ae25 	beq.w	1a00647e <_dtoa_r+0x44e>
1a006834:	9900      	ldr	r1, [sp, #0]
1a006836:	b121      	cbz	r1, 1a006842 <_dtoa_r+0x812>
1a006838:	42a9      	cmp	r1, r5
1a00683a:	d002      	beq.n	1a006842 <_dtoa_r+0x812>
1a00683c:	4650      	mov	r0, sl
1a00683e:	f000 fe05 	bl	1a00744c <_Bfree>
1a006842:	4629      	mov	r1, r5
1a006844:	4650      	mov	r0, sl
1a006846:	f000 fe01 	bl	1a00744c <_Bfree>
1a00684a:	e618      	b.n	1a00647e <_dtoa_r+0x44e>
1a00684c:	201c      	movs	r0, #28
1a00684e:	e78e      	b.n	1a00676e <_dtoa_r+0x73e>
1a006850:	2401      	movs	r4, #1
1a006852:	e4b6      	b.n	1a0061c2 <_dtoa_r+0x192>
1a006854:	f1c3 0620 	rsb	r6, r3, #32
1a006858:	9b00      	ldr	r3, [sp, #0]
1a00685a:	fa03 f006 	lsl.w	r0, r3, r6
1a00685e:	e447      	b.n	1a0060f0 <_dtoa_r+0xc0>
1a006860:	4601      	mov	r1, r0
1a006862:	464a      	mov	r2, r9
1a006864:	4650      	mov	r0, sl
1a006866:	f000 ff33 	bl	1a0076d0 <__pow5mult>
1a00686a:	9b02      	ldr	r3, [sp, #8]
1a00686c:	2b01      	cmp	r3, #1
1a00686e:	4607      	mov	r7, r0
1a006870:	f340 81b2 	ble.w	1a006bd8 <_dtoa_r+0xba8>
1a006874:	2600      	movs	r6, #0
1a006876:	693b      	ldr	r3, [r7, #16]
1a006878:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00687c:	6918      	ldr	r0, [r3, #16]
1a00687e:	f000 fe35 	bl	1a0074ec <__hi0bits>
1a006882:	f1c0 0020 	rsb	r0, r0, #32
1a006886:	e767      	b.n	1a006758 <_dtoa_r+0x728>
1a006888:	40240000 	.word	0x40240000
1a00688c:	1a008768 	.word	0x1a008768
1a006890:	4629      	mov	r1, r5
1a006892:	2300      	movs	r3, #0
1a006894:	220a      	movs	r2, #10
1a006896:	4650      	mov	r0, sl
1a006898:	f000 fde2 	bl	1a007460 <__multadd>
1a00689c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00689e:	2b00      	cmp	r3, #0
1a0068a0:	4605      	mov	r5, r0
1a0068a2:	f340 82c1 	ble.w	1a006e28 <_dtoa_r+0xdf8>
1a0068a6:	9309      	str	r3, [sp, #36]	; 0x24
1a0068a8:	2c00      	cmp	r4, #0
1a0068aa:	f300 810d 	bgt.w	1a006ac8 <_dtoa_r+0xa98>
1a0068ae:	2e00      	cmp	r6, #0
1a0068b0:	f040 81c5 	bne.w	1a006c3e <_dtoa_r+0xc0e>
1a0068b4:	46a8      	mov	r8, r5
1a0068b6:	9b00      	ldr	r3, [sp, #0]
1a0068b8:	9902      	ldr	r1, [sp, #8]
1a0068ba:	9e03      	ldr	r6, [sp, #12]
1a0068bc:	f003 0201 	and.w	r2, r3, #1
1a0068c0:	920b      	str	r2, [sp, #44]	; 0x2c
1a0068c2:	430a      	orrs	r2, r1
1a0068c4:	920a      	str	r2, [sp, #40]	; 0x28
1a0068c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0068c8:	1e73      	subs	r3, r6, #1
1a0068ca:	441a      	add	r2, r3
1a0068cc:	9209      	str	r2, [sp, #36]	; 0x24
1a0068ce:	463c      	mov	r4, r7
1a0068d0:	4621      	mov	r1, r4
1a0068d2:	4658      	mov	r0, fp
1a0068d4:	f7ff fb18 	bl	1a005f08 <quorem>
1a0068d8:	4629      	mov	r1, r5
1a0068da:	9000      	str	r0, [sp, #0]
1a0068dc:	4658      	mov	r0, fp
1a0068de:	f000 ffa1 	bl	1a007824 <__mcmp>
1a0068e2:	4642      	mov	r2, r8
1a0068e4:	4607      	mov	r7, r0
1a0068e6:	4621      	mov	r1, r4
1a0068e8:	4650      	mov	r0, sl
1a0068ea:	f000 ffb7 	bl	1a00785c <__mdiff>
1a0068ee:	9b00      	ldr	r3, [sp, #0]
1a0068f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a0068f4:	68c3      	ldr	r3, [r0, #12]
1a0068f6:	4681      	mov	r9, r0
1a0068f8:	2b00      	cmp	r3, #0
1a0068fa:	d13e      	bne.n	1a00697a <_dtoa_r+0x94a>
1a0068fc:	4601      	mov	r1, r0
1a0068fe:	4658      	mov	r0, fp
1a006900:	9208      	str	r2, [sp, #32]
1a006902:	f000 ff8f 	bl	1a007824 <__mcmp>
1a006906:	4649      	mov	r1, r9
1a006908:	9004      	str	r0, [sp, #16]
1a00690a:	4650      	mov	r0, sl
1a00690c:	f000 fd9e 	bl	1a00744c <_Bfree>
1a006910:	9b04      	ldr	r3, [sp, #16]
1a006912:	9a08      	ldr	r2, [sp, #32]
1a006914:	b91b      	cbnz	r3, 1a00691e <_dtoa_r+0x8ee>
1a006916:	990a      	ldr	r1, [sp, #40]	; 0x28
1a006918:	2900      	cmp	r1, #0
1a00691a:	f000 8271 	beq.w	1a006e00 <_dtoa_r+0xdd0>
1a00691e:	2f00      	cmp	r7, #0
1a006920:	f106 0901 	add.w	r9, r6, #1
1a006924:	f2c0 816e 	blt.w	1a006c04 <_dtoa_r+0xbd4>
1a006928:	9902      	ldr	r1, [sp, #8]
1a00692a:	430f      	orrs	r7, r1
1a00692c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00692e:	4339      	orrs	r1, r7
1a006930:	f000 8168 	beq.w	1a006c04 <_dtoa_r+0xbd4>
1a006934:	2b00      	cmp	r3, #0
1a006936:	f300 81a2 	bgt.w	1a006c7e <_dtoa_r+0xc4e>
1a00693a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00693c:	7032      	strb	r2, [r6, #0]
1a00693e:	42b3      	cmp	r3, r6
1a006940:	f000 81a9 	beq.w	1a006c96 <_dtoa_r+0xc66>
1a006944:	4659      	mov	r1, fp
1a006946:	2300      	movs	r3, #0
1a006948:	220a      	movs	r2, #10
1a00694a:	4650      	mov	r0, sl
1a00694c:	f000 fd88 	bl	1a007460 <__multadd>
1a006950:	4545      	cmp	r5, r8
1a006952:	4683      	mov	fp, r0
1a006954:	4629      	mov	r1, r5
1a006956:	f04f 0300 	mov.w	r3, #0
1a00695a:	f04f 020a 	mov.w	r2, #10
1a00695e:	4650      	mov	r0, sl
1a006960:	d013      	beq.n	1a00698a <_dtoa_r+0x95a>
1a006962:	f000 fd7d 	bl	1a007460 <__multadd>
1a006966:	4641      	mov	r1, r8
1a006968:	4605      	mov	r5, r0
1a00696a:	2300      	movs	r3, #0
1a00696c:	220a      	movs	r2, #10
1a00696e:	4650      	mov	r0, sl
1a006970:	f000 fd76 	bl	1a007460 <__multadd>
1a006974:	464e      	mov	r6, r9
1a006976:	4680      	mov	r8, r0
1a006978:	e7aa      	b.n	1a0068d0 <_dtoa_r+0x8a0>
1a00697a:	4601      	mov	r1, r0
1a00697c:	4650      	mov	r0, sl
1a00697e:	9204      	str	r2, [sp, #16]
1a006980:	f000 fd64 	bl	1a00744c <_Bfree>
1a006984:	2301      	movs	r3, #1
1a006986:	9a04      	ldr	r2, [sp, #16]
1a006988:	e7c9      	b.n	1a00691e <_dtoa_r+0x8ee>
1a00698a:	f000 fd69 	bl	1a007460 <__multadd>
1a00698e:	464e      	mov	r6, r9
1a006990:	4605      	mov	r5, r0
1a006992:	4680      	mov	r8, r0
1a006994:	e79c      	b.n	1a0068d0 <_dtoa_r+0x8a0>
1a006996:	9b02      	ldr	r3, [sp, #8]
1a006998:	2b02      	cmp	r3, #2
1a00699a:	f340 8082 	ble.w	1a006aa2 <_dtoa_r+0xa72>
1a00699e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0069a0:	2b00      	cmp	r3, #0
1a0069a2:	f47f adae 	bne.w	1a006502 <_dtoa_r+0x4d2>
1a0069a6:	4639      	mov	r1, r7
1a0069a8:	2205      	movs	r2, #5
1a0069aa:	4650      	mov	r0, sl
1a0069ac:	f000 fd58 	bl	1a007460 <__multadd>
1a0069b0:	4601      	mov	r1, r0
1a0069b2:	4607      	mov	r7, r0
1a0069b4:	4658      	mov	r0, fp
1a0069b6:	f000 ff35 	bl	1a007824 <__mcmp>
1a0069ba:	2800      	cmp	r0, #0
1a0069bc:	f77f ada1 	ble.w	1a006502 <_dtoa_r+0x4d2>
1a0069c0:	9c03      	ldr	r4, [sp, #12]
1a0069c2:	9b06      	ldr	r3, [sp, #24]
1a0069c4:	2231      	movs	r2, #49	; 0x31
1a0069c6:	f804 2b01 	strb.w	r2, [r4], #1
1a0069ca:	3301      	adds	r3, #1
1a0069cc:	3301      	adds	r3, #1
1a0069ce:	4639      	mov	r1, r7
1a0069d0:	4650      	mov	r0, sl
1a0069d2:	9306      	str	r3, [sp, #24]
1a0069d4:	f000 fd3a 	bl	1a00744c <_Bfree>
1a0069d8:	2d00      	cmp	r5, #0
1a0069da:	f47f af32 	bne.w	1a006842 <_dtoa_r+0x812>
1a0069de:	e54e      	b.n	1a00647e <_dtoa_r+0x44e>
1a0069e0:	4639      	mov	r1, r7
1a0069e2:	4658      	mov	r0, fp
1a0069e4:	f000 ff1e 	bl	1a007824 <__mcmp>
1a0069e8:	2800      	cmp	r0, #0
1a0069ea:	f6bf aedb 	bge.w	1a0067a4 <_dtoa_r+0x774>
1a0069ee:	4659      	mov	r1, fp
1a0069f0:	2300      	movs	r3, #0
1a0069f2:	220a      	movs	r2, #10
1a0069f4:	4650      	mov	r0, sl
1a0069f6:	f000 fd33 	bl	1a007460 <__multadd>
1a0069fa:	9b06      	ldr	r3, [sp, #24]
1a0069fc:	f103 38ff 	add.w	r8, r3, #4294967295
1a006a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006a02:	4683      	mov	fp, r0
1a006a04:	2b00      	cmp	r3, #0
1a006a06:	f47f af43 	bne.w	1a006890 <_dtoa_r+0x860>
1a006a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006a0c:	2b00      	cmp	r3, #0
1a006a0e:	f340 8202 	ble.w	1a006e16 <_dtoa_r+0xde6>
1a006a12:	9309      	str	r3, [sp, #36]	; 0x24
1a006a14:	e6d0      	b.n	1a0067b8 <_dtoa_r+0x788>
1a006a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006a18:	4659      	mov	r1, fp
1a006a1a:	4650      	mov	r0, sl
1a006a1c:	f000 fe58 	bl	1a0076d0 <__pow5mult>
1a006a20:	4683      	mov	fp, r0
1a006a22:	e686      	b.n	1a006732 <_dtoa_r+0x702>
1a006a24:	4b9f      	ldr	r3, [pc, #636]	; (1a006ca4 <_dtoa_r+0xc74>)
1a006a26:	9303      	str	r3, [sp, #12]
1a006a28:	3303      	adds	r3, #3
1a006a2a:	f7ff bbe5 	b.w	1a0061f8 <_dtoa_r+0x1c8>
1a006a2e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a006a32:	2900      	cmp	r1, #0
1a006a34:	f47f ae8a 	bne.w	1a00674c <_dtoa_r+0x71c>
1a006a38:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a006a3c:	2b00      	cmp	r3, #0
1a006a3e:	f000 80d5 	beq.w	1a006bec <_dtoa_r+0xbbc>
1a006a42:	9e00      	ldr	r6, [sp, #0]
1a006a44:	e683      	b.n	1a00674e <_dtoa_r+0x71e>
1a006a46:	2301      	movs	r3, #1
1a006a48:	930b      	str	r3, [sp, #44]	; 0x2c
1a006a4a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a006a4c:	2800      	cmp	r0, #0
1a006a4e:	dd46      	ble.n	1a006ade <_dtoa_r+0xaae>
1a006a50:	900f      	str	r0, [sp, #60]	; 0x3c
1a006a52:	9009      	str	r0, [sp, #36]	; 0x24
1a006a54:	2100      	movs	r1, #0
1a006a56:	2817      	cmp	r0, #23
1a006a58:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a006a5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a006a5e:	f77f ac19 	ble.w	1a006294 <_dtoa_r+0x264>
1a006a62:	2201      	movs	r2, #1
1a006a64:	2304      	movs	r3, #4
1a006a66:	005b      	lsls	r3, r3, #1
1a006a68:	f103 0614 	add.w	r6, r3, #20
1a006a6c:	42b0      	cmp	r0, r6
1a006a6e:	4611      	mov	r1, r2
1a006a70:	f102 0201 	add.w	r2, r2, #1
1a006a74:	d2f7      	bcs.n	1a006a66 <_dtoa_r+0xa36>
1a006a76:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a006a7a:	e40b      	b.n	1a006294 <_dtoa_r+0x264>
1a006a7c:	2301      	movs	r3, #1
1a006a7e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006a82:	9a06      	ldr	r2, [sp, #24]
1a006a84:	4413      	add	r3, r2
1a006a86:	930f      	str	r3, [sp, #60]	; 0x3c
1a006a88:	3301      	adds	r3, #1
1a006a8a:	2b01      	cmp	r3, #1
1a006a8c:	4618      	mov	r0, r3
1a006a8e:	9309      	str	r3, [sp, #36]	; 0x24
1a006a90:	bfb8      	it	lt
1a006a92:	2001      	movlt	r0, #1
1a006a94:	e7de      	b.n	1a006a54 <_dtoa_r+0xa24>
1a006a96:	2300      	movs	r3, #0
1a006a98:	930b      	str	r3, [sp, #44]	; 0x2c
1a006a9a:	e7f1      	b.n	1a006a80 <_dtoa_r+0xa50>
1a006a9c:	2300      	movs	r3, #0
1a006a9e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006aa0:	e7d3      	b.n	1a006a4a <_dtoa_r+0xa1a>
1a006aa2:	9b06      	ldr	r3, [sp, #24]
1a006aa4:	3301      	adds	r3, #1
1a006aa6:	9306      	str	r3, [sp, #24]
1a006aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006aaa:	2b00      	cmp	r3, #0
1a006aac:	f47f aefc 	bne.w	1a0068a8 <_dtoa_r+0x878>
1a006ab0:	4639      	mov	r1, r7
1a006ab2:	4658      	mov	r0, fp
1a006ab4:	f7ff fa28 	bl	1a005f08 <quorem>
1a006ab8:	9c03      	ldr	r4, [sp, #12]
1a006aba:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a006abe:	2300      	movs	r3, #0
1a006ac0:	f804 9b01 	strb.w	r9, [r4], #1
1a006ac4:	9300      	str	r3, [sp, #0]
1a006ac6:	e692      	b.n	1a0067ee <_dtoa_r+0x7be>
1a006ac8:	4629      	mov	r1, r5
1a006aca:	4622      	mov	r2, r4
1a006acc:	4650      	mov	r0, sl
1a006ace:	f000 fe4f 	bl	1a007770 <__lshift>
1a006ad2:	4605      	mov	r5, r0
1a006ad4:	e6eb      	b.n	1a0068ae <_dtoa_r+0x87e>
1a006ad6:	1b9e      	subs	r6, r3, r6
1a006ad8:	e5ce      	b.n	1a006678 <_dtoa_r+0x648>
1a006ada:	2602      	movs	r6, #2
1a006adc:	e403      	b.n	1a0062e6 <_dtoa_r+0x2b6>
1a006ade:	2501      	movs	r5, #1
1a006ae0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a006ae4:	f7ff bbd2 	b.w	1a00628c <_dtoa_r+0x25c>
1a006ae8:	d103      	bne.n	1a006af2 <_dtoa_r+0xac2>
1a006aea:	f019 0f01 	tst.w	r9, #1
1a006aee:	f47f ae8c 	bne.w	1a00680a <_dtoa_r+0x7da>
1a006af2:	1e63      	subs	r3, r4, #1
1a006af4:	e001      	b.n	1a006afa <_dtoa_r+0xaca>
1a006af6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a006afa:	2a30      	cmp	r2, #48	; 0x30
1a006afc:	f103 0401 	add.w	r4, r3, #1
1a006b00:	d0f9      	beq.n	1a006af6 <_dtoa_r+0xac6>
1a006b02:	e690      	b.n	1a006826 <_dtoa_r+0x7f6>
1a006b04:	9a06      	ldr	r2, [sp, #24]
1a006b06:	3201      	adds	r2, #1
1a006b08:	9206      	str	r2, [sp, #24]
1a006b0a:	9a03      	ldr	r2, [sp, #12]
1a006b0c:	2331      	movs	r3, #49	; 0x31
1a006b0e:	7013      	strb	r3, [r2, #0]
1a006b10:	e689      	b.n	1a006826 <_dtoa_r+0x7f6>
1a006b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a006b14:	2a00      	cmp	r2, #0
1a006b16:	f000 8126 	beq.w	1a006d66 <_dtoa_r+0xd36>
1a006b1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a006b1e:	9a08      	ldr	r2, [sp, #32]
1a006b20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006b22:	4614      	mov	r4, r2
1a006b24:	441a      	add	r2, r3
1a006b26:	4498      	add	r8, r3
1a006b28:	9208      	str	r2, [sp, #32]
1a006b2a:	e5ae      	b.n	1a00668a <_dtoa_r+0x65a>
1a006b2c:	4630      	mov	r0, r6
1a006b2e:	f7fb feaf 	bl	1a002890 <__aeabi_i2d>
1a006b32:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006b36:	f7fb ff15 	bl	1a002964 <__aeabi_dmul>
1a006b3a:	2200      	movs	r2, #0
1a006b3c:	4b5a      	ldr	r3, [pc, #360]	; (1a006ca8 <_dtoa_r+0xc78>)
1a006b3e:	f7fb fd5b 	bl	1a0025f8 <__adddf3>
1a006b42:	4604      	mov	r4, r0
1a006b44:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006b48:	2200      	movs	r2, #0
1a006b4a:	4b58      	ldr	r3, [pc, #352]	; (1a006cac <_dtoa_r+0xc7c>)
1a006b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006b50:	f7fb fd50 	bl	1a0025f4 <__aeabi_dsub>
1a006b54:	4622      	mov	r2, r4
1a006b56:	462b      	mov	r3, r5
1a006b58:	4606      	mov	r6, r0
1a006b5a:	460f      	mov	r7, r1
1a006b5c:	f7fc f992 	bl	1a002e84 <__aeabi_dcmpgt>
1a006b60:	2800      	cmp	r0, #0
1a006b62:	f040 8089 	bne.w	1a006c78 <_dtoa_r+0xc48>
1a006b66:	4622      	mov	r2, r4
1a006b68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a006b6c:	4630      	mov	r0, r6
1a006b6e:	4639      	mov	r1, r7
1a006b70:	f7fc f96a 	bl	1a002e48 <__aeabi_dcmplt>
1a006b74:	2800      	cmp	r0, #0
1a006b76:	f43f ac9c 	beq.w	1a0064b2 <_dtoa_r+0x482>
1a006b7a:	2700      	movs	r7, #0
1a006b7c:	463d      	mov	r5, r7
1a006b7e:	e4c0      	b.n	1a006502 <_dtoa_r+0x4d2>
1a006b80:	f000 80f5 	beq.w	1a006d6e <_dtoa_r+0xd3e>
1a006b84:	9b06      	ldr	r3, [sp, #24]
1a006b86:	425c      	negs	r4, r3
1a006b88:	4b49      	ldr	r3, [pc, #292]	; (1a006cb0 <_dtoa_r+0xc80>)
1a006b8a:	f004 020f 	and.w	r2, r4, #15
1a006b8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a006b9a:	f7fb fee3 	bl	1a002964 <__aeabi_dmul>
1a006b9e:	1124      	asrs	r4, r4, #4
1a006ba0:	e9cd 0100 	strd	r0, r1, [sp]
1a006ba4:	f000 80e3 	beq.w	1a006d6e <_dtoa_r+0xd3e>
1a006ba8:	4d42      	ldr	r5, [pc, #264]	; (1a006cb4 <_dtoa_r+0xc84>)
1a006baa:	2300      	movs	r3, #0
1a006bac:	2602      	movs	r6, #2
1a006bae:	07e2      	lsls	r2, r4, #31
1a006bb0:	d505      	bpl.n	1a006bbe <_dtoa_r+0xb8e>
1a006bb2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a006bb6:	f7fb fed5 	bl	1a002964 <__aeabi_dmul>
1a006bba:	3601      	adds	r6, #1
1a006bbc:	2301      	movs	r3, #1
1a006bbe:	1064      	asrs	r4, r4, #1
1a006bc0:	f105 0508 	add.w	r5, r5, #8
1a006bc4:	d1f3      	bne.n	1a006bae <_dtoa_r+0xb7e>
1a006bc6:	2b00      	cmp	r3, #0
1a006bc8:	f43f aba6 	beq.w	1a006318 <_dtoa_r+0x2e8>
1a006bcc:	e9cd 0100 	strd	r0, r1, [sp]
1a006bd0:	f7ff bba2 	b.w	1a006318 <_dtoa_r+0x2e8>
1a006bd4:	900d      	str	r0, [sp, #52]	; 0x34
1a006bd6:	e564      	b.n	1a0066a2 <_dtoa_r+0x672>
1a006bd8:	e9dd 1200 	ldrd	r1, r2, [sp]
1a006bdc:	2900      	cmp	r1, #0
1a006bde:	f47f ae49 	bne.w	1a006874 <_dtoa_r+0x844>
1a006be2:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a006be6:	2b00      	cmp	r3, #0
1a006be8:	f47f ae44 	bne.w	1a006874 <_dtoa_r+0x844>
1a006bec:	4e32      	ldr	r6, [pc, #200]	; (1a006cb8 <_dtoa_r+0xc88>)
1a006bee:	4016      	ands	r6, r2
1a006bf0:	2e00      	cmp	r6, #0
1a006bf2:	f43f adac 	beq.w	1a00674e <_dtoa_r+0x71e>
1a006bf6:	9b08      	ldr	r3, [sp, #32]
1a006bf8:	3301      	adds	r3, #1
1a006bfa:	9308      	str	r3, [sp, #32]
1a006bfc:	f108 0801 	add.w	r8, r8, #1
1a006c00:	2601      	movs	r6, #1
1a006c02:	e5a4      	b.n	1a00674e <_dtoa_r+0x71e>
1a006c04:	2b00      	cmp	r3, #0
1a006c06:	4627      	mov	r7, r4
1a006c08:	464c      	mov	r4, r9
1a006c0a:	4691      	mov	r9, r2
1a006c0c:	dd12      	ble.n	1a006c34 <_dtoa_r+0xc04>
1a006c0e:	4659      	mov	r1, fp
1a006c10:	2201      	movs	r2, #1
1a006c12:	4650      	mov	r0, sl
1a006c14:	f000 fdac 	bl	1a007770 <__lshift>
1a006c18:	4639      	mov	r1, r7
1a006c1a:	4683      	mov	fp, r0
1a006c1c:	f000 fe02 	bl	1a007824 <__mcmp>
1a006c20:	2800      	cmp	r0, #0
1a006c22:	f340 80df 	ble.w	1a006de4 <_dtoa_r+0xdb4>
1a006c26:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a006c2a:	f000 80d0 	beq.w	1a006dce <_dtoa_r+0xd9e>
1a006c2e:	9b00      	ldr	r3, [sp, #0]
1a006c30:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a006c34:	9500      	str	r5, [sp, #0]
1a006c36:	f886 9000 	strb.w	r9, [r6]
1a006c3a:	4645      	mov	r5, r8
1a006c3c:	e5f3      	b.n	1a006826 <_dtoa_r+0x7f6>
1a006c3e:	6869      	ldr	r1, [r5, #4]
1a006c40:	4650      	mov	r0, sl
1a006c42:	f000 fbdd 	bl	1a007400 <_Balloc>
1a006c46:	692b      	ldr	r3, [r5, #16]
1a006c48:	3302      	adds	r3, #2
1a006c4a:	009a      	lsls	r2, r3, #2
1a006c4c:	4604      	mov	r4, r0
1a006c4e:	f105 010c 	add.w	r1, r5, #12
1a006c52:	300c      	adds	r0, #12
1a006c54:	f7fd f8e6 	bl	1a003e24 <memcpy>
1a006c58:	4621      	mov	r1, r4
1a006c5a:	2201      	movs	r2, #1
1a006c5c:	4650      	mov	r0, sl
1a006c5e:	f000 fd87 	bl	1a007770 <__lshift>
1a006c62:	4680      	mov	r8, r0
1a006c64:	e627      	b.n	1a0068b6 <_dtoa_r+0x886>
1a006c66:	f8dd b000 	ldr.w	fp, [sp]
1a006c6a:	f8dd a008 	ldr.w	sl, [sp, #8]
1a006c6e:	e406      	b.n	1a00647e <_dtoa_r+0x44e>
1a006c70:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a006c74:	1a9c      	subs	r4, r3, r2
1a006c76:	e508      	b.n	1a00668a <_dtoa_r+0x65a>
1a006c78:	2700      	movs	r7, #0
1a006c7a:	463d      	mov	r5, r7
1a006c7c:	e6a0      	b.n	1a0069c0 <_dtoa_r+0x990>
1a006c7e:	2a39      	cmp	r2, #57	; 0x39
1a006c80:	4627      	mov	r7, r4
1a006c82:	464c      	mov	r4, r9
1a006c84:	f000 80a3 	beq.w	1a006dce <_dtoa_r+0xd9e>
1a006c88:	f102 0901 	add.w	r9, r2, #1
1a006c8c:	9500      	str	r5, [sp, #0]
1a006c8e:	f886 9000 	strb.w	r9, [r6]
1a006c92:	4645      	mov	r5, r8
1a006c94:	e5c7      	b.n	1a006826 <_dtoa_r+0x7f6>
1a006c96:	4627      	mov	r7, r4
1a006c98:	9500      	str	r5, [sp, #0]
1a006c9a:	464c      	mov	r4, r9
1a006c9c:	4645      	mov	r5, r8
1a006c9e:	4691      	mov	r9, r2
1a006ca0:	e5a5      	b.n	1a0067ee <_dtoa_r+0x7be>
1a006ca2:	bf00      	nop
1a006ca4:	1a00878c 	.word	0x1a00878c
1a006ca8:	401c0000 	.word	0x401c0000
1a006cac:	40140000 	.word	0x40140000
1a006cb0:	1a0087c8 	.word	0x1a0087c8
1a006cb4:	1a0087a0 	.word	0x1a0087a0
1a006cb8:	7ff00000 	.word	0x7ff00000
1a006cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006cc0:	f7fb fe50 	bl	1a002964 <__aeabi_dmul>
1a006cc4:	9b03      	ldr	r3, [sp, #12]
1a006cc6:	701d      	strb	r5, [r3, #0]
1a006cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006cca:	2b01      	cmp	r3, #1
1a006ccc:	e9cd 0100 	strd	r0, r1, [sp]
1a006cd0:	d023      	beq.n	1a006d1a <_dtoa_r+0xcea>
1a006cd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006cd4:	9a03      	ldr	r2, [sp, #12]
1a006cd6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a006cda:	4413      	add	r3, r2
1a006cdc:	46c1      	mov	r9, r8
1a006cde:	4698      	mov	r8, r3
1a006ce0:	2200      	movs	r2, #0
1a006ce2:	4b64      	ldr	r3, [pc, #400]	; (1a006e74 <_dtoa_r+0xe44>)
1a006ce4:	4630      	mov	r0, r6
1a006ce6:	4639      	mov	r1, r7
1a006ce8:	f7fb fe3c 	bl	1a002964 <__aeabi_dmul>
1a006cec:	460f      	mov	r7, r1
1a006cee:	4606      	mov	r6, r0
1a006cf0:	f001 fa60 	bl	1a0081b4 <__aeabi_d2iz>
1a006cf4:	4605      	mov	r5, r0
1a006cf6:	f7fb fdcb 	bl	1a002890 <__aeabi_i2d>
1a006cfa:	3530      	adds	r5, #48	; 0x30
1a006cfc:	4602      	mov	r2, r0
1a006cfe:	460b      	mov	r3, r1
1a006d00:	4630      	mov	r0, r6
1a006d02:	4639      	mov	r1, r7
1a006d04:	f7fb fc76 	bl	1a0025f4 <__aeabi_dsub>
1a006d08:	f804 5b01 	strb.w	r5, [r4], #1
1a006d0c:	45a0      	cmp	r8, r4
1a006d0e:	4606      	mov	r6, r0
1a006d10:	460f      	mov	r7, r1
1a006d12:	d1e5      	bne.n	1a006ce0 <_dtoa_r+0xcb0>
1a006d14:	46c8      	mov	r8, r9
1a006d16:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a006d1a:	4b57      	ldr	r3, [pc, #348]	; (1a006e78 <_dtoa_r+0xe48>)
1a006d1c:	2200      	movs	r2, #0
1a006d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006d22:	f7fb fc69 	bl	1a0025f8 <__adddf3>
1a006d26:	4632      	mov	r2, r6
1a006d28:	463b      	mov	r3, r7
1a006d2a:	f7fc f88d 	bl	1a002e48 <__aeabi_dcmplt>
1a006d2e:	2800      	cmp	r0, #0
1a006d30:	d152      	bne.n	1a006dd8 <_dtoa_r+0xda8>
1a006d32:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006d36:	2000      	movs	r0, #0
1a006d38:	494f      	ldr	r1, [pc, #316]	; (1a006e78 <_dtoa_r+0xe48>)
1a006d3a:	f7fb fc5b 	bl	1a0025f4 <__aeabi_dsub>
1a006d3e:	4632      	mov	r2, r6
1a006d40:	463b      	mov	r3, r7
1a006d42:	f7fc f89f 	bl	1a002e84 <__aeabi_dcmpgt>
1a006d46:	2800      	cmp	r0, #0
1a006d48:	f43f abb3 	beq.w	1a0064b2 <_dtoa_r+0x482>
1a006d4c:	e000      	b.n	1a006d50 <_dtoa_r+0xd20>
1a006d4e:	4614      	mov	r4, r2
1a006d50:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a006d54:	2b30      	cmp	r3, #48	; 0x30
1a006d56:	f104 32ff 	add.w	r2, r4, #4294967295
1a006d5a:	d0f8      	beq.n	1a006d4e <_dtoa_r+0xd1e>
1a006d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006d5e:	3301      	adds	r3, #1
1a006d60:	9306      	str	r3, [sp, #24]
1a006d62:	f7ff bb8c 	b.w	1a00647e <_dtoa_r+0x44e>
1a006d66:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a006d68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a006d6c:	e6d7      	b.n	1a006b1e <_dtoa_r+0xaee>
1a006d6e:	2602      	movs	r6, #2
1a006d70:	f7ff bad2 	b.w	1a006318 <_dtoa_r+0x2e8>
1a006d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006d76:	2b00      	cmp	r3, #0
1a006d78:	f43f aed8 	beq.w	1a006b2c <_dtoa_r+0xafc>
1a006d7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a006d7e:	2f00      	cmp	r7, #0
1a006d80:	f77f ab97 	ble.w	1a0064b2 <_dtoa_r+0x482>
1a006d84:	2200      	movs	r2, #0
1a006d86:	4b3b      	ldr	r3, [pc, #236]	; (1a006e74 <_dtoa_r+0xe44>)
1a006d88:	4620      	mov	r0, r4
1a006d8a:	4629      	mov	r1, r5
1a006d8c:	f7fb fdea 	bl	1a002964 <__aeabi_dmul>
1a006d90:	4604      	mov	r4, r0
1a006d92:	460d      	mov	r5, r1
1a006d94:	1c70      	adds	r0, r6, #1
1a006d96:	e9cd 4500 	strd	r4, r5, [sp]
1a006d9a:	f7fb fd79 	bl	1a002890 <__aeabi_i2d>
1a006d9e:	4622      	mov	r2, r4
1a006da0:	462b      	mov	r3, r5
1a006da2:	f7fb fddf 	bl	1a002964 <__aeabi_dmul>
1a006da6:	4b35      	ldr	r3, [pc, #212]	; (1a006e7c <_dtoa_r+0xe4c>)
1a006da8:	2200      	movs	r2, #0
1a006daa:	f7fb fc25 	bl	1a0025f8 <__adddf3>
1a006dae:	9b06      	ldr	r3, [sp, #24]
1a006db0:	9710      	str	r7, [sp, #64]	; 0x40
1a006db2:	3b01      	subs	r3, #1
1a006db4:	4604      	mov	r4, r0
1a006db6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006dba:	9312      	str	r3, [sp, #72]	; 0x48
1a006dbc:	f7ff bacf 	b.w	1a00635e <_dtoa_r+0x32e>
1a006dc0:	9a06      	ldr	r2, [sp, #24]
1a006dc2:	3201      	adds	r2, #1
1a006dc4:	9206      	str	r2, [sp, #24]
1a006dc6:	2231      	movs	r2, #49	; 0x31
1a006dc8:	701a      	strb	r2, [r3, #0]
1a006dca:	f7ff bb58 	b.w	1a00647e <_dtoa_r+0x44e>
1a006dce:	2239      	movs	r2, #57	; 0x39
1a006dd0:	9500      	str	r5, [sp, #0]
1a006dd2:	7032      	strb	r2, [r6, #0]
1a006dd4:	4645      	mov	r5, r8
1a006dd6:	e518      	b.n	1a00680a <_dtoa_r+0x7da>
1a006dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006dda:	3301      	adds	r3, #1
1a006ddc:	9306      	str	r3, [sp, #24]
1a006dde:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006de2:	e427      	b.n	1a006634 <_dtoa_r+0x604>
1a006de4:	f47f af26 	bne.w	1a006c34 <_dtoa_r+0xc04>
1a006de8:	f019 0f01 	tst.w	r9, #1
1a006dec:	f47f af1b 	bne.w	1a006c26 <_dtoa_r+0xbf6>
1a006df0:	e720      	b.n	1a006c34 <_dtoa_r+0xc04>
1a006df2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006df4:	3301      	adds	r3, #1
1a006df6:	46da      	mov	sl, fp
1a006df8:	9306      	str	r3, [sp, #24]
1a006dfa:	f8dd b000 	ldr.w	fp, [sp]
1a006dfe:	e419      	b.n	1a006634 <_dtoa_r+0x604>
1a006e00:	2a39      	cmp	r2, #57	; 0x39
1a006e02:	463b      	mov	r3, r7
1a006e04:	4691      	mov	r9, r2
1a006e06:	4627      	mov	r7, r4
1a006e08:	f106 0401 	add.w	r4, r6, #1
1a006e0c:	d0df      	beq.n	1a006dce <_dtoa_r+0xd9e>
1a006e0e:	2b00      	cmp	r3, #0
1a006e10:	f73f af0d 	bgt.w	1a006c2e <_dtoa_r+0xbfe>
1a006e14:	e70e      	b.n	1a006c34 <_dtoa_r+0xc04>
1a006e16:	9b02      	ldr	r3, [sp, #8]
1a006e18:	2b02      	cmp	r3, #2
1a006e1a:	f77f ae49 	ble.w	1a006ab0 <_dtoa_r+0xa80>
1a006e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006e20:	9309      	str	r3, [sp, #36]	; 0x24
1a006e22:	f8cd 8018 	str.w	r8, [sp, #24]
1a006e26:	e5ba      	b.n	1a00699e <_dtoa_r+0x96e>
1a006e28:	9b02      	ldr	r3, [sp, #8]
1a006e2a:	2b02      	cmp	r3, #2
1a006e2c:	dcf7      	bgt.n	1a006e1e <_dtoa_r+0xdee>
1a006e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006e30:	e539      	b.n	1a0068a6 <_dtoa_r+0x876>
1a006e32:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006e34:	3301      	adds	r3, #1
1a006e36:	9306      	str	r3, [sp, #24]
1a006e38:	f7ff bbfc 	b.w	1a006634 <_dtoa_r+0x604>
1a006e3c:	4b10      	ldr	r3, [pc, #64]	; (1a006e80 <_dtoa_r+0xe50>)
1a006e3e:	9303      	str	r3, [sp, #12]
1a006e40:	f7ff b934 	b.w	1a0060ac <_dtoa_r+0x7c>
1a006e44:	f43f ac98 	beq.w	1a006778 <_dtoa_r+0x748>
1a006e48:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a006e4c:	e48f      	b.n	1a00676e <_dtoa_r+0x73e>
1a006e4e:	2400      	movs	r4, #0
1a006e50:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a006e54:	4621      	mov	r1, r4
1a006e56:	4650      	mov	r0, sl
1a006e58:	f000 fad2 	bl	1a007400 <_Balloc>
1a006e5c:	f04f 33ff 	mov.w	r3, #4294967295
1a006e60:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a006e64:	930f      	str	r3, [sp, #60]	; 0x3c
1a006e66:	2301      	movs	r3, #1
1a006e68:	9003      	str	r0, [sp, #12]
1a006e6a:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a006e6e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006e70:	f7ff bb23 	b.w	1a0064ba <_dtoa_r+0x48a>
1a006e74:	40240000 	.word	0x40240000
1a006e78:	3fe00000 	.word	0x3fe00000
1a006e7c:	401c0000 	.word	0x401c0000
1a006e80:	1a008790 	.word	0x1a008790

1a006e84 <__sfvwrite_r>:
1a006e84:	6893      	ldr	r3, [r2, #8]
1a006e86:	2b00      	cmp	r3, #0
1a006e88:	f000 8102 	beq.w	1a007090 <__sfvwrite_r+0x20c>
1a006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006e90:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a006e94:	b29b      	uxth	r3, r3
1a006e96:	460c      	mov	r4, r1
1a006e98:	0719      	lsls	r1, r3, #28
1a006e9a:	b083      	sub	sp, #12
1a006e9c:	4682      	mov	sl, r0
1a006e9e:	4690      	mov	r8, r2
1a006ea0:	d535      	bpl.n	1a006f0e <__sfvwrite_r+0x8a>
1a006ea2:	6922      	ldr	r2, [r4, #16]
1a006ea4:	b39a      	cbz	r2, 1a006f0e <__sfvwrite_r+0x8a>
1a006ea6:	f013 0202 	ands.w	r2, r3, #2
1a006eaa:	f8d8 6000 	ldr.w	r6, [r8]
1a006eae:	d03d      	beq.n	1a006f2c <__sfvwrite_r+0xa8>
1a006eb0:	2700      	movs	r7, #0
1a006eb2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006eb6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a006eba:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a007188 <__sfvwrite_r+0x304>
1a006ebe:	463d      	mov	r5, r7
1a006ec0:	454d      	cmp	r5, r9
1a006ec2:	462b      	mov	r3, r5
1a006ec4:	463a      	mov	r2, r7
1a006ec6:	bf28      	it	cs
1a006ec8:	464b      	movcs	r3, r9
1a006eca:	4661      	mov	r1, ip
1a006ecc:	4650      	mov	r0, sl
1a006ece:	b1d5      	cbz	r5, 1a006f06 <__sfvwrite_r+0x82>
1a006ed0:	47d8      	blx	fp
1a006ed2:	2800      	cmp	r0, #0
1a006ed4:	f340 80d2 	ble.w	1a00707c <__sfvwrite_r+0x1f8>
1a006ed8:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006edc:	1a1b      	subs	r3, r3, r0
1a006ede:	4407      	add	r7, r0
1a006ee0:	1a2d      	subs	r5, r5, r0
1a006ee2:	f8c8 3008 	str.w	r3, [r8, #8]
1a006ee6:	2b00      	cmp	r3, #0
1a006ee8:	f000 80b7 	beq.w	1a00705a <__sfvwrite_r+0x1d6>
1a006eec:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a006ef0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006ef4:	454d      	cmp	r5, r9
1a006ef6:	462b      	mov	r3, r5
1a006ef8:	463a      	mov	r2, r7
1a006efa:	bf28      	it	cs
1a006efc:	464b      	movcs	r3, r9
1a006efe:	4661      	mov	r1, ip
1a006f00:	4650      	mov	r0, sl
1a006f02:	2d00      	cmp	r5, #0
1a006f04:	d1e4      	bne.n	1a006ed0 <__sfvwrite_r+0x4c>
1a006f06:	e9d6 7500 	ldrd	r7, r5, [r6]
1a006f0a:	3608      	adds	r6, #8
1a006f0c:	e7d8      	b.n	1a006ec0 <__sfvwrite_r+0x3c>
1a006f0e:	4621      	mov	r1, r4
1a006f10:	4650      	mov	r0, sl
1a006f12:	f7fe ff91 	bl	1a005e38 <__swsetup_r>
1a006f16:	2800      	cmp	r0, #0
1a006f18:	f040 8130 	bne.w	1a00717c <__sfvwrite_r+0x2f8>
1a006f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006f20:	f8d8 6000 	ldr.w	r6, [r8]
1a006f24:	b29b      	uxth	r3, r3
1a006f26:	f013 0202 	ands.w	r2, r3, #2
1a006f2a:	d1c1      	bne.n	1a006eb0 <__sfvwrite_r+0x2c>
1a006f2c:	f013 0901 	ands.w	r9, r3, #1
1a006f30:	f040 80b0 	bne.w	1a007094 <__sfvwrite_r+0x210>
1a006f34:	68a7      	ldr	r7, [r4, #8]
1a006f36:	6820      	ldr	r0, [r4, #0]
1a006f38:	464d      	mov	r5, r9
1a006f3a:	2d00      	cmp	r5, #0
1a006f3c:	d054      	beq.n	1a006fe8 <__sfvwrite_r+0x164>
1a006f3e:	059a      	lsls	r2, r3, #22
1a006f40:	f140 80bc 	bpl.w	1a0070bc <__sfvwrite_r+0x238>
1a006f44:	42af      	cmp	r7, r5
1a006f46:	46bb      	mov	fp, r7
1a006f48:	f200 80e7 	bhi.w	1a00711a <__sfvwrite_r+0x296>
1a006f4c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a006f50:	d02f      	beq.n	1a006fb2 <__sfvwrite_r+0x12e>
1a006f52:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a006f56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a006f5a:	eba0 0b01 	sub.w	fp, r0, r1
1a006f5e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a006f62:	1c68      	adds	r0, r5, #1
1a006f64:	107f      	asrs	r7, r7, #1
1a006f66:	4458      	add	r0, fp
1a006f68:	42b8      	cmp	r0, r7
1a006f6a:	463a      	mov	r2, r7
1a006f6c:	bf84      	itt	hi
1a006f6e:	4607      	movhi	r7, r0
1a006f70:	463a      	movhi	r2, r7
1a006f72:	055b      	lsls	r3, r3, #21
1a006f74:	f140 80e9 	bpl.w	1a00714a <__sfvwrite_r+0x2c6>
1a006f78:	4611      	mov	r1, r2
1a006f7a:	4650      	mov	r0, sl
1a006f7c:	f7fc fc9a 	bl	1a0038b4 <_malloc_r>
1a006f80:	2800      	cmp	r0, #0
1a006f82:	f000 80f5 	beq.w	1a007170 <__sfvwrite_r+0x2ec>
1a006f86:	465a      	mov	r2, fp
1a006f88:	6921      	ldr	r1, [r4, #16]
1a006f8a:	9001      	str	r0, [sp, #4]
1a006f8c:	f7fc ff4a 	bl	1a003e24 <memcpy>
1a006f90:	89a2      	ldrh	r2, [r4, #12]
1a006f92:	9b01      	ldr	r3, [sp, #4]
1a006f94:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a006f9c:	81a2      	strh	r2, [r4, #12]
1a006f9e:	eba7 020b 	sub.w	r2, r7, fp
1a006fa2:	eb03 000b 	add.w	r0, r3, fp
1a006fa6:	6167      	str	r7, [r4, #20]
1a006fa8:	6123      	str	r3, [r4, #16]
1a006faa:	6020      	str	r0, [r4, #0]
1a006fac:	60a2      	str	r2, [r4, #8]
1a006fae:	462f      	mov	r7, r5
1a006fb0:	46ab      	mov	fp, r5
1a006fb2:	465a      	mov	r2, fp
1a006fb4:	4649      	mov	r1, r9
1a006fb6:	f000 f9bb 	bl	1a007330 <memmove>
1a006fba:	68a2      	ldr	r2, [r4, #8]
1a006fbc:	6823      	ldr	r3, [r4, #0]
1a006fbe:	1bd2      	subs	r2, r2, r7
1a006fc0:	445b      	add	r3, fp
1a006fc2:	462f      	mov	r7, r5
1a006fc4:	60a2      	str	r2, [r4, #8]
1a006fc6:	6023      	str	r3, [r4, #0]
1a006fc8:	2500      	movs	r5, #0
1a006fca:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006fce:	1bdb      	subs	r3, r3, r7
1a006fd0:	44b9      	add	r9, r7
1a006fd2:	f8c8 3008 	str.w	r3, [r8, #8]
1a006fd6:	2b00      	cmp	r3, #0
1a006fd8:	d03f      	beq.n	1a00705a <__sfvwrite_r+0x1d6>
1a006fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006fde:	68a7      	ldr	r7, [r4, #8]
1a006fe0:	6820      	ldr	r0, [r4, #0]
1a006fe2:	b29b      	uxth	r3, r3
1a006fe4:	2d00      	cmp	r5, #0
1a006fe6:	d1aa      	bne.n	1a006f3e <__sfvwrite_r+0xba>
1a006fe8:	e9d6 9500 	ldrd	r9, r5, [r6]
1a006fec:	3608      	adds	r6, #8
1a006fee:	e7a4      	b.n	1a006f3a <__sfvwrite_r+0xb6>
1a006ff0:	f10b 0308 	add.w	r3, fp, #8
1a006ff4:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a006ff8:	469b      	mov	fp, r3
1a006ffa:	3308      	adds	r3, #8
1a006ffc:	2f00      	cmp	r7, #0
1a006ffe:	d0f9      	beq.n	1a006ff4 <__sfvwrite_r+0x170>
1a007000:	463a      	mov	r2, r7
1a007002:	210a      	movs	r1, #10
1a007004:	4630      	mov	r0, r6
1a007006:	f000 f943 	bl	1a007290 <memchr>
1a00700a:	2800      	cmp	r0, #0
1a00700c:	d053      	beq.n	1a0070b6 <__sfvwrite_r+0x232>
1a00700e:	3001      	adds	r0, #1
1a007010:	eba0 0906 	sub.w	r9, r0, r6
1a007014:	464b      	mov	r3, r9
1a007016:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a00701a:	6820      	ldr	r0, [r4, #0]
1a00701c:	42bb      	cmp	r3, r7
1a00701e:	bf28      	it	cs
1a007020:	463b      	movcs	r3, r7
1a007022:	4288      	cmp	r0, r1
1a007024:	d903      	bls.n	1a00702e <__sfvwrite_r+0x1aa>
1a007026:	68a5      	ldr	r5, [r4, #8]
1a007028:	4415      	add	r5, r2
1a00702a:	42ab      	cmp	r3, r5
1a00702c:	dc19      	bgt.n	1a007062 <__sfvwrite_r+0x1de>
1a00702e:	429a      	cmp	r2, r3
1a007030:	dc7d      	bgt.n	1a00712e <__sfvwrite_r+0x2aa>
1a007032:	4613      	mov	r3, r2
1a007034:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a007036:	69e1      	ldr	r1, [r4, #28]
1a007038:	4632      	mov	r2, r6
1a00703a:	4650      	mov	r0, sl
1a00703c:	47a8      	blx	r5
1a00703e:	1e05      	subs	r5, r0, #0
1a007040:	dd1c      	ble.n	1a00707c <__sfvwrite_r+0x1f8>
1a007042:	ebb9 0905 	subs.w	r9, r9, r5
1a007046:	d06b      	beq.n	1a007120 <__sfvwrite_r+0x29c>
1a007048:	2001      	movs	r0, #1
1a00704a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00704e:	1b5b      	subs	r3, r3, r5
1a007050:	442e      	add	r6, r5
1a007052:	1b7f      	subs	r7, r7, r5
1a007054:	f8c8 3008 	str.w	r3, [r8, #8]
1a007058:	bb13      	cbnz	r3, 1a0070a0 <__sfvwrite_r+0x21c>
1a00705a:	2000      	movs	r0, #0
1a00705c:	b003      	add	sp, #12
1a00705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007062:	4631      	mov	r1, r6
1a007064:	462a      	mov	r2, r5
1a007066:	f000 f963 	bl	1a007330 <memmove>
1a00706a:	6823      	ldr	r3, [r4, #0]
1a00706c:	442b      	add	r3, r5
1a00706e:	6023      	str	r3, [r4, #0]
1a007070:	4621      	mov	r1, r4
1a007072:	4650      	mov	r0, sl
1a007074:	f7fc f9f0 	bl	1a003458 <_fflush_r>
1a007078:	2800      	cmp	r0, #0
1a00707a:	d0e2      	beq.n	1a007042 <__sfvwrite_r+0x1be>
1a00707c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007084:	f04f 30ff 	mov.w	r0, #4294967295
1a007088:	81a3      	strh	r3, [r4, #12]
1a00708a:	b003      	add	sp, #12
1a00708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007090:	2000      	movs	r0, #0
1a007092:	4770      	bx	lr
1a007094:	4633      	mov	r3, r6
1a007096:	4691      	mov	r9, r2
1a007098:	4610      	mov	r0, r2
1a00709a:	4617      	mov	r7, r2
1a00709c:	464e      	mov	r6, r9
1a00709e:	469b      	mov	fp, r3
1a0070a0:	2f00      	cmp	r7, #0
1a0070a2:	d0a5      	beq.n	1a006ff0 <__sfvwrite_r+0x16c>
1a0070a4:	2800      	cmp	r0, #0
1a0070a6:	d1b5      	bne.n	1a007014 <__sfvwrite_r+0x190>
1a0070a8:	463a      	mov	r2, r7
1a0070aa:	210a      	movs	r1, #10
1a0070ac:	4630      	mov	r0, r6
1a0070ae:	f000 f8ef 	bl	1a007290 <memchr>
1a0070b2:	2800      	cmp	r0, #0
1a0070b4:	d1ab      	bne.n	1a00700e <__sfvwrite_r+0x18a>
1a0070b6:	1c7b      	adds	r3, r7, #1
1a0070b8:	4699      	mov	r9, r3
1a0070ba:	e7ac      	b.n	1a007016 <__sfvwrite_r+0x192>
1a0070bc:	6923      	ldr	r3, [r4, #16]
1a0070be:	4283      	cmp	r3, r0
1a0070c0:	d315      	bcc.n	1a0070ee <__sfvwrite_r+0x26a>
1a0070c2:	6961      	ldr	r1, [r4, #20]
1a0070c4:	42a9      	cmp	r1, r5
1a0070c6:	d812      	bhi.n	1a0070ee <__sfvwrite_r+0x26a>
1a0070c8:	4b2e      	ldr	r3, [pc, #184]	; (1a007184 <__sfvwrite_r+0x300>)
1a0070ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0070cc:	429d      	cmp	r5, r3
1a0070ce:	bf94      	ite	ls
1a0070d0:	462b      	movls	r3, r5
1a0070d2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a0070d6:	464a      	mov	r2, r9
1a0070d8:	fb93 f3f1 	sdiv	r3, r3, r1
1a0070dc:	4650      	mov	r0, sl
1a0070de:	fb01 f303 	mul.w	r3, r1, r3
1a0070e2:	69e1      	ldr	r1, [r4, #28]
1a0070e4:	47b8      	blx	r7
1a0070e6:	1e07      	subs	r7, r0, #0
1a0070e8:	ddc8      	ble.n	1a00707c <__sfvwrite_r+0x1f8>
1a0070ea:	1bed      	subs	r5, r5, r7
1a0070ec:	e76d      	b.n	1a006fca <__sfvwrite_r+0x146>
1a0070ee:	42af      	cmp	r7, r5
1a0070f0:	bf28      	it	cs
1a0070f2:	462f      	movcs	r7, r5
1a0070f4:	463a      	mov	r2, r7
1a0070f6:	4649      	mov	r1, r9
1a0070f8:	f000 f91a 	bl	1a007330 <memmove>
1a0070fc:	68a3      	ldr	r3, [r4, #8]
1a0070fe:	6822      	ldr	r2, [r4, #0]
1a007100:	1bdb      	subs	r3, r3, r7
1a007102:	443a      	add	r2, r7
1a007104:	60a3      	str	r3, [r4, #8]
1a007106:	6022      	str	r2, [r4, #0]
1a007108:	2b00      	cmp	r3, #0
1a00710a:	d1ee      	bne.n	1a0070ea <__sfvwrite_r+0x266>
1a00710c:	4621      	mov	r1, r4
1a00710e:	4650      	mov	r0, sl
1a007110:	f7fc f9a2 	bl	1a003458 <_fflush_r>
1a007114:	2800      	cmp	r0, #0
1a007116:	d0e8      	beq.n	1a0070ea <__sfvwrite_r+0x266>
1a007118:	e7b0      	b.n	1a00707c <__sfvwrite_r+0x1f8>
1a00711a:	462f      	mov	r7, r5
1a00711c:	46ab      	mov	fp, r5
1a00711e:	e748      	b.n	1a006fb2 <__sfvwrite_r+0x12e>
1a007120:	4621      	mov	r1, r4
1a007122:	4650      	mov	r0, sl
1a007124:	f7fc f998 	bl	1a003458 <_fflush_r>
1a007128:	2800      	cmp	r0, #0
1a00712a:	d08e      	beq.n	1a00704a <__sfvwrite_r+0x1c6>
1a00712c:	e7a6      	b.n	1a00707c <__sfvwrite_r+0x1f8>
1a00712e:	461a      	mov	r2, r3
1a007130:	4631      	mov	r1, r6
1a007132:	9301      	str	r3, [sp, #4]
1a007134:	f000 f8fc 	bl	1a007330 <memmove>
1a007138:	9b01      	ldr	r3, [sp, #4]
1a00713a:	68a1      	ldr	r1, [r4, #8]
1a00713c:	6822      	ldr	r2, [r4, #0]
1a00713e:	1ac9      	subs	r1, r1, r3
1a007140:	441a      	add	r2, r3
1a007142:	60a1      	str	r1, [r4, #8]
1a007144:	6022      	str	r2, [r4, #0]
1a007146:	461d      	mov	r5, r3
1a007148:	e77b      	b.n	1a007042 <__sfvwrite_r+0x1be>
1a00714a:	4650      	mov	r0, sl
1a00714c:	f000 fc62 	bl	1a007a14 <_realloc_r>
1a007150:	4603      	mov	r3, r0
1a007152:	2800      	cmp	r0, #0
1a007154:	f47f af23 	bne.w	1a006f9e <__sfvwrite_r+0x11a>
1a007158:	6921      	ldr	r1, [r4, #16]
1a00715a:	4650      	mov	r0, sl
1a00715c:	f7fc fa5e 	bl	1a00361c <_free_r>
1a007160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007164:	220c      	movs	r2, #12
1a007166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00716a:	f8ca 2000 	str.w	r2, [sl]
1a00716e:	e787      	b.n	1a007080 <__sfvwrite_r+0x1fc>
1a007170:	230c      	movs	r3, #12
1a007172:	f8ca 3000 	str.w	r3, [sl]
1a007176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00717a:	e781      	b.n	1a007080 <__sfvwrite_r+0x1fc>
1a00717c:	f04f 30ff 	mov.w	r0, #4294967295
1a007180:	e76c      	b.n	1a00705c <__sfvwrite_r+0x1d8>
1a007182:	bf00      	nop
1a007184:	7ffffffe 	.word	0x7ffffffe
1a007188:	7ffffc00 	.word	0x7ffffc00

1a00718c <_localeconv_r>:
1a00718c:	4800      	ldr	r0, [pc, #0]	; (1a007190 <_localeconv_r+0x4>)
1a00718e:	4770      	bx	lr
1a007190:	10000978 	.word	0x10000978

1a007194 <__swhatbuf_r>:
1a007194:	b570      	push	{r4, r5, r6, lr}
1a007196:	460c      	mov	r4, r1
1a007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00719c:	2900      	cmp	r1, #0
1a00719e:	b096      	sub	sp, #88	; 0x58
1a0071a0:	4615      	mov	r5, r2
1a0071a2:	461e      	mov	r6, r3
1a0071a4:	db14      	blt.n	1a0071d0 <__swhatbuf_r+0x3c>
1a0071a6:	466a      	mov	r2, sp
1a0071a8:	f7f9 f9b1 	bl	1a00050e <_fstat_r>
1a0071ac:	2800      	cmp	r0, #0
1a0071ae:	db0f      	blt.n	1a0071d0 <__swhatbuf_r+0x3c>
1a0071b0:	9a01      	ldr	r2, [sp, #4]
1a0071b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0071b6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a0071ba:	fab2 f282 	clz	r2, r2
1a0071be:	0952      	lsrs	r2, r2, #5
1a0071c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0071c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0071c8:	6032      	str	r2, [r6, #0]
1a0071ca:	602b      	str	r3, [r5, #0]
1a0071cc:	b016      	add	sp, #88	; 0x58
1a0071ce:	bd70      	pop	{r4, r5, r6, pc}
1a0071d0:	89a2      	ldrh	r2, [r4, #12]
1a0071d2:	2300      	movs	r3, #0
1a0071d4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a0071d8:	6033      	str	r3, [r6, #0]
1a0071da:	d004      	beq.n	1a0071e6 <__swhatbuf_r+0x52>
1a0071dc:	2240      	movs	r2, #64	; 0x40
1a0071de:	4618      	mov	r0, r3
1a0071e0:	602a      	str	r2, [r5, #0]
1a0071e2:	b016      	add	sp, #88	; 0x58
1a0071e4:	bd70      	pop	{r4, r5, r6, pc}
1a0071e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0071ea:	602b      	str	r3, [r5, #0]
1a0071ec:	b016      	add	sp, #88	; 0x58
1a0071ee:	bd70      	pop	{r4, r5, r6, pc}

1a0071f0 <__smakebuf_r>:
1a0071f0:	898a      	ldrh	r2, [r1, #12]
1a0071f2:	0792      	lsls	r2, r2, #30
1a0071f4:	460b      	mov	r3, r1
1a0071f6:	d506      	bpl.n	1a007206 <__smakebuf_r+0x16>
1a0071f8:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a0071fc:	2101      	movs	r1, #1
1a0071fe:	601a      	str	r2, [r3, #0]
1a007200:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a007204:	4770      	bx	lr
1a007206:	b570      	push	{r4, r5, r6, lr}
1a007208:	b082      	sub	sp, #8
1a00720a:	ab01      	add	r3, sp, #4
1a00720c:	466a      	mov	r2, sp
1a00720e:	460c      	mov	r4, r1
1a007210:	4606      	mov	r6, r0
1a007212:	f7ff ffbf 	bl	1a007194 <__swhatbuf_r>
1a007216:	9900      	ldr	r1, [sp, #0]
1a007218:	4605      	mov	r5, r0
1a00721a:	4630      	mov	r0, r6
1a00721c:	f7fc fb4a 	bl	1a0038b4 <_malloc_r>
1a007220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007224:	b170      	cbz	r0, 1a007244 <__smakebuf_r+0x54>
1a007226:	4916      	ldr	r1, [pc, #88]	; (1a007280 <__smakebuf_r+0x90>)
1a007228:	63f1      	str	r1, [r6, #60]	; 0x3c
1a00722a:	9a01      	ldr	r2, [sp, #4]
1a00722c:	9900      	ldr	r1, [sp, #0]
1a00722e:	6020      	str	r0, [r4, #0]
1a007230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007234:	81a3      	strh	r3, [r4, #12]
1a007236:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a00723a:	b98a      	cbnz	r2, 1a007260 <__smakebuf_r+0x70>
1a00723c:	432b      	orrs	r3, r5
1a00723e:	81a3      	strh	r3, [r4, #12]
1a007240:	b002      	add	sp, #8
1a007242:	bd70      	pop	{r4, r5, r6, pc}
1a007244:	059a      	lsls	r2, r3, #22
1a007246:	d4fb      	bmi.n	1a007240 <__smakebuf_r+0x50>
1a007248:	f023 0303 	bic.w	r3, r3, #3
1a00724c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a007250:	f043 0302 	orr.w	r3, r3, #2
1a007254:	2101      	movs	r1, #1
1a007256:	81a3      	strh	r3, [r4, #12]
1a007258:	6022      	str	r2, [r4, #0]
1a00725a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a00725e:	e7ef      	b.n	1a007240 <__smakebuf_r+0x50>
1a007260:	4630      	mov	r0, r6
1a007262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007266:	f7f9 f957 	bl	1a000518 <_isatty_r>
1a00726a:	b910      	cbnz	r0, 1a007272 <__smakebuf_r+0x82>
1a00726c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007270:	e7e4      	b.n	1a00723c <__smakebuf_r+0x4c>
1a007272:	89a3      	ldrh	r3, [r4, #12]
1a007274:	f023 0303 	bic.w	r3, r3, #3
1a007278:	f043 0301 	orr.w	r3, r3, #1
1a00727c:	b21b      	sxth	r3, r3
1a00727e:	e7dd      	b.n	1a00723c <__smakebuf_r+0x4c>
1a007280:	1a003505 	.word	0x1a003505
1a007284:	ffffffff 	.word	0xffffffff
1a007288:	ffffffff 	.word	0xffffffff
1a00728c:	ffffffff 	.word	0xffffffff

1a007290 <memchr>:
1a007290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007294:	2a10      	cmp	r2, #16
1a007296:	db2b      	blt.n	1a0072f0 <memchr+0x60>
1a007298:	f010 0f07 	tst.w	r0, #7
1a00729c:	d008      	beq.n	1a0072b0 <memchr+0x20>
1a00729e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0072a2:	3a01      	subs	r2, #1
1a0072a4:	428b      	cmp	r3, r1
1a0072a6:	d02d      	beq.n	1a007304 <memchr+0x74>
1a0072a8:	f010 0f07 	tst.w	r0, #7
1a0072ac:	b342      	cbz	r2, 1a007300 <memchr+0x70>
1a0072ae:	d1f6      	bne.n	1a00729e <memchr+0xe>
1a0072b0:	b4f0      	push	{r4, r5, r6, r7}
1a0072b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0072b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0072ba:	f022 0407 	bic.w	r4, r2, #7
1a0072be:	f07f 0700 	mvns.w	r7, #0
1a0072c2:	2300      	movs	r3, #0
1a0072c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0072c8:	3c08      	subs	r4, #8
1a0072ca:	ea85 0501 	eor.w	r5, r5, r1
1a0072ce:	ea86 0601 	eor.w	r6, r6, r1
1a0072d2:	fa85 f547 	uadd8	r5, r5, r7
1a0072d6:	faa3 f587 	sel	r5, r3, r7
1a0072da:	fa86 f647 	uadd8	r6, r6, r7
1a0072de:	faa5 f687 	sel	r6, r5, r7
1a0072e2:	b98e      	cbnz	r6, 1a007308 <memchr+0x78>
1a0072e4:	d1ee      	bne.n	1a0072c4 <memchr+0x34>
1a0072e6:	bcf0      	pop	{r4, r5, r6, r7}
1a0072e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0072ec:	f002 0207 	and.w	r2, r2, #7
1a0072f0:	b132      	cbz	r2, 1a007300 <memchr+0x70>
1a0072f2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0072f6:	3a01      	subs	r2, #1
1a0072f8:	ea83 0301 	eor.w	r3, r3, r1
1a0072fc:	b113      	cbz	r3, 1a007304 <memchr+0x74>
1a0072fe:	d1f8      	bne.n	1a0072f2 <memchr+0x62>
1a007300:	2000      	movs	r0, #0
1a007302:	4770      	bx	lr
1a007304:	3801      	subs	r0, #1
1a007306:	4770      	bx	lr
1a007308:	2d00      	cmp	r5, #0
1a00730a:	bf06      	itte	eq
1a00730c:	4635      	moveq	r5, r6
1a00730e:	3803      	subeq	r0, #3
1a007310:	3807      	subne	r0, #7
1a007312:	f015 0f01 	tst.w	r5, #1
1a007316:	d107      	bne.n	1a007328 <memchr+0x98>
1a007318:	3001      	adds	r0, #1
1a00731a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00731e:	bf02      	ittt	eq
1a007320:	3001      	addeq	r0, #1
1a007322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a007326:	3001      	addeq	r0, #1
1a007328:	bcf0      	pop	{r4, r5, r6, r7}
1a00732a:	3801      	subs	r0, #1
1a00732c:	4770      	bx	lr
1a00732e:	bf00      	nop

1a007330 <memmove>:
1a007330:	4288      	cmp	r0, r1
1a007332:	b4f0      	push	{r4, r5, r6, r7}
1a007334:	d90d      	bls.n	1a007352 <memmove+0x22>
1a007336:	188b      	adds	r3, r1, r2
1a007338:	4283      	cmp	r3, r0
1a00733a:	d90a      	bls.n	1a007352 <memmove+0x22>
1a00733c:	1884      	adds	r4, r0, r2
1a00733e:	b132      	cbz	r2, 1a00734e <memmove+0x1e>
1a007340:	4622      	mov	r2, r4
1a007342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a007346:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00734a:	4299      	cmp	r1, r3
1a00734c:	d1f9      	bne.n	1a007342 <memmove+0x12>
1a00734e:	bcf0      	pop	{r4, r5, r6, r7}
1a007350:	4770      	bx	lr
1a007352:	2a0f      	cmp	r2, #15
1a007354:	d80e      	bhi.n	1a007374 <memmove+0x44>
1a007356:	4603      	mov	r3, r0
1a007358:	1e54      	subs	r4, r2, #1
1a00735a:	2a00      	cmp	r2, #0
1a00735c:	d0f7      	beq.n	1a00734e <memmove+0x1e>
1a00735e:	3401      	adds	r4, #1
1a007360:	440c      	add	r4, r1
1a007362:	3b01      	subs	r3, #1
1a007364:	f811 2b01 	ldrb.w	r2, [r1], #1
1a007368:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00736c:	42a1      	cmp	r1, r4
1a00736e:	d1f9      	bne.n	1a007364 <memmove+0x34>
1a007370:	bcf0      	pop	{r4, r5, r6, r7}
1a007372:	4770      	bx	lr
1a007374:	ea40 0301 	orr.w	r3, r0, r1
1a007378:	079b      	lsls	r3, r3, #30
1a00737a:	d13b      	bne.n	1a0073f4 <memmove+0xc4>
1a00737c:	f1a2 0710 	sub.w	r7, r2, #16
1a007380:	093f      	lsrs	r7, r7, #4
1a007382:	f101 0620 	add.w	r6, r1, #32
1a007386:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a00738a:	f101 0310 	add.w	r3, r1, #16
1a00738e:	f100 0410 	add.w	r4, r0, #16
1a007392:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a007396:	f844 5c10 	str.w	r5, [r4, #-16]
1a00739a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a00739e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a0073a2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a0073a6:	f844 5c08 	str.w	r5, [r4, #-8]
1a0073aa:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a0073ae:	f844 5c04 	str.w	r5, [r4, #-4]
1a0073b2:	3310      	adds	r3, #16
1a0073b4:	42b3      	cmp	r3, r6
1a0073b6:	f104 0410 	add.w	r4, r4, #16
1a0073ba:	d1ea      	bne.n	1a007392 <memmove+0x62>
1a0073bc:	1c7b      	adds	r3, r7, #1
1a0073be:	011b      	lsls	r3, r3, #4
1a0073c0:	f012 0f0c 	tst.w	r2, #12
1a0073c4:	4419      	add	r1, r3
1a0073c6:	f002 050f 	and.w	r5, r2, #15
1a0073ca:	4403      	add	r3, r0
1a0073cc:	d015      	beq.n	1a0073fa <memmove+0xca>
1a0073ce:	3d04      	subs	r5, #4
1a0073d0:	08ad      	lsrs	r5, r5, #2
1a0073d2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a0073d6:	1f1c      	subs	r4, r3, #4
1a0073d8:	460e      	mov	r6, r1
1a0073da:	f856 7b04 	ldr.w	r7, [r6], #4
1a0073de:	f844 7f04 	str.w	r7, [r4, #4]!
1a0073e2:	4564      	cmp	r4, ip
1a0073e4:	d1f9      	bne.n	1a0073da <memmove+0xaa>
1a0073e6:	3501      	adds	r5, #1
1a0073e8:	00ad      	lsls	r5, r5, #2
1a0073ea:	442b      	add	r3, r5
1a0073ec:	4429      	add	r1, r5
1a0073ee:	f002 0203 	and.w	r2, r2, #3
1a0073f2:	e7b1      	b.n	1a007358 <memmove+0x28>
1a0073f4:	1e54      	subs	r4, r2, #1
1a0073f6:	4603      	mov	r3, r0
1a0073f8:	e7b1      	b.n	1a00735e <memmove+0x2e>
1a0073fa:	462a      	mov	r2, r5
1a0073fc:	e7ac      	b.n	1a007358 <memmove+0x28>
1a0073fe:	bf00      	nop

1a007400 <_Balloc>:
1a007400:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a007402:	b570      	push	{r4, r5, r6, lr}
1a007404:	4605      	mov	r5, r0
1a007406:	460c      	mov	r4, r1
1a007408:	b14b      	cbz	r3, 1a00741e <_Balloc+0x1e>
1a00740a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00740e:	b180      	cbz	r0, 1a007432 <_Balloc+0x32>
1a007410:	6802      	ldr	r2, [r0, #0]
1a007412:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a007416:	2300      	movs	r3, #0
1a007418:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00741c:	bd70      	pop	{r4, r5, r6, pc}
1a00741e:	2221      	movs	r2, #33	; 0x21
1a007420:	2104      	movs	r1, #4
1a007422:	f000 fd63 	bl	1a007eec <_calloc_r>
1a007426:	4603      	mov	r3, r0
1a007428:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00742a:	2800      	cmp	r0, #0
1a00742c:	d1ed      	bne.n	1a00740a <_Balloc+0xa>
1a00742e:	2000      	movs	r0, #0
1a007430:	bd70      	pop	{r4, r5, r6, pc}
1a007432:	2101      	movs	r1, #1
1a007434:	fa01 f604 	lsl.w	r6, r1, r4
1a007438:	1d72      	adds	r2, r6, #5
1a00743a:	4628      	mov	r0, r5
1a00743c:	0092      	lsls	r2, r2, #2
1a00743e:	f000 fd55 	bl	1a007eec <_calloc_r>
1a007442:	2800      	cmp	r0, #0
1a007444:	d0f3      	beq.n	1a00742e <_Balloc+0x2e>
1a007446:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00744a:	e7e4      	b.n	1a007416 <_Balloc+0x16>

1a00744c <_Bfree>:
1a00744c:	b131      	cbz	r1, 1a00745c <_Bfree+0x10>
1a00744e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a007450:	684a      	ldr	r2, [r1, #4]
1a007452:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a007456:	6008      	str	r0, [r1, #0]
1a007458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a00745c:	4770      	bx	lr
1a00745e:	bf00      	nop

1a007460 <__multadd>:
1a007460:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007462:	690c      	ldr	r4, [r1, #16]
1a007464:	b083      	sub	sp, #12
1a007466:	460d      	mov	r5, r1
1a007468:	4606      	mov	r6, r0
1a00746a:	f101 0c14 	add.w	ip, r1, #20
1a00746e:	2700      	movs	r7, #0
1a007470:	f8dc 0000 	ldr.w	r0, [ip]
1a007474:	b281      	uxth	r1, r0
1a007476:	fb02 3301 	mla	r3, r2, r1, r3
1a00747a:	0c19      	lsrs	r1, r3, #16
1a00747c:	0c00      	lsrs	r0, r0, #16
1a00747e:	fb02 1000 	mla	r0, r2, r0, r1
1a007482:	b29b      	uxth	r3, r3
1a007484:	3701      	adds	r7, #1
1a007486:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00748a:	42bc      	cmp	r4, r7
1a00748c:	f84c 3b04 	str.w	r3, [ip], #4
1a007490:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a007494:	dcec      	bgt.n	1a007470 <__multadd+0x10>
1a007496:	b13b      	cbz	r3, 1a0074a8 <__multadd+0x48>
1a007498:	68aa      	ldr	r2, [r5, #8]
1a00749a:	42a2      	cmp	r2, r4
1a00749c:	dd07      	ble.n	1a0074ae <__multadd+0x4e>
1a00749e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0074a2:	3401      	adds	r4, #1
1a0074a4:	6153      	str	r3, [r2, #20]
1a0074a6:	612c      	str	r4, [r5, #16]
1a0074a8:	4628      	mov	r0, r5
1a0074aa:	b003      	add	sp, #12
1a0074ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0074ae:	6869      	ldr	r1, [r5, #4]
1a0074b0:	9301      	str	r3, [sp, #4]
1a0074b2:	3101      	adds	r1, #1
1a0074b4:	4630      	mov	r0, r6
1a0074b6:	f7ff ffa3 	bl	1a007400 <_Balloc>
1a0074ba:	692a      	ldr	r2, [r5, #16]
1a0074bc:	3202      	adds	r2, #2
1a0074be:	f105 010c 	add.w	r1, r5, #12
1a0074c2:	4607      	mov	r7, r0
1a0074c4:	0092      	lsls	r2, r2, #2
1a0074c6:	300c      	adds	r0, #12
1a0074c8:	f7fc fcac 	bl	1a003e24 <memcpy>
1a0074cc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a0074ce:	6869      	ldr	r1, [r5, #4]
1a0074d0:	9b01      	ldr	r3, [sp, #4]
1a0074d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a0074d6:	6028      	str	r0, [r5, #0]
1a0074d8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a0074dc:	463d      	mov	r5, r7
1a0074de:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0074e2:	3401      	adds	r4, #1
1a0074e4:	6153      	str	r3, [r2, #20]
1a0074e6:	612c      	str	r4, [r5, #16]
1a0074e8:	e7de      	b.n	1a0074a8 <__multadd+0x48>
1a0074ea:	bf00      	nop

1a0074ec <__hi0bits>:
1a0074ec:	0c02      	lsrs	r2, r0, #16
1a0074ee:	0412      	lsls	r2, r2, #16
1a0074f0:	4603      	mov	r3, r0
1a0074f2:	b9ca      	cbnz	r2, 1a007528 <__hi0bits+0x3c>
1a0074f4:	0403      	lsls	r3, r0, #16
1a0074f6:	2010      	movs	r0, #16
1a0074f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a0074fc:	bf04      	itt	eq
1a0074fe:	021b      	lsleq	r3, r3, #8
1a007500:	3008      	addeq	r0, #8
1a007502:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a007506:	bf04      	itt	eq
1a007508:	011b      	lsleq	r3, r3, #4
1a00750a:	3004      	addeq	r0, #4
1a00750c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a007510:	bf04      	itt	eq
1a007512:	009b      	lsleq	r3, r3, #2
1a007514:	3002      	addeq	r0, #2
1a007516:	2b00      	cmp	r3, #0
1a007518:	db05      	blt.n	1a007526 <__hi0bits+0x3a>
1a00751a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00751e:	f100 0001 	add.w	r0, r0, #1
1a007522:	bf08      	it	eq
1a007524:	2020      	moveq	r0, #32
1a007526:	4770      	bx	lr
1a007528:	2000      	movs	r0, #0
1a00752a:	e7e5      	b.n	1a0074f8 <__hi0bits+0xc>

1a00752c <__lo0bits>:
1a00752c:	6803      	ldr	r3, [r0, #0]
1a00752e:	f013 0207 	ands.w	r2, r3, #7
1a007532:	4601      	mov	r1, r0
1a007534:	d007      	beq.n	1a007546 <__lo0bits+0x1a>
1a007536:	07da      	lsls	r2, r3, #31
1a007538:	d420      	bmi.n	1a00757c <__lo0bits+0x50>
1a00753a:	0798      	lsls	r0, r3, #30
1a00753c:	d522      	bpl.n	1a007584 <__lo0bits+0x58>
1a00753e:	085b      	lsrs	r3, r3, #1
1a007540:	600b      	str	r3, [r1, #0]
1a007542:	2001      	movs	r0, #1
1a007544:	4770      	bx	lr
1a007546:	b298      	uxth	r0, r3
1a007548:	b9b0      	cbnz	r0, 1a007578 <__lo0bits+0x4c>
1a00754a:	0c1b      	lsrs	r3, r3, #16
1a00754c:	2010      	movs	r0, #16
1a00754e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a007552:	bf04      	itt	eq
1a007554:	0a1b      	lsreq	r3, r3, #8
1a007556:	3008      	addeq	r0, #8
1a007558:	071a      	lsls	r2, r3, #28
1a00755a:	bf04      	itt	eq
1a00755c:	091b      	lsreq	r3, r3, #4
1a00755e:	3004      	addeq	r0, #4
1a007560:	079a      	lsls	r2, r3, #30
1a007562:	bf04      	itt	eq
1a007564:	089b      	lsreq	r3, r3, #2
1a007566:	3002      	addeq	r0, #2
1a007568:	07da      	lsls	r2, r3, #31
1a00756a:	d403      	bmi.n	1a007574 <__lo0bits+0x48>
1a00756c:	085b      	lsrs	r3, r3, #1
1a00756e:	f100 0001 	add.w	r0, r0, #1
1a007572:	d005      	beq.n	1a007580 <__lo0bits+0x54>
1a007574:	600b      	str	r3, [r1, #0]
1a007576:	4770      	bx	lr
1a007578:	4610      	mov	r0, r2
1a00757a:	e7e8      	b.n	1a00754e <__lo0bits+0x22>
1a00757c:	2000      	movs	r0, #0
1a00757e:	4770      	bx	lr
1a007580:	2020      	movs	r0, #32
1a007582:	4770      	bx	lr
1a007584:	089b      	lsrs	r3, r3, #2
1a007586:	600b      	str	r3, [r1, #0]
1a007588:	2002      	movs	r0, #2
1a00758a:	4770      	bx	lr

1a00758c <__i2b>:
1a00758c:	b510      	push	{r4, lr}
1a00758e:	460c      	mov	r4, r1
1a007590:	2101      	movs	r1, #1
1a007592:	f7ff ff35 	bl	1a007400 <_Balloc>
1a007596:	2201      	movs	r2, #1
1a007598:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00759c:	bd10      	pop	{r4, pc}
1a00759e:	bf00      	nop

1a0075a0 <__multiply>:
1a0075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0075a4:	690e      	ldr	r6, [r1, #16]
1a0075a6:	6917      	ldr	r7, [r2, #16]
1a0075a8:	42be      	cmp	r6, r7
1a0075aa:	b083      	sub	sp, #12
1a0075ac:	460c      	mov	r4, r1
1a0075ae:	4615      	mov	r5, r2
1a0075b0:	db05      	blt.n	1a0075be <__multiply+0x1e>
1a0075b2:	463a      	mov	r2, r7
1a0075b4:	462b      	mov	r3, r5
1a0075b6:	4637      	mov	r7, r6
1a0075b8:	460d      	mov	r5, r1
1a0075ba:	4616      	mov	r6, r2
1a0075bc:	461c      	mov	r4, r3
1a0075be:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a0075c2:	eb07 0806 	add.w	r8, r7, r6
1a0075c6:	4543      	cmp	r3, r8
1a0075c8:	bfb8      	it	lt
1a0075ca:	3101      	addlt	r1, #1
1a0075cc:	f7ff ff18 	bl	1a007400 <_Balloc>
1a0075d0:	f100 0a14 	add.w	sl, r0, #20
1a0075d4:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a0075d8:	45ca      	cmp	sl, r9
1a0075da:	9000      	str	r0, [sp, #0]
1a0075dc:	d205      	bcs.n	1a0075ea <__multiply+0x4a>
1a0075de:	4653      	mov	r3, sl
1a0075e0:	2100      	movs	r1, #0
1a0075e2:	f843 1b04 	str.w	r1, [r3], #4
1a0075e6:	4599      	cmp	r9, r3
1a0075e8:	d8fb      	bhi.n	1a0075e2 <__multiply+0x42>
1a0075ea:	f104 0e14 	add.w	lr, r4, #20
1a0075ee:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a0075f2:	f105 0314 	add.w	r3, r5, #20
1a0075f6:	45de      	cmp	lr, fp
1a0075f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a0075fc:	d253      	bcs.n	1a0076a6 <__multiply+0x106>
1a0075fe:	f8cd 8004 	str.w	r8, [sp, #4]
1a007602:	4698      	mov	r8, r3
1a007604:	e005      	b.n	1a007612 <__multiply+0x72>
1a007606:	0c09      	lsrs	r1, r1, #16
1a007608:	d128      	bne.n	1a00765c <__multiply+0xbc>
1a00760a:	45f3      	cmp	fp, lr
1a00760c:	f10a 0a04 	add.w	sl, sl, #4
1a007610:	d947      	bls.n	1a0076a2 <__multiply+0x102>
1a007612:	f85e 1b04 	ldr.w	r1, [lr], #4
1a007616:	b28e      	uxth	r6, r1
1a007618:	2e00      	cmp	r6, #0
1a00761a:	d0f4      	beq.n	1a007606 <__multiply+0x66>
1a00761c:	4645      	mov	r5, r8
1a00761e:	4654      	mov	r4, sl
1a007620:	2300      	movs	r3, #0
1a007622:	f855 1b04 	ldr.w	r1, [r5], #4
1a007626:	6820      	ldr	r0, [r4, #0]
1a007628:	b28a      	uxth	r2, r1
1a00762a:	fa1f fc80 	uxth.w	ip, r0
1a00762e:	fb06 c202 	mla	r2, r6, r2, ip
1a007632:	0c09      	lsrs	r1, r1, #16
1a007634:	0c00      	lsrs	r0, r0, #16
1a007636:	4413      	add	r3, r2
1a007638:	fb06 0201 	mla	r2, r6, r1, r0
1a00763c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a007640:	b29b      	uxth	r3, r3
1a007642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007646:	42af      	cmp	r7, r5
1a007648:	f844 3b04 	str.w	r3, [r4], #4
1a00764c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a007650:	d8e7      	bhi.n	1a007622 <__multiply+0x82>
1a007652:	6023      	str	r3, [r4, #0]
1a007654:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a007658:	0c09      	lsrs	r1, r1, #16
1a00765a:	d0d6      	beq.n	1a00760a <__multiply+0x6a>
1a00765c:	f8da 3000 	ldr.w	r3, [sl]
1a007660:	4640      	mov	r0, r8
1a007662:	461a      	mov	r2, r3
1a007664:	4654      	mov	r4, sl
1a007666:	f04f 0c00 	mov.w	ip, #0
1a00766a:	8805      	ldrh	r5, [r0, #0]
1a00766c:	0c12      	lsrs	r2, r2, #16
1a00766e:	fb01 2205 	mla	r2, r1, r5, r2
1a007672:	4494      	add	ip, r2
1a007674:	b29b      	uxth	r3, r3
1a007676:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00767a:	f844 3b04 	str.w	r3, [r4], #4
1a00767e:	f850 3b04 	ldr.w	r3, [r0], #4
1a007682:	6822      	ldr	r2, [r4, #0]
1a007684:	0c1b      	lsrs	r3, r3, #16
1a007686:	b295      	uxth	r5, r2
1a007688:	fb01 5303 	mla	r3, r1, r3, r5
1a00768c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a007690:	4287      	cmp	r7, r0
1a007692:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a007696:	d8e8      	bhi.n	1a00766a <__multiply+0xca>
1a007698:	45f3      	cmp	fp, lr
1a00769a:	6023      	str	r3, [r4, #0]
1a00769c:	f10a 0a04 	add.w	sl, sl, #4
1a0076a0:	d8b7      	bhi.n	1a007612 <__multiply+0x72>
1a0076a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a0076a6:	f1b8 0f00 	cmp.w	r8, #0
1a0076aa:	dd0b      	ble.n	1a0076c4 <__multiply+0x124>
1a0076ac:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a0076b0:	f1a9 0904 	sub.w	r9, r9, #4
1a0076b4:	b11b      	cbz	r3, 1a0076be <__multiply+0x11e>
1a0076b6:	e005      	b.n	1a0076c4 <__multiply+0x124>
1a0076b8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a0076bc:	b913      	cbnz	r3, 1a0076c4 <__multiply+0x124>
1a0076be:	f1b8 0801 	subs.w	r8, r8, #1
1a0076c2:	d1f9      	bne.n	1a0076b8 <__multiply+0x118>
1a0076c4:	9800      	ldr	r0, [sp, #0]
1a0076c6:	f8c0 8010 	str.w	r8, [r0, #16]
1a0076ca:	b003      	add	sp, #12
1a0076cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a0076d0 <__pow5mult>:
1a0076d0:	f012 0303 	ands.w	r3, r2, #3
1a0076d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0076d8:	4614      	mov	r4, r2
1a0076da:	4607      	mov	r7, r0
1a0076dc:	d12e      	bne.n	1a00773c <__pow5mult+0x6c>
1a0076de:	460d      	mov	r5, r1
1a0076e0:	10a4      	asrs	r4, r4, #2
1a0076e2:	d01c      	beq.n	1a00771e <__pow5mult+0x4e>
1a0076e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a0076e6:	b396      	cbz	r6, 1a00774e <__pow5mult+0x7e>
1a0076e8:	07e3      	lsls	r3, r4, #31
1a0076ea:	f04f 0800 	mov.w	r8, #0
1a0076ee:	d406      	bmi.n	1a0076fe <__pow5mult+0x2e>
1a0076f0:	1064      	asrs	r4, r4, #1
1a0076f2:	d014      	beq.n	1a00771e <__pow5mult+0x4e>
1a0076f4:	6830      	ldr	r0, [r6, #0]
1a0076f6:	b1a8      	cbz	r0, 1a007724 <__pow5mult+0x54>
1a0076f8:	4606      	mov	r6, r0
1a0076fa:	07e3      	lsls	r3, r4, #31
1a0076fc:	d5f8      	bpl.n	1a0076f0 <__pow5mult+0x20>
1a0076fe:	4632      	mov	r2, r6
1a007700:	4629      	mov	r1, r5
1a007702:	4638      	mov	r0, r7
1a007704:	f7ff ff4c 	bl	1a0075a0 <__multiply>
1a007708:	b1b5      	cbz	r5, 1a007738 <__pow5mult+0x68>
1a00770a:	686a      	ldr	r2, [r5, #4]
1a00770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00770e:	1064      	asrs	r4, r4, #1
1a007710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007714:	6029      	str	r1, [r5, #0]
1a007716:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00771a:	4605      	mov	r5, r0
1a00771c:	d1ea      	bne.n	1a0076f4 <__pow5mult+0x24>
1a00771e:	4628      	mov	r0, r5
1a007720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007724:	4632      	mov	r2, r6
1a007726:	4631      	mov	r1, r6
1a007728:	4638      	mov	r0, r7
1a00772a:	f7ff ff39 	bl	1a0075a0 <__multiply>
1a00772e:	6030      	str	r0, [r6, #0]
1a007730:	f8c0 8000 	str.w	r8, [r0]
1a007734:	4606      	mov	r6, r0
1a007736:	e7e0      	b.n	1a0076fa <__pow5mult+0x2a>
1a007738:	4605      	mov	r5, r0
1a00773a:	e7d9      	b.n	1a0076f0 <__pow5mult+0x20>
1a00773c:	3b01      	subs	r3, #1
1a00773e:	4a0b      	ldr	r2, [pc, #44]	; (1a00776c <__pow5mult+0x9c>)
1a007740:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a007744:	2300      	movs	r3, #0
1a007746:	f7ff fe8b 	bl	1a007460 <__multadd>
1a00774a:	4605      	mov	r5, r0
1a00774c:	e7c8      	b.n	1a0076e0 <__pow5mult+0x10>
1a00774e:	2101      	movs	r1, #1
1a007750:	4638      	mov	r0, r7
1a007752:	f7ff fe55 	bl	1a007400 <_Balloc>
1a007756:	f240 2371 	movw	r3, #625	; 0x271
1a00775a:	6143      	str	r3, [r0, #20]
1a00775c:	2201      	movs	r2, #1
1a00775e:	2300      	movs	r3, #0
1a007760:	6102      	str	r2, [r0, #16]
1a007762:	4606      	mov	r6, r0
1a007764:	64b8      	str	r0, [r7, #72]	; 0x48
1a007766:	6003      	str	r3, [r0, #0]
1a007768:	e7be      	b.n	1a0076e8 <__pow5mult+0x18>
1a00776a:	bf00      	nop
1a00776c:	1a008890 	.word	0x1a008890

1a007770 <__lshift>:
1a007770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007774:	690e      	ldr	r6, [r1, #16]
1a007776:	460d      	mov	r5, r1
1a007778:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00777c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a007780:	444e      	add	r6, r9
1a007782:	1c74      	adds	r4, r6, #1
1a007784:	429c      	cmp	r4, r3
1a007786:	4690      	mov	r8, r2
1a007788:	4607      	mov	r7, r0
1a00778a:	dd04      	ble.n	1a007796 <__lshift+0x26>
1a00778c:	005b      	lsls	r3, r3, #1
1a00778e:	429c      	cmp	r4, r3
1a007790:	f101 0101 	add.w	r1, r1, #1
1a007794:	dcfa      	bgt.n	1a00778c <__lshift+0x1c>
1a007796:	4638      	mov	r0, r7
1a007798:	f7ff fe32 	bl	1a007400 <_Balloc>
1a00779c:	f1b9 0f00 	cmp.w	r9, #0
1a0077a0:	f100 0c14 	add.w	ip, r0, #20
1a0077a4:	dd0e      	ble.n	1a0077c4 <__lshift+0x54>
1a0077a6:	f109 0905 	add.w	r9, r9, #5
1a0077aa:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a0077ae:	eb00 0109 	add.w	r1, r0, r9
1a0077b2:	4663      	mov	r3, ip
1a0077b4:	2200      	movs	r2, #0
1a0077b6:	f843 2b04 	str.w	r2, [r3], #4
1a0077ba:	428b      	cmp	r3, r1
1a0077bc:	d1fb      	bne.n	1a0077b6 <__lshift+0x46>
1a0077be:	f1a9 0914 	sub.w	r9, r9, #20
1a0077c2:	44cc      	add	ip, r9
1a0077c4:	6929      	ldr	r1, [r5, #16]
1a0077c6:	f105 0314 	add.w	r3, r5, #20
1a0077ca:	f018 081f 	ands.w	r8, r8, #31
1a0077ce:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a0077d2:	d01d      	beq.n	1a007810 <__lshift+0xa0>
1a0077d4:	f1c8 0920 	rsb	r9, r8, #32
1a0077d8:	2200      	movs	r2, #0
1a0077da:	6819      	ldr	r1, [r3, #0]
1a0077dc:	fa01 f108 	lsl.w	r1, r1, r8
1a0077e0:	4311      	orrs	r1, r2
1a0077e2:	f84c 1b04 	str.w	r1, [ip], #4
1a0077e6:	f853 2b04 	ldr.w	r2, [r3], #4
1a0077ea:	4573      	cmp	r3, lr
1a0077ec:	fa22 f209 	lsr.w	r2, r2, r9
1a0077f0:	d3f3      	bcc.n	1a0077da <__lshift+0x6a>
1a0077f2:	f8cc 2000 	str.w	r2, [ip]
1a0077f6:	2a00      	cmp	r2, #0
1a0077f8:	bf18      	it	ne
1a0077fa:	4626      	movne	r6, r4
1a0077fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a0077fe:	686a      	ldr	r2, [r5, #4]
1a007800:	6106      	str	r6, [r0, #16]
1a007802:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007806:	6029      	str	r1, [r5, #0]
1a007808:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00780c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007810:	f1ac 0c04 	sub.w	ip, ip, #4
1a007814:	f853 2b04 	ldr.w	r2, [r3], #4
1a007818:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00781c:	459e      	cmp	lr, r3
1a00781e:	d8f9      	bhi.n	1a007814 <__lshift+0xa4>
1a007820:	e7ec      	b.n	1a0077fc <__lshift+0x8c>
1a007822:	bf00      	nop

1a007824 <__mcmp>:
1a007824:	b430      	push	{r4, r5}
1a007826:	690b      	ldr	r3, [r1, #16]
1a007828:	4605      	mov	r5, r0
1a00782a:	6900      	ldr	r0, [r0, #16]
1a00782c:	1ac0      	subs	r0, r0, r3
1a00782e:	d110      	bne.n	1a007852 <__mcmp+0x2e>
1a007830:	009b      	lsls	r3, r3, #2
1a007832:	3514      	adds	r5, #20
1a007834:	3114      	adds	r1, #20
1a007836:	4419      	add	r1, r3
1a007838:	442b      	add	r3, r5
1a00783a:	e001      	b.n	1a007840 <__mcmp+0x1c>
1a00783c:	429d      	cmp	r5, r3
1a00783e:	d208      	bcs.n	1a007852 <__mcmp+0x2e>
1a007840:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a007844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007848:	4294      	cmp	r4, r2
1a00784a:	d0f7      	beq.n	1a00783c <__mcmp+0x18>
1a00784c:	d203      	bcs.n	1a007856 <__mcmp+0x32>
1a00784e:	f04f 30ff 	mov.w	r0, #4294967295
1a007852:	bc30      	pop	{r4, r5}
1a007854:	4770      	bx	lr
1a007856:	2001      	movs	r0, #1
1a007858:	bc30      	pop	{r4, r5}
1a00785a:	4770      	bx	lr

1a00785c <__mdiff>:
1a00785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007860:	460f      	mov	r7, r1
1a007862:	690d      	ldr	r5, [r1, #16]
1a007864:	6911      	ldr	r1, [r2, #16]
1a007866:	1a6d      	subs	r5, r5, r1
1a007868:	2d00      	cmp	r5, #0
1a00786a:	4690      	mov	r8, r2
1a00786c:	4684      	mov	ip, r0
1a00786e:	f107 0414 	add.w	r4, r7, #20
1a007872:	f102 0614 	add.w	r6, r2, #20
1a007876:	d114      	bne.n	1a0078a2 <__mdiff+0x46>
1a007878:	0089      	lsls	r1, r1, #2
1a00787a:	1863      	adds	r3, r4, r1
1a00787c:	4431      	add	r1, r6
1a00787e:	e001      	b.n	1a007884 <__mdiff+0x28>
1a007880:	42a3      	cmp	r3, r4
1a007882:	d95d      	bls.n	1a007940 <__mdiff+0xe4>
1a007884:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a007888:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00788c:	4290      	cmp	r0, r2
1a00788e:	d0f7      	beq.n	1a007880 <__mdiff+0x24>
1a007890:	d209      	bcs.n	1a0078a6 <__mdiff+0x4a>
1a007892:	4622      	mov	r2, r4
1a007894:	463b      	mov	r3, r7
1a007896:	4634      	mov	r4, r6
1a007898:	4647      	mov	r7, r8
1a00789a:	4616      	mov	r6, r2
1a00789c:	4698      	mov	r8, r3
1a00789e:	2501      	movs	r5, #1
1a0078a0:	e001      	b.n	1a0078a6 <__mdiff+0x4a>
1a0078a2:	dbf6      	blt.n	1a007892 <__mdiff+0x36>
1a0078a4:	2500      	movs	r5, #0
1a0078a6:	4660      	mov	r0, ip
1a0078a8:	6879      	ldr	r1, [r7, #4]
1a0078aa:	f7ff fda9 	bl	1a007400 <_Balloc>
1a0078ae:	693f      	ldr	r7, [r7, #16]
1a0078b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0078b4:	60c5      	str	r5, [r0, #12]
1a0078b6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a0078ba:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a0078be:	f100 0514 	add.w	r5, r0, #20
1a0078c2:	2200      	movs	r2, #0
1a0078c4:	e000      	b.n	1a0078c8 <__mdiff+0x6c>
1a0078c6:	460d      	mov	r5, r1
1a0078c8:	f856 1b04 	ldr.w	r1, [r6], #4
1a0078cc:	f854 8b04 	ldr.w	r8, [r4], #4
1a0078d0:	fa1f f981 	uxth.w	r9, r1
1a0078d4:	fa12 f388 	uxtah	r3, r2, r8
1a0078d8:	0c0a      	lsrs	r2, r1, #16
1a0078da:	eba3 0309 	sub.w	r3, r3, r9
1a0078de:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a0078e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a0078e6:	4629      	mov	r1, r5
1a0078e8:	b29b      	uxth	r3, r3
1a0078ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0078ee:	45b6      	cmp	lr, r6
1a0078f0:	ea4f 4222 	mov.w	r2, r2, asr #16
1a0078f4:	f841 3b04 	str.w	r3, [r1], #4
1a0078f8:	46a0      	mov	r8, r4
1a0078fa:	d8e4      	bhi.n	1a0078c6 <__mdiff+0x6a>
1a0078fc:	45a4      	cmp	ip, r4
1a0078fe:	d916      	bls.n	1a00792e <__mdiff+0xd2>
1a007900:	460e      	mov	r6, r1
1a007902:	f858 5b04 	ldr.w	r5, [r8], #4
1a007906:	fa12 f385 	uxtah	r3, r2, r5
1a00790a:	141a      	asrs	r2, r3, #16
1a00790c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a007910:	b29b      	uxth	r3, r3
1a007912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007916:	45c4      	cmp	ip, r8
1a007918:	f846 3b04 	str.w	r3, [r6], #4
1a00791c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a007920:	d8ef      	bhi.n	1a007902 <__mdiff+0xa6>
1a007922:	f10c 35ff 	add.w	r5, ip, #4294967295
1a007926:	1b2d      	subs	r5, r5, r4
1a007928:	f025 0503 	bic.w	r5, r5, #3
1a00792c:	440d      	add	r5, r1
1a00792e:	b923      	cbnz	r3, 1a00793a <__mdiff+0xde>
1a007930:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a007934:	3f01      	subs	r7, #1
1a007936:	2b00      	cmp	r3, #0
1a007938:	d0fa      	beq.n	1a007930 <__mdiff+0xd4>
1a00793a:	6107      	str	r7, [r0, #16]
1a00793c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007940:	4660      	mov	r0, ip
1a007942:	2100      	movs	r1, #0
1a007944:	f7ff fd5c 	bl	1a007400 <_Balloc>
1a007948:	2201      	movs	r2, #1
1a00794a:	2300      	movs	r3, #0
1a00794c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a007950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a007954 <__d2b>:
1a007954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007958:	460f      	mov	r7, r1
1a00795a:	b083      	sub	sp, #12
1a00795c:	2101      	movs	r1, #1
1a00795e:	ec55 4b10 	vmov	r4, r5, d0
1a007962:	4616      	mov	r6, r2
1a007964:	f7ff fd4c 	bl	1a007400 <_Balloc>
1a007968:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00796c:	4681      	mov	r9, r0
1a00796e:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a007972:	f1b8 0f00 	cmp.w	r8, #0
1a007976:	d001      	beq.n	1a00797c <__d2b+0x28>
1a007978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00797c:	2c00      	cmp	r4, #0
1a00797e:	9301      	str	r3, [sp, #4]
1a007980:	d02b      	beq.n	1a0079da <__d2b+0x86>
1a007982:	4668      	mov	r0, sp
1a007984:	9400      	str	r4, [sp, #0]
1a007986:	f7ff fdd1 	bl	1a00752c <__lo0bits>
1a00798a:	b9d0      	cbnz	r0, 1a0079c2 <__d2b+0x6e>
1a00798c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a007990:	f8c9 2014 	str.w	r2, [r9, #20]
1a007994:	2b00      	cmp	r3, #0
1a007996:	bf14      	ite	ne
1a007998:	2102      	movne	r1, #2
1a00799a:	2101      	moveq	r1, #1
1a00799c:	f8c9 3018 	str.w	r3, [r9, #24]
1a0079a0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0079a4:	f1b8 0f00 	cmp.w	r8, #0
1a0079a8:	d024      	beq.n	1a0079f4 <__d2b+0xa0>
1a0079aa:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a0079ae:	eb08 0300 	add.w	r3, r8, r0
1a0079b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a0079b6:	603b      	str	r3, [r7, #0]
1a0079b8:	6030      	str	r0, [r6, #0]
1a0079ba:	4648      	mov	r0, r9
1a0079bc:	b003      	add	sp, #12
1a0079be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0079c2:	e9dd 1300 	ldrd	r1, r3, [sp]
1a0079c6:	f1c0 0220 	rsb	r2, r0, #32
1a0079ca:	fa03 f202 	lsl.w	r2, r3, r2
1a0079ce:	430a      	orrs	r2, r1
1a0079d0:	40c3      	lsrs	r3, r0
1a0079d2:	9301      	str	r3, [sp, #4]
1a0079d4:	f8c9 2014 	str.w	r2, [r9, #20]
1a0079d8:	e7dc      	b.n	1a007994 <__d2b+0x40>
1a0079da:	a801      	add	r0, sp, #4
1a0079dc:	f7ff fda6 	bl	1a00752c <__lo0bits>
1a0079e0:	9b01      	ldr	r3, [sp, #4]
1a0079e2:	f8c9 3014 	str.w	r3, [r9, #20]
1a0079e6:	2101      	movs	r1, #1
1a0079e8:	3020      	adds	r0, #32
1a0079ea:	f8c9 1010 	str.w	r1, [r9, #16]
1a0079ee:	f1b8 0f00 	cmp.w	r8, #0
1a0079f2:	d1da      	bne.n	1a0079aa <__d2b+0x56>
1a0079f4:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a0079f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0079fc:	6038      	str	r0, [r7, #0]
1a0079fe:	6918      	ldr	r0, [r3, #16]
1a007a00:	f7ff fd74 	bl	1a0074ec <__hi0bits>
1a007a04:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a007a08:	6030      	str	r0, [r6, #0]
1a007a0a:	4648      	mov	r0, r9
1a007a0c:	b003      	add	sp, #12
1a007a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a007a12:	bf00      	nop

1a007a14 <_realloc_r>:
1a007a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007a18:	4617      	mov	r7, r2
1a007a1a:	2900      	cmp	r1, #0
1a007a1c:	f000 80bb 	beq.w	1a007b96 <_realloc_r+0x182>
1a007a20:	f107 040b 	add.w	r4, r7, #11
1a007a24:	4681      	mov	r9, r0
1a007a26:	460d      	mov	r5, r1
1a007a28:	f7fc fae6 	bl	1a003ff8 <__malloc_lock>
1a007a2c:	2c16      	cmp	r4, #22
1a007a2e:	d85e      	bhi.n	1a007aee <_realloc_r+0xda>
1a007a30:	2410      	movs	r4, #16
1a007a32:	4622      	mov	r2, r4
1a007a34:	42a7      	cmp	r7, r4
1a007a36:	d85f      	bhi.n	1a007af8 <_realloc_r+0xe4>
1a007a38:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a007a3c:	f02e 0603 	bic.w	r6, lr, #3
1a007a40:	f1a5 0808 	sub.w	r8, r5, #8
1a007a44:	4296      	cmp	r6, r2
1a007a46:	eb08 0a06 	add.w	sl, r8, r6
1a007a4a:	f280 8081 	bge.w	1a007b50 <_realloc_r+0x13c>
1a007a4e:	4bcb      	ldr	r3, [pc, #812]	; (1a007d7c <_realloc_r+0x368>)
1a007a50:	f8da 0004 	ldr.w	r0, [sl, #4]
1a007a54:	6899      	ldr	r1, [r3, #8]
1a007a56:	4551      	cmp	r1, sl
1a007a58:	f000 80b5 	beq.w	1a007bc6 <_realloc_r+0x1b2>
1a007a5c:	f020 0301 	bic.w	r3, r0, #1
1a007a60:	4453      	add	r3, sl
1a007a62:	685b      	ldr	r3, [r3, #4]
1a007a64:	07db      	lsls	r3, r3, #31
1a007a66:	f100 808a 	bmi.w	1a007b7e <_realloc_r+0x16a>
1a007a6a:	f020 0003 	bic.w	r0, r0, #3
1a007a6e:	1833      	adds	r3, r6, r0
1a007a70:	4293      	cmp	r3, r2
1a007a72:	f280 8112 	bge.w	1a007c9a <_realloc_r+0x286>
1a007a76:	f01e 0f01 	tst.w	lr, #1
1a007a7a:	d10f      	bne.n	1a007a9c <_realloc_r+0x88>
1a007a7c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007a80:	eba8 0b03 	sub.w	fp, r8, r3
1a007a84:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007a88:	f021 0103 	bic.w	r1, r1, #3
1a007a8c:	4408      	add	r0, r1
1a007a8e:	1983      	adds	r3, r0, r6
1a007a90:	4293      	cmp	r3, r2
1a007a92:	f280 8116 	bge.w	1a007cc2 <_realloc_r+0x2ae>
1a007a96:	1873      	adds	r3, r6, r1
1a007a98:	4293      	cmp	r3, r2
1a007a9a:	da34      	bge.n	1a007b06 <_realloc_r+0xf2>
1a007a9c:	4639      	mov	r1, r7
1a007a9e:	4648      	mov	r0, r9
1a007aa0:	f7fb ff08 	bl	1a0038b4 <_malloc_r>
1a007aa4:	4607      	mov	r7, r0
1a007aa6:	b1e0      	cbz	r0, 1a007ae2 <_realloc_r+0xce>
1a007aa8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a007aac:	f023 0301 	bic.w	r3, r3, #1
1a007ab0:	4443      	add	r3, r8
1a007ab2:	f1a0 0208 	sub.w	r2, r0, #8
1a007ab6:	4293      	cmp	r3, r2
1a007ab8:	f000 80f7 	beq.w	1a007caa <_realloc_r+0x296>
1a007abc:	1f32      	subs	r2, r6, #4
1a007abe:	2a24      	cmp	r2, #36	; 0x24
1a007ac0:	f200 80fb 	bhi.w	1a007cba <_realloc_r+0x2a6>
1a007ac4:	2a13      	cmp	r2, #19
1a007ac6:	6829      	ldr	r1, [r5, #0]
1a007ac8:	f200 80c9 	bhi.w	1a007c5e <_realloc_r+0x24a>
1a007acc:	4603      	mov	r3, r0
1a007ace:	462a      	mov	r2, r5
1a007ad0:	6019      	str	r1, [r3, #0]
1a007ad2:	6851      	ldr	r1, [r2, #4]
1a007ad4:	6059      	str	r1, [r3, #4]
1a007ad6:	6892      	ldr	r2, [r2, #8]
1a007ad8:	609a      	str	r2, [r3, #8]
1a007ada:	4629      	mov	r1, r5
1a007adc:	4648      	mov	r0, r9
1a007ade:	f7fb fd9d 	bl	1a00361c <_free_r>
1a007ae2:	4648      	mov	r0, r9
1a007ae4:	f7fc fa8e 	bl	1a004004 <__malloc_unlock>
1a007ae8:	4638      	mov	r0, r7
1a007aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007aee:	f024 0407 	bic.w	r4, r4, #7
1a007af2:	2c00      	cmp	r4, #0
1a007af4:	4622      	mov	r2, r4
1a007af6:	da9d      	bge.n	1a007a34 <_realloc_r+0x20>
1a007af8:	230c      	movs	r3, #12
1a007afa:	f8c9 3000 	str.w	r3, [r9]
1a007afe:	2700      	movs	r7, #0
1a007b00:	4638      	mov	r0, r7
1a007b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007b06:	465f      	mov	r7, fp
1a007b08:	f8db 100c 	ldr.w	r1, [fp, #12]
1a007b0c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007b10:	1f32      	subs	r2, r6, #4
1a007b12:	2a24      	cmp	r2, #36	; 0x24
1a007b14:	60c1      	str	r1, [r0, #12]
1a007b16:	eb0b 0a03 	add.w	sl, fp, r3
1a007b1a:	6088      	str	r0, [r1, #8]
1a007b1c:	f200 80d9 	bhi.w	1a007cd2 <_realloc_r+0x2be>
1a007b20:	2a13      	cmp	r2, #19
1a007b22:	6829      	ldr	r1, [r5, #0]
1a007b24:	f240 80d3 	bls.w	1a007cce <_realloc_r+0x2ba>
1a007b28:	f8cb 1008 	str.w	r1, [fp, #8]
1a007b2c:	6869      	ldr	r1, [r5, #4]
1a007b2e:	f8cb 100c 	str.w	r1, [fp, #12]
1a007b32:	2a1b      	cmp	r2, #27
1a007b34:	68a9      	ldr	r1, [r5, #8]
1a007b36:	f200 80e0 	bhi.w	1a007cfa <_realloc_r+0x2e6>
1a007b3a:	f10b 0210 	add.w	r2, fp, #16
1a007b3e:	3508      	adds	r5, #8
1a007b40:	6011      	str	r1, [r2, #0]
1a007b42:	6869      	ldr	r1, [r5, #4]
1a007b44:	6051      	str	r1, [r2, #4]
1a007b46:	68a9      	ldr	r1, [r5, #8]
1a007b48:	6091      	str	r1, [r2, #8]
1a007b4a:	461e      	mov	r6, r3
1a007b4c:	46d8      	mov	r8, fp
1a007b4e:	463d      	mov	r5, r7
1a007b50:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a007b54:	1b32      	subs	r2, r6, r4
1a007b56:	2a0f      	cmp	r2, #15
1a007b58:	f003 0301 	and.w	r3, r3, #1
1a007b5c:	d820      	bhi.n	1a007ba0 <_realloc_r+0x18c>
1a007b5e:	4333      	orrs	r3, r6
1a007b60:	f8c8 3004 	str.w	r3, [r8, #4]
1a007b64:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007b68:	f043 0301 	orr.w	r3, r3, #1
1a007b6c:	f8ca 3004 	str.w	r3, [sl, #4]
1a007b70:	4648      	mov	r0, r9
1a007b72:	462f      	mov	r7, r5
1a007b74:	f7fc fa46 	bl	1a004004 <__malloc_unlock>
1a007b78:	4638      	mov	r0, r7
1a007b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007b7e:	f01e 0f01 	tst.w	lr, #1
1a007b82:	d18b      	bne.n	1a007a9c <_realloc_r+0x88>
1a007b84:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007b88:	eba8 0b03 	sub.w	fp, r8, r3
1a007b8c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007b90:	f021 0103 	bic.w	r1, r1, #3
1a007b94:	e77f      	b.n	1a007a96 <_realloc_r+0x82>
1a007b96:	4611      	mov	r1, r2
1a007b98:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007b9c:	f7fb be8a 	b.w	1a0038b4 <_malloc_r>
1a007ba0:	eb08 0104 	add.w	r1, r8, r4
1a007ba4:	4323      	orrs	r3, r4
1a007ba6:	f042 0201 	orr.w	r2, r2, #1
1a007baa:	f8c8 3004 	str.w	r3, [r8, #4]
1a007bae:	604a      	str	r2, [r1, #4]
1a007bb0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007bb4:	f043 0301 	orr.w	r3, r3, #1
1a007bb8:	3108      	adds	r1, #8
1a007bba:	f8ca 3004 	str.w	r3, [sl, #4]
1a007bbe:	4648      	mov	r0, r9
1a007bc0:	f7fb fd2c 	bl	1a00361c <_free_r>
1a007bc4:	e7d4      	b.n	1a007b70 <_realloc_r+0x15c>
1a007bc6:	f020 0003 	bic.w	r0, r0, #3
1a007bca:	1831      	adds	r1, r6, r0
1a007bcc:	f104 0c10 	add.w	ip, r4, #16
1a007bd0:	4561      	cmp	r1, ip
1a007bd2:	da4f      	bge.n	1a007c74 <_realloc_r+0x260>
1a007bd4:	f01e 0f01 	tst.w	lr, #1
1a007bd8:	f47f af60 	bne.w	1a007a9c <_realloc_r+0x88>
1a007bdc:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a007be0:	eba8 0b01 	sub.w	fp, r8, r1
1a007be4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007be8:	f021 0103 	bic.w	r1, r1, #3
1a007bec:	4408      	add	r0, r1
1a007bee:	eb00 0a06 	add.w	sl, r0, r6
1a007bf2:	45d4      	cmp	ip, sl
1a007bf4:	f73f af4f 	bgt.w	1a007a96 <_realloc_r+0x82>
1a007bf8:	465f      	mov	r7, fp
1a007bfa:	f8db 100c 	ldr.w	r1, [fp, #12]
1a007bfe:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007c02:	1f32      	subs	r2, r6, #4
1a007c04:	2a24      	cmp	r2, #36	; 0x24
1a007c06:	60c1      	str	r1, [r0, #12]
1a007c08:	6088      	str	r0, [r1, #8]
1a007c0a:	f200 8099 	bhi.w	1a007d40 <_realloc_r+0x32c>
1a007c0e:	2a13      	cmp	r2, #19
1a007c10:	6829      	ldr	r1, [r5, #0]
1a007c12:	f240 8093 	bls.w	1a007d3c <_realloc_r+0x328>
1a007c16:	f8cb 1008 	str.w	r1, [fp, #8]
1a007c1a:	6869      	ldr	r1, [r5, #4]
1a007c1c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007c20:	2a1b      	cmp	r2, #27
1a007c22:	68a9      	ldr	r1, [r5, #8]
1a007c24:	f200 8092 	bhi.w	1a007d4c <_realloc_r+0x338>
1a007c28:	f10b 0210 	add.w	r2, fp, #16
1a007c2c:	3508      	adds	r5, #8
1a007c2e:	6011      	str	r1, [r2, #0]
1a007c30:	6869      	ldr	r1, [r5, #4]
1a007c32:	6051      	str	r1, [r2, #4]
1a007c34:	68a9      	ldr	r1, [r5, #8]
1a007c36:	6091      	str	r1, [r2, #8]
1a007c38:	eb0b 0104 	add.w	r1, fp, r4
1a007c3c:	ebaa 0204 	sub.w	r2, sl, r4
1a007c40:	f042 0201 	orr.w	r2, r2, #1
1a007c44:	6099      	str	r1, [r3, #8]
1a007c46:	604a      	str	r2, [r1, #4]
1a007c48:	f8db 3004 	ldr.w	r3, [fp, #4]
1a007c4c:	f003 0301 	and.w	r3, r3, #1
1a007c50:	431c      	orrs	r4, r3
1a007c52:	4648      	mov	r0, r9
1a007c54:	f8cb 4004 	str.w	r4, [fp, #4]
1a007c58:	f7fc f9d4 	bl	1a004004 <__malloc_unlock>
1a007c5c:	e750      	b.n	1a007b00 <_realloc_r+0xec>
1a007c5e:	6001      	str	r1, [r0, #0]
1a007c60:	686b      	ldr	r3, [r5, #4]
1a007c62:	6043      	str	r3, [r0, #4]
1a007c64:	2a1b      	cmp	r2, #27
1a007c66:	d83c      	bhi.n	1a007ce2 <_realloc_r+0x2ce>
1a007c68:	f105 0208 	add.w	r2, r5, #8
1a007c6c:	f100 0308 	add.w	r3, r0, #8
1a007c70:	68a9      	ldr	r1, [r5, #8]
1a007c72:	e72d      	b.n	1a007ad0 <_realloc_r+0xbc>
1a007c74:	eb08 0004 	add.w	r0, r8, r4
1a007c78:	1b0a      	subs	r2, r1, r4
1a007c7a:	f042 0201 	orr.w	r2, r2, #1
1a007c7e:	6098      	str	r0, [r3, #8]
1a007c80:	6042      	str	r2, [r0, #4]
1a007c82:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a007c86:	f003 0301 	and.w	r3, r3, #1
1a007c8a:	431c      	orrs	r4, r3
1a007c8c:	4648      	mov	r0, r9
1a007c8e:	f845 4c04 	str.w	r4, [r5, #-4]
1a007c92:	f7fc f9b7 	bl	1a004004 <__malloc_unlock>
1a007c96:	462f      	mov	r7, r5
1a007c98:	e732      	b.n	1a007b00 <_realloc_r+0xec>
1a007c9a:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a007c9e:	461e      	mov	r6, r3
1a007ca0:	60ca      	str	r2, [r1, #12]
1a007ca2:	eb08 0a03 	add.w	sl, r8, r3
1a007ca6:	6091      	str	r1, [r2, #8]
1a007ca8:	e752      	b.n	1a007b50 <_realloc_r+0x13c>
1a007caa:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a007cae:	f023 0303 	bic.w	r3, r3, #3
1a007cb2:	441e      	add	r6, r3
1a007cb4:	eb08 0a06 	add.w	sl, r8, r6
1a007cb8:	e74a      	b.n	1a007b50 <_realloc_r+0x13c>
1a007cba:	4629      	mov	r1, r5
1a007cbc:	f7ff fb38 	bl	1a007330 <memmove>
1a007cc0:	e70b      	b.n	1a007ada <_realloc_r+0xc6>
1a007cc2:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a007cc6:	465f      	mov	r7, fp
1a007cc8:	60ca      	str	r2, [r1, #12]
1a007cca:	6091      	str	r1, [r2, #8]
1a007ccc:	e71c      	b.n	1a007b08 <_realloc_r+0xf4>
1a007cce:	463a      	mov	r2, r7
1a007cd0:	e736      	b.n	1a007b40 <_realloc_r+0x12c>
1a007cd2:	4629      	mov	r1, r5
1a007cd4:	4638      	mov	r0, r7
1a007cd6:	461e      	mov	r6, r3
1a007cd8:	46d8      	mov	r8, fp
1a007cda:	f7ff fb29 	bl	1a007330 <memmove>
1a007cde:	463d      	mov	r5, r7
1a007ce0:	e736      	b.n	1a007b50 <_realloc_r+0x13c>
1a007ce2:	68ab      	ldr	r3, [r5, #8]
1a007ce4:	6083      	str	r3, [r0, #8]
1a007ce6:	68eb      	ldr	r3, [r5, #12]
1a007ce8:	60c3      	str	r3, [r0, #12]
1a007cea:	2a24      	cmp	r2, #36	; 0x24
1a007cec:	d011      	beq.n	1a007d12 <_realloc_r+0x2fe>
1a007cee:	f105 0210 	add.w	r2, r5, #16
1a007cf2:	f100 0310 	add.w	r3, r0, #16
1a007cf6:	6929      	ldr	r1, [r5, #16]
1a007cf8:	e6ea      	b.n	1a007ad0 <_realloc_r+0xbc>
1a007cfa:	f8cb 1010 	str.w	r1, [fp, #16]
1a007cfe:	68e9      	ldr	r1, [r5, #12]
1a007d00:	f8cb 1014 	str.w	r1, [fp, #20]
1a007d04:	2a24      	cmp	r2, #36	; 0x24
1a007d06:	d00e      	beq.n	1a007d26 <_realloc_r+0x312>
1a007d08:	6929      	ldr	r1, [r5, #16]
1a007d0a:	f10b 0218 	add.w	r2, fp, #24
1a007d0e:	3510      	adds	r5, #16
1a007d10:	e716      	b.n	1a007b40 <_realloc_r+0x12c>
1a007d12:	692b      	ldr	r3, [r5, #16]
1a007d14:	6103      	str	r3, [r0, #16]
1a007d16:	696b      	ldr	r3, [r5, #20]
1a007d18:	6143      	str	r3, [r0, #20]
1a007d1a:	69a9      	ldr	r1, [r5, #24]
1a007d1c:	f105 0218 	add.w	r2, r5, #24
1a007d20:	f100 0318 	add.w	r3, r0, #24
1a007d24:	e6d4      	b.n	1a007ad0 <_realloc_r+0xbc>
1a007d26:	692a      	ldr	r2, [r5, #16]
1a007d28:	f8cb 2018 	str.w	r2, [fp, #24]
1a007d2c:	696a      	ldr	r2, [r5, #20]
1a007d2e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007d32:	69a9      	ldr	r1, [r5, #24]
1a007d34:	f10b 0220 	add.w	r2, fp, #32
1a007d38:	3518      	adds	r5, #24
1a007d3a:	e701      	b.n	1a007b40 <_realloc_r+0x12c>
1a007d3c:	463a      	mov	r2, r7
1a007d3e:	e776      	b.n	1a007c2e <_realloc_r+0x21a>
1a007d40:	4629      	mov	r1, r5
1a007d42:	4638      	mov	r0, r7
1a007d44:	f7ff faf4 	bl	1a007330 <memmove>
1a007d48:	4b0c      	ldr	r3, [pc, #48]	; (1a007d7c <_realloc_r+0x368>)
1a007d4a:	e775      	b.n	1a007c38 <_realloc_r+0x224>
1a007d4c:	f8cb 1010 	str.w	r1, [fp, #16]
1a007d50:	68e9      	ldr	r1, [r5, #12]
1a007d52:	f8cb 1014 	str.w	r1, [fp, #20]
1a007d56:	2a24      	cmp	r2, #36	; 0x24
1a007d58:	d004      	beq.n	1a007d64 <_realloc_r+0x350>
1a007d5a:	6929      	ldr	r1, [r5, #16]
1a007d5c:	f10b 0218 	add.w	r2, fp, #24
1a007d60:	3510      	adds	r5, #16
1a007d62:	e764      	b.n	1a007c2e <_realloc_r+0x21a>
1a007d64:	692a      	ldr	r2, [r5, #16]
1a007d66:	f8cb 2018 	str.w	r2, [fp, #24]
1a007d6a:	696a      	ldr	r2, [r5, #20]
1a007d6c:	f8cb 201c 	str.w	r2, [fp, #28]
1a007d70:	69a9      	ldr	r1, [r5, #24]
1a007d72:	f10b 0220 	add.w	r2, fp, #32
1a007d76:	3518      	adds	r5, #24
1a007d78:	e759      	b.n	1a007c2e <_realloc_r+0x21a>
1a007d7a:	bf00      	nop
1a007d7c:	10000478 	.word	0x10000478

1a007d80 <frexp>:
1a007d80:	ec53 2b10 	vmov	r2, r3, d0
1a007d84:	b570      	push	{r4, r5, r6, lr}
1a007d86:	4e16      	ldr	r6, [pc, #88]	; (1a007de0 <frexp+0x60>)
1a007d88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a007d8c:	2500      	movs	r5, #0
1a007d8e:	42b1      	cmp	r1, r6
1a007d90:	4604      	mov	r4, r0
1a007d92:	6005      	str	r5, [r0, #0]
1a007d94:	dc21      	bgt.n	1a007dda <frexp+0x5a>
1a007d96:	ee10 6a10 	vmov	r6, s0
1a007d9a:	430e      	orrs	r6, r1
1a007d9c:	d01d      	beq.n	1a007dda <frexp+0x5a>
1a007d9e:	4e11      	ldr	r6, [pc, #68]	; (1a007de4 <frexp+0x64>)
1a007da0:	401e      	ands	r6, r3
1a007da2:	4618      	mov	r0, r3
1a007da4:	b966      	cbnz	r6, 1a007dc0 <frexp+0x40>
1a007da6:	4619      	mov	r1, r3
1a007da8:	2200      	movs	r2, #0
1a007daa:	ee10 0a10 	vmov	r0, s0
1a007dae:	4b0e      	ldr	r3, [pc, #56]	; (1a007de8 <frexp+0x68>)
1a007db0:	f7fa fdd8 	bl	1a002964 <__aeabi_dmul>
1a007db4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a007db8:	4602      	mov	r2, r0
1a007dba:	4608      	mov	r0, r1
1a007dbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a007dc0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a007dc4:	1509      	asrs	r1, r1, #20
1a007dc6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a007dca:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a007dce:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a007dd2:	4429      	add	r1, r5
1a007dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a007dd8:	6021      	str	r1, [r4, #0]
1a007dda:	ec43 2b10 	vmov	d0, r2, r3
1a007dde:	bd70      	pop	{r4, r5, r6, pc}
1a007de0:	7fefffff 	.word	0x7fefffff
1a007de4:	7ff00000 	.word	0x7ff00000
1a007de8:	43500000 	.word	0x43500000

1a007dec <strncpy>:
1a007dec:	b470      	push	{r4, r5, r6}
1a007dee:	ea40 0401 	orr.w	r4, r0, r1
1a007df2:	07a3      	lsls	r3, r4, #30
1a007df4:	d127      	bne.n	1a007e46 <strncpy+0x5a>
1a007df6:	2a03      	cmp	r2, #3
1a007df8:	d925      	bls.n	1a007e46 <strncpy+0x5a>
1a007dfa:	460b      	mov	r3, r1
1a007dfc:	4606      	mov	r6, r0
1a007dfe:	4619      	mov	r1, r3
1a007e00:	f853 5b04 	ldr.w	r5, [r3], #4
1a007e04:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a007e08:	ea24 0405 	bic.w	r4, r4, r5
1a007e0c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a007e10:	d106      	bne.n	1a007e20 <strncpy+0x34>
1a007e12:	3a04      	subs	r2, #4
1a007e14:	2a03      	cmp	r2, #3
1a007e16:	f846 5b04 	str.w	r5, [r6], #4
1a007e1a:	4619      	mov	r1, r3
1a007e1c:	d8ef      	bhi.n	1a007dfe <strncpy+0x12>
1a007e1e:	b182      	cbz	r2, 1a007e42 <strncpy+0x56>
1a007e20:	4633      	mov	r3, r6
1a007e22:	780c      	ldrb	r4, [r1, #0]
1a007e24:	f803 4b01 	strb.w	r4, [r3], #1
1a007e28:	1e55      	subs	r5, r2, #1
1a007e2a:	b174      	cbz	r4, 1a007e4a <strncpy+0x5e>
1a007e2c:	4432      	add	r2, r6
1a007e2e:	442e      	add	r6, r5
1a007e30:	e005      	b.n	1a007e3e <strncpy+0x52>
1a007e32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a007e36:	1af5      	subs	r5, r6, r3
1a007e38:	f803 4b01 	strb.w	r4, [r3], #1
1a007e3c:	b12c      	cbz	r4, 1a007e4a <strncpy+0x5e>
1a007e3e:	429a      	cmp	r2, r3
1a007e40:	d1f7      	bne.n	1a007e32 <strncpy+0x46>
1a007e42:	bc70      	pop	{r4, r5, r6}
1a007e44:	4770      	bx	lr
1a007e46:	4606      	mov	r6, r0
1a007e48:	e7e9      	b.n	1a007e1e <strncpy+0x32>
1a007e4a:	2d00      	cmp	r5, #0
1a007e4c:	d0f9      	beq.n	1a007e42 <strncpy+0x56>
1a007e4e:	441d      	add	r5, r3
1a007e50:	2200      	movs	r2, #0
1a007e52:	f803 2b01 	strb.w	r2, [r3], #1
1a007e56:	42ab      	cmp	r3, r5
1a007e58:	d1fb      	bne.n	1a007e52 <strncpy+0x66>
1a007e5a:	bc70      	pop	{r4, r5, r6}
1a007e5c:	4770      	bx	lr
1a007e5e:	bf00      	nop

1a007e60 <__sprint_r.part.0>:
1a007e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007e64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a007e66:	049c      	lsls	r4, r3, #18
1a007e68:	4693      	mov	fp, r2
1a007e6a:	d52d      	bpl.n	1a007ec8 <__sprint_r.part.0+0x68>
1a007e6c:	6893      	ldr	r3, [r2, #8]
1a007e6e:	6812      	ldr	r2, [r2, #0]
1a007e70:	b343      	cbz	r3, 1a007ec4 <__sprint_r.part.0+0x64>
1a007e72:	460e      	mov	r6, r1
1a007e74:	4607      	mov	r7, r0
1a007e76:	f102 0908 	add.w	r9, r2, #8
1a007e7a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a007e7e:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a007e82:	d015      	beq.n	1a007eb0 <__sprint_r.part.0+0x50>
1a007e84:	3d04      	subs	r5, #4
1a007e86:	2400      	movs	r4, #0
1a007e88:	e001      	b.n	1a007e8e <__sprint_r.part.0+0x2e>
1a007e8a:	45a0      	cmp	r8, r4
1a007e8c:	d00e      	beq.n	1a007eac <__sprint_r.part.0+0x4c>
1a007e8e:	4632      	mov	r2, r6
1a007e90:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a007e94:	4638      	mov	r0, r7
1a007e96:	f000 f8a9 	bl	1a007fec <_fputwc_r>
1a007e9a:	1c43      	adds	r3, r0, #1
1a007e9c:	f104 0401 	add.w	r4, r4, #1
1a007ea0:	d1f3      	bne.n	1a007e8a <__sprint_r.part.0+0x2a>
1a007ea2:	2300      	movs	r3, #0
1a007ea4:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a007ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007eac:	f8db 3008 	ldr.w	r3, [fp, #8]
1a007eb0:	f02a 0a03 	bic.w	sl, sl, #3
1a007eb4:	eba3 030a 	sub.w	r3, r3, sl
1a007eb8:	f8cb 3008 	str.w	r3, [fp, #8]
1a007ebc:	f109 0908 	add.w	r9, r9, #8
1a007ec0:	2b00      	cmp	r3, #0
1a007ec2:	d1da      	bne.n	1a007e7a <__sprint_r.part.0+0x1a>
1a007ec4:	2000      	movs	r0, #0
1a007ec6:	e7ec      	b.n	1a007ea2 <__sprint_r.part.0+0x42>
1a007ec8:	f7fe ffdc 	bl	1a006e84 <__sfvwrite_r>
1a007ecc:	2300      	movs	r3, #0
1a007ece:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a007ed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007ed6:	bf00      	nop

1a007ed8 <__sprint_r>:
1a007ed8:	6893      	ldr	r3, [r2, #8]
1a007eda:	b10b      	cbz	r3, 1a007ee0 <__sprint_r+0x8>
1a007edc:	f7ff bfc0 	b.w	1a007e60 <__sprint_r.part.0>
1a007ee0:	b410      	push	{r4}
1a007ee2:	4618      	mov	r0, r3
1a007ee4:	6053      	str	r3, [r2, #4]
1a007ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007eea:	4770      	bx	lr

1a007eec <_calloc_r>:
1a007eec:	b510      	push	{r4, lr}
1a007eee:	fb02 f101 	mul.w	r1, r2, r1
1a007ef2:	f7fb fcdf 	bl	1a0038b4 <_malloc_r>
1a007ef6:	4604      	mov	r4, r0
1a007ef8:	b168      	cbz	r0, 1a007f16 <_calloc_r+0x2a>
1a007efa:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007efe:	f022 0203 	bic.w	r2, r2, #3
1a007f02:	3a04      	subs	r2, #4
1a007f04:	2a24      	cmp	r2, #36	; 0x24
1a007f06:	d818      	bhi.n	1a007f3a <_calloc_r+0x4e>
1a007f08:	2a13      	cmp	r2, #19
1a007f0a:	d806      	bhi.n	1a007f1a <_calloc_r+0x2e>
1a007f0c:	4602      	mov	r2, r0
1a007f0e:	2300      	movs	r3, #0
1a007f10:	e9c2 3300 	strd	r3, r3, [r2]
1a007f14:	6093      	str	r3, [r2, #8]
1a007f16:	4620      	mov	r0, r4
1a007f18:	bd10      	pop	{r4, pc}
1a007f1a:	2300      	movs	r3, #0
1a007f1c:	2a1b      	cmp	r2, #27
1a007f1e:	e9c0 3300 	strd	r3, r3, [r0]
1a007f22:	d90f      	bls.n	1a007f44 <_calloc_r+0x58>
1a007f24:	2a24      	cmp	r2, #36	; 0x24
1a007f26:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a007f2a:	bf12      	itee	ne
1a007f2c:	f100 0210 	addne.w	r2, r0, #16
1a007f30:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a007f34:	f100 0218 	addeq.w	r2, r0, #24
1a007f38:	e7e9      	b.n	1a007f0e <_calloc_r+0x22>
1a007f3a:	2100      	movs	r1, #0
1a007f3c:	f7fc f80c 	bl	1a003f58 <memset>
1a007f40:	4620      	mov	r0, r4
1a007f42:	bd10      	pop	{r4, pc}
1a007f44:	f100 0208 	add.w	r2, r0, #8
1a007f48:	e7e1      	b.n	1a007f0e <_calloc_r+0x22>
1a007f4a:	bf00      	nop

1a007f4c <__fputwc>:
1a007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007f50:	b082      	sub	sp, #8
1a007f52:	4680      	mov	r8, r0
1a007f54:	4689      	mov	r9, r1
1a007f56:	4614      	mov	r4, r2
1a007f58:	f000 f87a 	bl	1a008050 <__locale_mb_cur_max>
1a007f5c:	2801      	cmp	r0, #1
1a007f5e:	d103      	bne.n	1a007f68 <__fputwc+0x1c>
1a007f60:	f109 33ff 	add.w	r3, r9, #4294967295
1a007f64:	2bfe      	cmp	r3, #254	; 0xfe
1a007f66:	d933      	bls.n	1a007fd0 <__fputwc+0x84>
1a007f68:	464a      	mov	r2, r9
1a007f6a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a007f6e:	a901      	add	r1, sp, #4
1a007f70:	4640      	mov	r0, r8
1a007f72:	f000 f8e1 	bl	1a008138 <_wcrtomb_r>
1a007f76:	1c42      	adds	r2, r0, #1
1a007f78:	4606      	mov	r6, r0
1a007f7a:	d02f      	beq.n	1a007fdc <__fputwc+0x90>
1a007f7c:	b320      	cbz	r0, 1a007fc8 <__fputwc+0x7c>
1a007f7e:	f89d c004 	ldrb.w	ip, [sp, #4]
1a007f82:	2500      	movs	r5, #0
1a007f84:	f10d 0a04 	add.w	sl, sp, #4
1a007f88:	e009      	b.n	1a007f9e <__fputwc+0x52>
1a007f8a:	6823      	ldr	r3, [r4, #0]
1a007f8c:	1c5a      	adds	r2, r3, #1
1a007f8e:	6022      	str	r2, [r4, #0]
1a007f90:	f883 c000 	strb.w	ip, [r3]
1a007f94:	3501      	adds	r5, #1
1a007f96:	42b5      	cmp	r5, r6
1a007f98:	d216      	bcs.n	1a007fc8 <__fputwc+0x7c>
1a007f9a:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a007f9e:	68a3      	ldr	r3, [r4, #8]
1a007fa0:	3b01      	subs	r3, #1
1a007fa2:	2b00      	cmp	r3, #0
1a007fa4:	60a3      	str	r3, [r4, #8]
1a007fa6:	daf0      	bge.n	1a007f8a <__fputwc+0x3e>
1a007fa8:	69a7      	ldr	r7, [r4, #24]
1a007faa:	42bb      	cmp	r3, r7
1a007fac:	4661      	mov	r1, ip
1a007fae:	4622      	mov	r2, r4
1a007fb0:	4640      	mov	r0, r8
1a007fb2:	db02      	blt.n	1a007fba <__fputwc+0x6e>
1a007fb4:	f1bc 0f0a 	cmp.w	ip, #10
1a007fb8:	d1e7      	bne.n	1a007f8a <__fputwc+0x3e>
1a007fba:	f000 f865 	bl	1a008088 <__swbuf_r>
1a007fbe:	1c43      	adds	r3, r0, #1
1a007fc0:	d1e8      	bne.n	1a007f94 <__fputwc+0x48>
1a007fc2:	b002      	add	sp, #8
1a007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007fc8:	4648      	mov	r0, r9
1a007fca:	b002      	add	sp, #8
1a007fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007fd0:	fa5f fc89 	uxtb.w	ip, r9
1a007fd4:	4606      	mov	r6, r0
1a007fd6:	f88d c004 	strb.w	ip, [sp, #4]
1a007fda:	e7d2      	b.n	1a007f82 <__fputwc+0x36>
1a007fdc:	89a3      	ldrh	r3, [r4, #12]
1a007fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007fe2:	81a3      	strh	r3, [r4, #12]
1a007fe4:	b002      	add	sp, #8
1a007fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007fea:	bf00      	nop

1a007fec <_fputwc_r>:
1a007fec:	b530      	push	{r4, r5, lr}
1a007fee:	4605      	mov	r5, r0
1a007ff0:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a007ff2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a007ff6:	07c0      	lsls	r0, r0, #31
1a007ff8:	4614      	mov	r4, r2
1a007ffa:	b083      	sub	sp, #12
1a007ffc:	b29a      	uxth	r2, r3
1a007ffe:	d401      	bmi.n	1a008004 <_fputwc_r+0x18>
1a008000:	0590      	lsls	r0, r2, #22
1a008002:	d51c      	bpl.n	1a00803e <_fputwc_r+0x52>
1a008004:	0490      	lsls	r0, r2, #18
1a008006:	d406      	bmi.n	1a008016 <_fputwc_r+0x2a>
1a008008:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00800a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00800e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a008012:	81a3      	strh	r3, [r4, #12]
1a008014:	6662      	str	r2, [r4, #100]	; 0x64
1a008016:	4628      	mov	r0, r5
1a008018:	4622      	mov	r2, r4
1a00801a:	f7ff ff97 	bl	1a007f4c <__fputwc>
1a00801e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a008020:	07da      	lsls	r2, r3, #31
1a008022:	4605      	mov	r5, r0
1a008024:	d402      	bmi.n	1a00802c <_fputwc_r+0x40>
1a008026:	89a3      	ldrh	r3, [r4, #12]
1a008028:	059b      	lsls	r3, r3, #22
1a00802a:	d502      	bpl.n	1a008032 <_fputwc_r+0x46>
1a00802c:	4628      	mov	r0, r5
1a00802e:	b003      	add	sp, #12
1a008030:	bd30      	pop	{r4, r5, pc}
1a008032:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a008034:	f7fb fc3c 	bl	1a0038b0 <__retarget_lock_release_recursive>
1a008038:	4628      	mov	r0, r5
1a00803a:	b003      	add	sp, #12
1a00803c:	bd30      	pop	{r4, r5, pc}
1a00803e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a008040:	9101      	str	r1, [sp, #4]
1a008042:	f7fb fc33 	bl	1a0038ac <__retarget_lock_acquire_recursive>
1a008046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00804a:	9901      	ldr	r1, [sp, #4]
1a00804c:	b29a      	uxth	r2, r3
1a00804e:	e7d9      	b.n	1a008004 <_fputwc_r+0x18>

1a008050 <__locale_mb_cur_max>:
1a008050:	4b01      	ldr	r3, [pc, #4]	; (1a008058 <__locale_mb_cur_max+0x8>)
1a008052:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a008056:	4770      	bx	lr
1a008058:	10000888 	.word	0x10000888

1a00805c <__ascii_mbtowc>:
1a00805c:	b082      	sub	sp, #8
1a00805e:	b149      	cbz	r1, 1a008074 <__ascii_mbtowc+0x18>
1a008060:	b15a      	cbz	r2, 1a00807a <__ascii_mbtowc+0x1e>
1a008062:	b16b      	cbz	r3, 1a008080 <__ascii_mbtowc+0x24>
1a008064:	7813      	ldrb	r3, [r2, #0]
1a008066:	600b      	str	r3, [r1, #0]
1a008068:	7812      	ldrb	r2, [r2, #0]
1a00806a:	1c10      	adds	r0, r2, #0
1a00806c:	bf18      	it	ne
1a00806e:	2001      	movne	r0, #1
1a008070:	b002      	add	sp, #8
1a008072:	4770      	bx	lr
1a008074:	a901      	add	r1, sp, #4
1a008076:	2a00      	cmp	r2, #0
1a008078:	d1f3      	bne.n	1a008062 <__ascii_mbtowc+0x6>
1a00807a:	4610      	mov	r0, r2
1a00807c:	b002      	add	sp, #8
1a00807e:	4770      	bx	lr
1a008080:	f06f 0001 	mvn.w	r0, #1
1a008084:	e7f4      	b.n	1a008070 <__ascii_mbtowc+0x14>
1a008086:	bf00      	nop

1a008088 <__swbuf_r>:
1a008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00808a:	460d      	mov	r5, r1
1a00808c:	4614      	mov	r4, r2
1a00808e:	4606      	mov	r6, r0
1a008090:	b110      	cbz	r0, 1a008098 <__swbuf_r+0x10>
1a008092:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a008094:	2b00      	cmp	r3, #0
1a008096:	d043      	beq.n	1a008120 <__swbuf_r+0x98>
1a008098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00809c:	69a3      	ldr	r3, [r4, #24]
1a00809e:	60a3      	str	r3, [r4, #8]
1a0080a0:	b291      	uxth	r1, r2
1a0080a2:	0708      	lsls	r0, r1, #28
1a0080a4:	d51b      	bpl.n	1a0080de <__swbuf_r+0x56>
1a0080a6:	6923      	ldr	r3, [r4, #16]
1a0080a8:	b1cb      	cbz	r3, 1a0080de <__swbuf_r+0x56>
1a0080aa:	b2ed      	uxtb	r5, r5
1a0080ac:	0489      	lsls	r1, r1, #18
1a0080ae:	462f      	mov	r7, r5
1a0080b0:	d522      	bpl.n	1a0080f8 <__swbuf_r+0x70>
1a0080b2:	6822      	ldr	r2, [r4, #0]
1a0080b4:	6961      	ldr	r1, [r4, #20]
1a0080b6:	1ad3      	subs	r3, r2, r3
1a0080b8:	4299      	cmp	r1, r3
1a0080ba:	dd29      	ble.n	1a008110 <__swbuf_r+0x88>
1a0080bc:	3301      	adds	r3, #1
1a0080be:	68a1      	ldr	r1, [r4, #8]
1a0080c0:	1c50      	adds	r0, r2, #1
1a0080c2:	3901      	subs	r1, #1
1a0080c4:	60a1      	str	r1, [r4, #8]
1a0080c6:	6020      	str	r0, [r4, #0]
1a0080c8:	7015      	strb	r5, [r2, #0]
1a0080ca:	6962      	ldr	r2, [r4, #20]
1a0080cc:	429a      	cmp	r2, r3
1a0080ce:	d02a      	beq.n	1a008126 <__swbuf_r+0x9e>
1a0080d0:	89a3      	ldrh	r3, [r4, #12]
1a0080d2:	07db      	lsls	r3, r3, #31
1a0080d4:	d501      	bpl.n	1a0080da <__swbuf_r+0x52>
1a0080d6:	2d0a      	cmp	r5, #10
1a0080d8:	d025      	beq.n	1a008126 <__swbuf_r+0x9e>
1a0080da:	4638      	mov	r0, r7
1a0080dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0080de:	4621      	mov	r1, r4
1a0080e0:	4630      	mov	r0, r6
1a0080e2:	f7fd fea9 	bl	1a005e38 <__swsetup_r>
1a0080e6:	bb20      	cbnz	r0, 1a008132 <__swbuf_r+0xaa>
1a0080e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0080ec:	6923      	ldr	r3, [r4, #16]
1a0080ee:	b291      	uxth	r1, r2
1a0080f0:	b2ed      	uxtb	r5, r5
1a0080f2:	0489      	lsls	r1, r1, #18
1a0080f4:	462f      	mov	r7, r5
1a0080f6:	d4dc      	bmi.n	1a0080b2 <__swbuf_r+0x2a>
1a0080f8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a0080fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a0080fe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a008102:	81a2      	strh	r2, [r4, #12]
1a008104:	6822      	ldr	r2, [r4, #0]
1a008106:	6661      	str	r1, [r4, #100]	; 0x64
1a008108:	6961      	ldr	r1, [r4, #20]
1a00810a:	1ad3      	subs	r3, r2, r3
1a00810c:	4299      	cmp	r1, r3
1a00810e:	dcd5      	bgt.n	1a0080bc <__swbuf_r+0x34>
1a008110:	4621      	mov	r1, r4
1a008112:	4630      	mov	r0, r6
1a008114:	f7fb f9a0 	bl	1a003458 <_fflush_r>
1a008118:	b958      	cbnz	r0, 1a008132 <__swbuf_r+0xaa>
1a00811a:	6822      	ldr	r2, [r4, #0]
1a00811c:	2301      	movs	r3, #1
1a00811e:	e7ce      	b.n	1a0080be <__swbuf_r+0x36>
1a008120:	f7fb f9f6 	bl	1a003510 <__sinit>
1a008124:	e7b8      	b.n	1a008098 <__swbuf_r+0x10>
1a008126:	4621      	mov	r1, r4
1a008128:	4630      	mov	r0, r6
1a00812a:	f7fb f995 	bl	1a003458 <_fflush_r>
1a00812e:	2800      	cmp	r0, #0
1a008130:	d0d3      	beq.n	1a0080da <__swbuf_r+0x52>
1a008132:	f04f 37ff 	mov.w	r7, #4294967295
1a008136:	e7d0      	b.n	1a0080da <__swbuf_r+0x52>

1a008138 <_wcrtomb_r>:
1a008138:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00813a:	4c0b      	ldr	r4, [pc, #44]	; (1a008168 <_wcrtomb_r+0x30>)
1a00813c:	b085      	sub	sp, #20
1a00813e:	4606      	mov	r6, r0
1a008140:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a008144:	461f      	mov	r7, r3
1a008146:	b121      	cbz	r1, 1a008152 <_wcrtomb_r+0x1a>
1a008148:	47a0      	blx	r4
1a00814a:	1c43      	adds	r3, r0, #1
1a00814c:	d006      	beq.n	1a00815c <_wcrtomb_r+0x24>
1a00814e:	b005      	add	sp, #20
1a008150:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a008152:	460a      	mov	r2, r1
1a008154:	a901      	add	r1, sp, #4
1a008156:	47a0      	blx	r4
1a008158:	1c43      	adds	r3, r0, #1
1a00815a:	d1f8      	bne.n	1a00814e <_wcrtomb_r+0x16>
1a00815c:	2200      	movs	r2, #0
1a00815e:	238a      	movs	r3, #138	; 0x8a
1a008160:	603a      	str	r2, [r7, #0]
1a008162:	6033      	str	r3, [r6, #0]
1a008164:	b005      	add	sp, #20
1a008166:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a008168:	10000888 	.word	0x10000888

1a00816c <__ascii_wctomb>:
1a00816c:	b149      	cbz	r1, 1a008182 <__ascii_wctomb+0x16>
1a00816e:	2aff      	cmp	r2, #255	; 0xff
1a008170:	d802      	bhi.n	1a008178 <__ascii_wctomb+0xc>
1a008172:	700a      	strb	r2, [r1, #0]
1a008174:	2001      	movs	r0, #1
1a008176:	4770      	bx	lr
1a008178:	238a      	movs	r3, #138	; 0x8a
1a00817a:	6003      	str	r3, [r0, #0]
1a00817c:	f04f 30ff 	mov.w	r0, #4294967295
1a008180:	4770      	bx	lr
1a008182:	4608      	mov	r0, r1
1a008184:	4770      	bx	lr
1a008186:	bf00      	nop

1a008188 <__aeabi_dcmpun>:
1a008188:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00818c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a008190:	d102      	bne.n	1a008198 <__aeabi_dcmpun+0x10>
1a008192:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a008196:	d10a      	bne.n	1a0081ae <__aeabi_dcmpun+0x26>
1a008198:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00819c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0081a0:	d102      	bne.n	1a0081a8 <__aeabi_dcmpun+0x20>
1a0081a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0081a6:	d102      	bne.n	1a0081ae <__aeabi_dcmpun+0x26>
1a0081a8:	f04f 0000 	mov.w	r0, #0
1a0081ac:	4770      	bx	lr
1a0081ae:	f04f 0001 	mov.w	r0, #1
1a0081b2:	4770      	bx	lr

1a0081b4 <__aeabi_d2iz>:
1a0081b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0081b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a0081bc:	d215      	bcs.n	1a0081ea <__aeabi_d2iz+0x36>
1a0081be:	d511      	bpl.n	1a0081e4 <__aeabi_d2iz+0x30>
1a0081c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a0081c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a0081c8:	d912      	bls.n	1a0081f0 <__aeabi_d2iz+0x3c>
1a0081ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0081ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0081d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a0081d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0081da:	fa23 f002 	lsr.w	r0, r3, r2
1a0081de:	bf18      	it	ne
1a0081e0:	4240      	negne	r0, r0
1a0081e2:	4770      	bx	lr
1a0081e4:	f04f 0000 	mov.w	r0, #0
1a0081e8:	4770      	bx	lr
1a0081ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a0081ee:	d105      	bne.n	1a0081fc <__aeabi_d2iz+0x48>
1a0081f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a0081f4:	bf08      	it	eq
1a0081f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a0081fa:	4770      	bx	lr
1a0081fc:	f04f 0000 	mov.w	r0, #0
1a008200:	4770      	bx	lr
1a008202:	bf00      	nop
1a008204:	63696e49 	.word	0x63696e49
1a008208:	696c6169 	.word	0x696c6169
1a00820c:	646e617a 	.word	0x646e617a
1a008210:	4d49206f 	.word	0x4d49206f
1a008214:	504d2055 	.word	0x504d2055
1a008218:	35323955 	.word	0x35323955
1a00821c:	2e2e2e30 	.word	0x2e2e2e30
1a008220:	0000000d 	.word	0x0000000d
1a008224:	20554d49 	.word	0x20554d49
1a008228:	3955504d 	.word	0x3955504d
1a00822c:	20303532 	.word	0x20303532
1a008230:	69206f6e 	.word	0x69206f6e
1a008234:	6963696e 	.word	0x6963696e
1a008238:	7a696c61 	.word	0x7a696c61
1a00823c:	2c6f6461 	.word	0x2c6f6461
1a008240:	65686320 	.word	0x65686320
1a008244:	65657571 	.word	0x65657571
1a008248:	73616c20 	.word	0x73616c20
1a00824c:	6e6f6320 	.word	0x6e6f6320
1a008250:	6f697865 	.word	0x6f697865
1a008254:	3a73656e 	.word	0x3a73656e
1a008258:	000d0a0d 	.word	0x000d0a0d
1a00825c:	3955504d 	.word	0x3955504d
1a008260:	20303532 	.word	0x20303532
1a008264:	2d2d2d2d 	.word	0x2d2d2d2d
1a008268:	55444520 	.word	0x55444520
1a00826c:	4149432d 	.word	0x4149432d
1a008270:	584e2d41 	.word	0x584e2d41
1a008274:	0d0a0d50 	.word	0x0d0a0d50
1a008278:	00000000 	.word	0x00000000
1a00827c:	20202020 	.word	0x20202020
1a008280:	20434356 	.word	0x20434356
1a008284:	2d2d2d2d 	.word	0x2d2d2d2d
1a008288:	332e3320 	.word	0x332e3320
1a00828c:	00000d56 	.word	0x00000d56
1a008290:	20202020 	.word	0x20202020
1a008294:	20444e47 	.word	0x20444e47
1a008298:	2d2d2d2d 	.word	0x2d2d2d2d
1a00829c:	444e4720 	.word	0x444e4720
1a0082a0:	0000000d 	.word	0x0000000d
1a0082a4:	20202020 	.word	0x20202020
1a0082a8:	204c4353 	.word	0x204c4353
1a0082ac:	2d2d2d2d 	.word	0x2d2d2d2d
1a0082b0:	4c435320 	.word	0x4c435320
1a0082b4:	0000000d 	.word	0x0000000d
1a0082b8:	20202020 	.word	0x20202020
1a0082bc:	20414453 	.word	0x20414453
1a0082c0:	2d2d2d2d 	.word	0x2d2d2d2d
1a0082c4:	41445320 	.word	0x41445320
1a0082c8:	0000000d 	.word	0x0000000d
1a0082cc:	20202020 	.word	0x20202020
1a0082d0:	20304441 	.word	0x20304441
1a0082d4:	2d2d2d2d 	.word	0x2d2d2d2d
1a0082d8:	444e4720 	.word	0x444e4720
1a0082dc:	000d0a0d 	.word	0x000d0a0d
1a0082e0:	64206553 	.word	0x64206553
1a0082e4:	65697465 	.word	0x65697465
1a0082e8:	6520656e 	.word	0x6520656e
1a0082ec:	7270206c 	.word	0x7270206c
1a0082f0:	6172676f 	.word	0x6172676f
1a0082f4:	0d2e616d 	.word	0x0d2e616d
1a0082f8:	00000000 	.word	0x00000000
1a0082fc:	20554d49 	.word	0x20554d49
1a008300:	3955504d 	.word	0x3955504d
1a008304:	20303532 	.word	0x20303532
1a008308:	63696e69 	.word	0x63696e69
1a00830c:	696c6169 	.word	0x696c6169
1a008310:	6f64617a 	.word	0x6f64617a
1a008314:	726f6320 	.word	0x726f6320
1a008318:	74636572 	.word	0x74636572
1a00831c:	6e656d61 	.word	0x6e656d61
1a008320:	0d2e6574 	.word	0x0d2e6574
1a008324:	00000d0a 	.word	0x00000d0a
1a008328:	6f726947 	.word	0x6f726947
1a00832c:	706f6373 	.word	0x706f6373
1a008330:	20203a6f 	.word	0x20203a6f
1a008334:	20202020 	.word	0x20202020
1a008338:	2c662528 	.word	0x2c662528
1a00833c:	2c662520 	.word	0x2c662520
1a008340:	29662520 	.word	0x29662520
1a008344:	5b202020 	.word	0x5b202020
1a008348:	2f646172 	.word	0x2f646172
1a00834c:	0a0d5d73 	.word	0x0a0d5d73
1a008350:	00000000 	.word	0x00000000
1a008354:	6c656341 	.word	0x6c656341
1a008358:	6d6f7265 	.word	0x6d6f7265
1a00835c:	6f727465 	.word	0x6f727465
1a008360:	2020203a 	.word	0x2020203a
1a008364:	2c662528 	.word	0x2c662528
1a008368:	2c662520 	.word	0x2c662520
1a00836c:	29662520 	.word	0x29662520
1a008370:	5b202020 	.word	0x5b202020
1a008374:	32732f6d 	.word	0x32732f6d
1a008378:	000a0d5d 	.word	0x000a0d5d
1a00837c:	6e67614d 	.word	0x6e67614d
1a008380:	6d6f7465 	.word	0x6d6f7465
1a008384:	6f727465 	.word	0x6f727465
1a008388:	2020203a 	.word	0x2020203a
1a00838c:	2c662528 	.word	0x2c662528
1a008390:	2c662520 	.word	0x2c662520
1a008394:	29662520 	.word	0x29662520
1a008398:	5b202020 	.word	0x5b202020
1a00839c:	0d5d5475 	.word	0x0d5d5475
1a0083a0:	0000000a 	.word	0x0000000a
1a0083a4:	706d6554 	.word	0x706d6554
1a0083a8:	74617265 	.word	0x74617265
1a0083ac:	3a617275 	.word	0x3a617275
1a0083b0:	20202020 	.word	0x20202020
1a0083b4:	20206625 	.word	0x20206625
1a0083b8:	5d435b20 	.word	0x5d435b20
1a0083bc:	0a0d0a0d 	.word	0x0a0d0a0d
1a0083c0:	ffffff00 	.word	0xffffff00

1a0083c4 <InitClkStates>:
1a0083c4:	01010f01                                ....

1a0083c8 <pinmuxing>:
1a0083c8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0083d8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0083e8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0083f8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a008408:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a008418:	00d50301 00d50401 00160107 00560207     ..............V.
1a008428:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a008438:	00570206                                ..W.

1a00843c <ExtRateIn>:
1a00843c:	00000000                                ....

1a008440 <GpioButtons>:
1a008440:	08000400 09010900                       ........

1a008448 <GpioLeds>:
1a008448:	01050005 0e000205 0c010b01              ............

1a008454 <GpioPorts>:
1a008454:	03030003 0f050403 05031005 07030603     ................
1a008464:	ffff0802                                ....

1a008468 <OscRateIn>:
1a008468:	00b71b00                                ....

1a00846c <InitClkStates>:
1a00846c:	00010100 00010909 0001090a 01010701     ................
1a00847c:	00010902 00010906 0101090c 0001090d     ................
1a00848c:	0001090e 0001090f 00010910 00010911     ................
1a00849c:	00010912 00010913 00011114 00011119     ................
1a0084ac:	0001111a 0001111b 08040201 0f0f0f03     ................
1a0084bc:	ffff00ff                                ....

1a0084c0 <periph_to_base>:
1a0084c0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0084d0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0084e0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0084f0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008500:	01820013 00120182 01a201a2 01c20011     ................
1a008510:	001001c2 01e201e2 0202000f 000e0202     ................
1a008520:	02220222 0223000d 001c0223              "."...#.#...

1a00852c <UART_BClock>:
1a00852c:	01a201c2 01620182                       ......b.

1a008534 <UART_PClock>:
1a008534:	00820081 00a200a1                       ........

1a00853c <gpioPinsInit>:
1a00853c:	02000104 00050701 05010d03 04080100     ................
1a00854c:	02020002 02000304 00000403 04070002     ................
1a00855c:	030c0300 09050402 05040103 04030208     ................
1a00856c:	04020305 06040504 0802000c 03000b06     ................
1a00857c:	00090607 07060503 060f0504 03030004     ................
1a00858c:	02000404 00050404 06040502 04060200     ................
1a00859c:	0c050408 05040a04 0003010e 14010a00     ................
1a0085ac:	010f0000 0d000012 00001101 0010010c     ................
1a0085bc:	07070300 000f0300 01000001 00000000     ................
1a0085cc:	000a0600 08060603 06100504 04030005     ................
1a0085dc:	03000106 04090400 04010d05 010b0000     ................
1a0085ec:	0200000f 00000001 00010104 02010800     ................
1a0085fc:	01090000 09010006 05040002 04010200     ................
1a00860c:	02020105 02020504 0e00000a 01000b02     ................
1a00861c:	000c020b ffff0c01                       ........

1a008624 <_ctype_>:
1a008624:	20202000 20202020 28282020 20282828     .         ((((( 
1a008634:	20202020 20202020 20202020 20202020                     
1a008644:	10108820 10101010 10101010 10101010      ...............
1a008654:	04040410 04040404 10040404 10101010     ................
1a008664:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a008674:	01010101 01010101 01010101 10101010     ................
1a008684:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a008694:	02020202 02020202 02020202 10101010     ................
1a0086a4:	00000020 00000000 00000000 00000000      ...............
	...
1a008724:	ffffff00 00464e49 00666e69 004e414e     ....INF.inf.NAN.
1a008734:	006e616e 33323130 37363534 42413938     nan.0123456789AB
1a008744:	46454443 00000000 33323130 37363534     CDEF....01234567
1a008754:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
1a008764:	0000296c ffff0030                       l)..0...

1a00876c <blanks.8693>:
1a00876c:	20202020 20202020 20202020 20202020                     

1a00877c <zeroes.8694>:
1a00877c:	30303030 30303030 30303030 30303030     0000000000000000
1a00878c:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....
1a00879c:	ffffffff                                ....

1a0087a0 <__mprec_bigtens>:
1a0087a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a0087b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a0087c0:	7f73bf3c 75154fdd                       <.s..O.u

1a0087c8 <__mprec_tens>:
1a0087c8:	00000000 3ff00000 00000000 40240000     .......?......$@
1a0087d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a0087e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a0087f8:	00000000 412e8480 00000000 416312d0     .......A......cA
1a008808:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a008818:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a008828:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a008838:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a008848:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a008858:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a008868:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a008878:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a008888:	79d99db4 44ea7843                       ...yCx.D

1a008890 <p05.7442>:
1a008890:	00000005 00000019 0000007d 00000043     ........}...C...
1a0088a0:	49534f50 ffff0058 0000002e              POSIX.......
